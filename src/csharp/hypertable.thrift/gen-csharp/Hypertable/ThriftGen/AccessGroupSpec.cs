/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Hypertable.ThriftGen
{

  /// <summary>
  /// Describes an AccessGroup
  /// <dl>
  ///   <dt>name</dt>
  ///   <dd>Name of the access group</dd>
  /// 
  ///   <dt>in_memory</dt>
  ///   <dd>Is this access group in memory</dd>
  /// 
  ///   <dt>replication</dt>
  ///   <dd>Replication factor for this AG</dd>
  /// 
  ///   <dt>blocksize</dt>
  ///   <dd>Specifies blocksize for this AG</dd>
  /// 
  ///   <dt>compressor</dt>
  ///   <dd>Specifies compressor for this AG</dd>
  /// 
  ///   <dt>bloom_filter</dt>
  ///   <dd>Specifies bloom filter type</dd>
  /// 
  ///   <dt>columns</dt>
  ///   <dd>Specifies list of column families in this AG</dd>
  /// </dl>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AccessGroupSpec : TBase
  {
    private string _name;
    private long _generation;
    private AccessGroupOptions _options;
    private ColumnFamilyOptions _defaults;

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public long Generation
    {
      get
      {
        return _generation;
      }
      set
      {
        __isset.generation = true;
        this._generation = value;
      }
    }

    public AccessGroupOptions Options
    {
      get
      {
        return _options;
      }
      set
      {
        __isset.options = true;
        this._options = value;
      }
    }

    public ColumnFamilyOptions Defaults
    {
      get
      {
        return _defaults;
      }
      set
      {
        __isset.defaults = true;
        this._defaults = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool name;
      public bool generation;
      public bool options;
      public bool defaults;
    }

    public AccessGroupSpec() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                Generation = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Options = new AccessGroupOptions();
                Options.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                Defaults = new ColumnFamilyOptions();
                Defaults.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("AccessGroupSpec");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.generation) {
          field.Name = "generation";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Generation);
          oprot.WriteFieldEnd();
        }
        if (Options != null && __isset.options) {
          field.Name = "options";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Options.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Defaults != null && __isset.defaults) {
          field.Name = "defaults";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          Defaults.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("AccessGroupSpec(");
      bool __first = true;
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (__isset.generation) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Generation: ");
        __sb.Append(Generation);
      }
      if (Options != null && __isset.options) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Options: ");
        __sb.Append(Options== null ? "<null>" : Options.ToString());
      }
      if (Defaults != null && __isset.defaults) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Defaults: ");
        __sb.Append(Defaults== null ? "<null>" : Defaults.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
