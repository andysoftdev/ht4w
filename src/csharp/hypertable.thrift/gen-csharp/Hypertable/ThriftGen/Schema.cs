/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Hypertable.ThriftGen
{

  /// <summary>
  /// Describes a schema.
  /// <dl>
  ///   <dt>access_groups</dt>
  ///   <dd>Map of access groups</dd>
  /// 
  ///   <dt>column_families</dt>
  ///   <dd>Map of column families</dd>
  /// </dl>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Schema : TBase
  {
    private Dictionary<string, AccessGroupSpec> _access_groups;
    private Dictionary<string, ColumnFamilySpec> _column_families;
    private long _generation;
    private int _version;
    private int _group_commit_interval;
    private AccessGroupOptions _access_group_defaults;
    private ColumnFamilyOptions _column_family_defaults;

    public Dictionary<string, AccessGroupSpec> Access_groups
    {
      get
      {
        return _access_groups;
      }
      set
      {
        __isset.access_groups = true;
        this._access_groups = value;
      }
    }

    public Dictionary<string, ColumnFamilySpec> Column_families
    {
      get
      {
        return _column_families;
      }
      set
      {
        __isset.column_families = true;
        this._column_families = value;
      }
    }

    public long Generation
    {
      get
      {
        return _generation;
      }
      set
      {
        __isset.generation = true;
        this._generation = value;
      }
    }

    public int Version
    {
      get
      {
        return _version;
      }
      set
      {
        __isset.version = true;
        this._version = value;
      }
    }

    public int Group_commit_interval
    {
      get
      {
        return _group_commit_interval;
      }
      set
      {
        __isset.group_commit_interval = true;
        this._group_commit_interval = value;
      }
    }

    public AccessGroupOptions Access_group_defaults
    {
      get
      {
        return _access_group_defaults;
      }
      set
      {
        __isset.access_group_defaults = true;
        this._access_group_defaults = value;
      }
    }

    public ColumnFamilyOptions Column_family_defaults
    {
      get
      {
        return _column_family_defaults;
      }
      set
      {
        __isset.column_family_defaults = true;
        this._column_family_defaults = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool access_groups;
      public bool column_families;
      public bool generation;
      public bool version;
      public bool group_commit_interval;
      public bool access_group_defaults;
      public bool column_family_defaults;
    }

    public Schema() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Map) {
                {
                  Access_groups = new Dictionary<string, AccessGroupSpec>();
                  TMap _map28 = iprot.ReadMapBegin();
                  for( int _i29 = 0; _i29 < _map28.Count; ++_i29)
                  {
                    string _key30;
                    AccessGroupSpec _val31;
                    _key30 = iprot.ReadString();
                    _val31 = new AccessGroupSpec();
                    _val31.Read(iprot);
                    Access_groups[_key30] = _val31;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Map) {
                {
                  Column_families = new Dictionary<string, ColumnFamilySpec>();
                  TMap _map32 = iprot.ReadMapBegin();
                  for( int _i33 = 0; _i33 < _map32.Count; ++_i33)
                  {
                    string _key34;
                    ColumnFamilySpec _val35;
                    _key34 = iprot.ReadString();
                    _val35 = new ColumnFamilySpec();
                    _val35.Read(iprot);
                    Column_families[_key34] = _val35;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Generation = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Version = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Group_commit_interval = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Struct) {
                Access_group_defaults = new AccessGroupOptions();
                Access_group_defaults.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Struct) {
                Column_family_defaults = new ColumnFamilyOptions();
                Column_family_defaults.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("Schema");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Access_groups != null && __isset.access_groups) {
          field.Name = "access_groups";
          field.Type = TType.Map;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Access_groups.Count));
            foreach (string _iter36 in Access_groups.Keys)
            {
              oprot.WriteString(_iter36);
              Access_groups[_iter36].Write(oprot);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Column_families != null && __isset.column_families) {
          field.Name = "column_families";
          field.Type = TType.Map;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Column_families.Count));
            foreach (string _iter37 in Column_families.Keys)
            {
              oprot.WriteString(_iter37);
              Column_families[_iter37].Write(oprot);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.generation) {
          field.Name = "generation";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Generation);
          oprot.WriteFieldEnd();
        }
        if (__isset.version) {
          field.Name = "version";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Version);
          oprot.WriteFieldEnd();
        }
        if (__isset.group_commit_interval) {
          field.Name = "group_commit_interval";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Group_commit_interval);
          oprot.WriteFieldEnd();
        }
        if (Access_group_defaults != null && __isset.access_group_defaults) {
          field.Name = "access_group_defaults";
          field.Type = TType.Struct;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          Access_group_defaults.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Column_family_defaults != null && __isset.column_family_defaults) {
          field.Name = "column_family_defaults";
          field.Type = TType.Struct;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          Column_family_defaults.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Schema(");
      bool __first = true;
      if (Access_groups != null && __isset.access_groups) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Access_groups: ");
        __sb.Append(Access_groups);
      }
      if (Column_families != null && __isset.column_families) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Column_families: ");
        __sb.Append(Column_families);
      }
      if (__isset.generation) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Generation: ");
        __sb.Append(Generation);
      }
      if (__isset.version) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Version: ");
        __sb.Append(Version);
      }
      if (__isset.group_commit_interval) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Group_commit_interval: ");
        __sb.Append(Group_commit_interval);
      }
      if (Access_group_defaults != null && __isset.access_group_defaults) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Access_group_defaults: ");
        __sb.Append(Access_group_defaults== null ? "<null>" : Access_group_defaults.ToString());
      }
      if (Column_family_defaults != null && __isset.column_family_defaults) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Column_family_defaults: ");
        __sb.Append(Column_family_defaults== null ? "<null>" : Column_family_defaults.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
