/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Hypertable.ThriftGen
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ColumnFamilyOptions : TBase
  {
    private int _max_versions;
    private int _ttl;
    private bool _time_order_desc;
    private bool _counter;

    public int Max_versions
    {
      get
      {
        return _max_versions;
      }
      set
      {
        __isset.max_versions = true;
        this._max_versions = value;
      }
    }

    public int Ttl
    {
      get
      {
        return _ttl;
      }
      set
      {
        __isset.ttl = true;
        this._ttl = value;
      }
    }

    public bool Time_order_desc
    {
      get
      {
        return _time_order_desc;
      }
      set
      {
        __isset.time_order_desc = true;
        this._time_order_desc = value;
      }
    }

    public bool Counter
    {
      get
      {
        return _counter;
      }
      set
      {
        __isset.counter = true;
        this._counter = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool max_versions;
      public bool ttl;
      public bool time_order_desc;
      public bool counter;
    }

    public ColumnFamilyOptions() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Max_versions = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Ttl = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Bool) {
              Time_order_desc = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Bool) {
              Counter = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ColumnFamilyOptions");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.max_versions) {
        field.Name = "max_versions";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Max_versions);
        oprot.WriteFieldEnd();
      }
      if (__isset.ttl) {
        field.Name = "ttl";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Ttl);
        oprot.WriteFieldEnd();
      }
      if (__isset.time_order_desc) {
        field.Name = "time_order_desc";
        field.Type = TType.Bool;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Time_order_desc);
        oprot.WriteFieldEnd();
      }
      if (__isset.counter) {
        field.Name = "counter";
        field.Type = TType.Bool;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Counter);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ColumnFamilyOptions(");
      bool __first = true;
      if (__isset.max_versions) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Max_versions: ");
        __sb.Append(Max_versions);
      }
      if (__isset.ttl) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ttl: ");
        __sb.Append(Ttl);
      }
      if (__isset.time_order_desc) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Time_order_desc: ");
        __sb.Append(Time_order_desc);
      }
      if (__isset.counter) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Counter: ");
        __sb.Append(Counter);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
