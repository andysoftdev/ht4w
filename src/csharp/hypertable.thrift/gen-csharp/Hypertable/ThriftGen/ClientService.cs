/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Hypertable.ThriftGen
{
  public partial class ClientService {
    /// <summary>
    /// The client service mimics the C++ client API, with table, scanner and
    /// mutator interface flattened.
    /// </summary>
    public interface Iface {
      /// <summary>
      /// Create a namespace
      /// 
      /// @param ns - namespace name
      /// </summary>
      /// <param name="ns"></param>
      void namespace_create(string ns);
      #if SILVERLIGHT
      IAsyncResult Begin_namespace_create(AsyncCallback callback, object state, string ns);
      void End_namespace_create(IAsyncResult asyncResult);
      #endif
      void create_namespace(string ns);
      #if SILVERLIGHT
      IAsyncResult Begin_create_namespace(AsyncCallback callback, object state, string ns);
      void End_create_namespace(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Create a table
      /// 
      /// @param ns - namespace id
      /// @param table_name - table name
      /// @param schema - schema of the table
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      /// <param name="schema"></param>
      void table_create(long ns, string table_name, Schema schema);
      #if SILVERLIGHT
      IAsyncResult Begin_table_create(AsyncCallback callback, object state, long ns, string table_name, Schema schema);
      void End_table_create(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Alter a table
      /// 
      /// @param ns - namespace id
      /// @param table_name - table name
      /// @param schema - schema of the table
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      /// <param name="schema"></param>
      void table_alter(long ns, string table_name, Schema schema);
      #if SILVERLIGHT
      IAsyncResult Begin_table_alter(AsyncCallback callback, object state, long ns, string table_name, Schema schema);
      void End_table_alter(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Refreshes the cached table information
      /// 
      /// @param ns - namespace
      /// @param table_name - name of the table
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      void refresh_table(long ns, string table_name);
      #if SILVERLIGHT
      IAsyncResult Begin_refresh_table(AsyncCallback callback, object state, long ns, string table_name);
      void End_refresh_table(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Open a namespace
      /// 
      /// @param ns - namespace
      /// @return value is guaranteed to be non-zero and unique
      /// </summary>
      /// <param name="ns"></param>
      long namespace_open(string ns);
      #if SILVERLIGHT
      IAsyncResult Begin_namespace_open(AsyncCallback callback, object state, string ns);
      long End_namespace_open(IAsyncResult asyncResult);
      #endif
      long open_namespace(string ns);
      #if SILVERLIGHT
      IAsyncResult Begin_open_namespace(AsyncCallback callback, object state, string ns);
      long End_open_namespace(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Close a namespace
      /// 
      /// @param ns - namespace
      /// </summary>
      /// <param name="ns"></param>
      void namespace_close(long ns);
      #if SILVERLIGHT
      IAsyncResult Begin_namespace_close(AsyncCallback callback, object state, long ns);
      void End_namespace_close(IAsyncResult asyncResult);
      #endif
      void close_namespace(long ns);
      #if SILVERLIGHT
      IAsyncResult Begin_close_namespace(AsyncCallback callback, object state, long ns);
      void End_close_namespace(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Open a future object
      /// @param capacity - Amount of result data the future object can enqueue without blocking threads
      /// </summary>
      /// <param name="capacity"></param>
      long future_open(int capacity);
      #if SILVERLIGHT
      IAsyncResult Begin_future_open(AsyncCallback callback, object state, int capacity);
      long End_future_open(IAsyncResult asyncResult);
      #endif
      long open_future(int capacity);
      #if SILVERLIGHT
      IAsyncResult Begin_open_future(AsyncCallback callback, object state, int capacity);
      long End_open_future(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Cancel tasks outstanding in a future object
      /// @param ff - Future object
      /// </summary>
      /// <param name="ff"></param>
      void future_cancel(long ff);
      #if SILVERLIGHT
      IAsyncResult Begin_future_cancel(AsyncCallback callback, object state, long ff);
      void End_future_cancel(IAsyncResult asyncResult);
      #endif
      void cancel_future(long ff);
      #if SILVERLIGHT
      IAsyncResult Begin_cancel_future(AsyncCallback callback, object state, long ff);
      void End_cancel_future(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Fetch asynchronous results
      /// @param ff - Future object which has the asynchronous results
      /// @return - result from async scanner/mutator
      /// </summary>
      /// <param name="ff"></param>
      /// <param name="timeout_millis"></param>
      Result future_get_result(long ff, int timeout_millis);
      #if SILVERLIGHT
      IAsyncResult Begin_future_get_result(AsyncCallback callback, object state, long ff, int timeout_millis);
      Result End_future_get_result(IAsyncResult asyncResult);
      #endif
      Result get_future_result(long ff, int timeout_millis);
      #if SILVERLIGHT
      IAsyncResult Begin_get_future_result(AsyncCallback callback, object state, long ff, int timeout_millis);
      Result End_get_future_result(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Fetch asynchronous results
      /// @param ff - Future object which has the asynchronous results
      /// @return - result from async scanner/mutator
      /// </summary>
      /// <param name="ff"></param>
      /// <param name="timeout_millis"></param>
      ResultAsArrays future_get_result_as_arrays(long ff, int timeout_millis);
      #if SILVERLIGHT
      IAsyncResult Begin_future_get_result_as_arrays(AsyncCallback callback, object state, long ff, int timeout_millis);
      ResultAsArrays End_future_get_result_as_arrays(IAsyncResult asyncResult);
      #endif
      ResultAsArrays get_future_result_as_arrays(long ff, int timeout_millis);
      #if SILVERLIGHT
      IAsyncResult Begin_get_future_result_as_arrays(AsyncCallback callback, object state, long ff, int timeout_millis);
      ResultAsArrays End_get_future_result_as_arrays(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Fetch asynchronous results
      /// @param ff - Future object which has the asynchronous results
      /// @return - result from async scanner/mutator
      /// </summary>
      /// <param name="ff"></param>
      /// <param name="timeout_millis"></param>
      ResultSerialized future_get_result_serialized(long ff, int timeout_millis);
      #if SILVERLIGHT
      IAsyncResult Begin_future_get_result_serialized(AsyncCallback callback, object state, long ff, int timeout_millis);
      ResultSerialized End_future_get_result_serialized(IAsyncResult asyncResult);
      #endif
      ResultSerialized get_future_result_serialized(long ff, int timeout_millis);
      #if SILVERLIGHT
      IAsyncResult Begin_get_future_result_serialized(AsyncCallback callback, object state, long ff, int timeout_millis);
      ResultSerialized End_get_future_result_serialized(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Check if future object's queue is empty
      /// </summary>
      /// <param name="ff"></param>
      bool future_is_empty(long ff);
      #if SILVERLIGHT
      IAsyncResult Begin_future_is_empty(AsyncCallback callback, object state, long ff);
      bool End_future_is_empty(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Check if future object's queue is full
      /// </summary>
      /// <param name="ff"></param>
      bool future_is_full(long ff);
      #if SILVERLIGHT
      IAsyncResult Begin_future_is_full(AsyncCallback callback, object state, long ff);
      bool End_future_is_full(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Check if future object has been cancelled
      /// </summary>
      /// <param name="ff"></param>
      bool future_is_cancelled(long ff);
      #if SILVERLIGHT
      IAsyncResult Begin_future_is_cancelled(AsyncCallback callback, object state, long ff);
      bool End_future_is_cancelled(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Check if future object has outstanding operations
      /// </summary>
      /// <param name="ff"></param>
      bool future_has_outstanding(long ff);
      #if SILVERLIGHT
      IAsyncResult Begin_future_has_outstanding(AsyncCallback callback, object state, long ff);
      bool End_future_has_outstanding(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Close a future object
      /// @param ff - the future object to be closed
      /// </summary>
      /// <param name="ff"></param>
      void future_close(long ff);
      #if SILVERLIGHT
      IAsyncResult Begin_future_close(AsyncCallback callback, object state, long ff);
      void End_future_close(IAsyncResult asyncResult);
      #endif
      void close_future(long ff);
      #if SILVERLIGHT
      IAsyncResult Begin_close_future(AsyncCallback callback, object state, long ff);
      void End_close_future(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Open a table scanner
      /// @param ns - namespace id
      /// @param table_name - table name
      /// @param scan_spec - scan specification
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      /// <param name="scan_spec"></param>
      long scanner_open(long ns, string table_name, ScanSpec scan_spec);
      #if SILVERLIGHT
      IAsyncResult Begin_scanner_open(AsyncCallback callback, object state, long ns, string table_name, ScanSpec scan_spec);
      long End_scanner_open(IAsyncResult asyncResult);
      #endif
      long open_scanner(long ns, string table_name, ScanSpec scan_spec);
      #if SILVERLIGHT
      IAsyncResult Begin_open_scanner(AsyncCallback callback, object state, long ns, string table_name, ScanSpec scan_spec);
      long End_open_scanner(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Open an asynchronous table scanner
      /// @param ns - namespace id
      /// @param table_name - table name
      /// @param future - callback object
      /// @param scan_spec - scan specification
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      /// <param name="future"></param>
      /// <param name="scan_spec"></param>
      long async_scanner_open(long ns, string table_name, long future, ScanSpec scan_spec);
      #if SILVERLIGHT
      IAsyncResult Begin_async_scanner_open(AsyncCallback callback, object state, long ns, string table_name, long future, ScanSpec scan_spec);
      long End_async_scanner_open(IAsyncResult asyncResult);
      #endif
      long open_scanner_async(long ns, string table_name, long future, ScanSpec scan_spec);
      #if SILVERLIGHT
      IAsyncResult Begin_open_scanner_async(AsyncCallback callback, object state, long ns, string table_name, long future, ScanSpec scan_spec);
      long End_open_scanner_async(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Close a table scanner
      /// 
      /// @param scanner - scanner id to close
      /// </summary>
      /// <param name="scanner"></param>
      void scanner_close(long scanner);
      #if SILVERLIGHT
      IAsyncResult Begin_scanner_close(AsyncCallback callback, object state, long scanner);
      void End_scanner_close(IAsyncResult asyncResult);
      #endif
      void close_scanner(long scanner);
      #if SILVERLIGHT
      IAsyncResult Begin_close_scanner(AsyncCallback callback, object state, long scanner);
      void End_close_scanner(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Cancel a table scanner
      /// 
      /// @param scanner - scanner id to close
      /// </summary>
      /// <param name="scanner"></param>
      void async_scanner_cancel(long scanner);
      #if SILVERLIGHT
      IAsyncResult Begin_async_scanner_cancel(AsyncCallback callback, object state, long scanner);
      void End_async_scanner_cancel(IAsyncResult asyncResult);
      #endif
      void cancel_scanner_async(long scanner);
      #if SILVERLIGHT
      IAsyncResult Begin_cancel_scanner_async(AsyncCallback callback, object state, long scanner);
      void End_cancel_scanner_async(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Close a table scanner
      /// 
      /// @param scanner - scanner id to close
      /// </summary>
      /// <param name="scanner"></param>
      void async_scanner_close(long scanner);
      #if SILVERLIGHT
      IAsyncResult Begin_async_scanner_close(AsyncCallback callback, object state, long scanner);
      void End_async_scanner_close(IAsyncResult asyncResult);
      #endif
      void close_scanner_async(long scanner);
      #if SILVERLIGHT
      IAsyncResult Begin_close_scanner_async(AsyncCallback callback, object state, long scanner);
      void End_close_scanner_async(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Iterate over cells of a scanner
      /// 
      /// @param scanner - scanner id
      /// </summary>
      /// <param name="scanner"></param>
      List<Cell> scanner_get_cells(long scanner);
      #if SILVERLIGHT
      IAsyncResult Begin_scanner_get_cells(AsyncCallback callback, object state, long scanner);
      List<Cell> End_scanner_get_cells(IAsyncResult asyncResult);
      #endif
      List<Cell> next_cells(long scanner);
      #if SILVERLIGHT
      IAsyncResult Begin_next_cells(AsyncCallback callback, object state, long scanner);
      List<Cell> End_next_cells(IAsyncResult asyncResult);
      #endif
      List<List<string>> scanner_get_cells_as_arrays(long scanner);
      #if SILVERLIGHT
      IAsyncResult Begin_scanner_get_cells_as_arrays(AsyncCallback callback, object state, long scanner);
      List<List<string>> End_scanner_get_cells_as_arrays(IAsyncResult asyncResult);
      #endif
      List<List<string>> next_cells_as_arrays(long scanner);
      #if SILVERLIGHT
      IAsyncResult Begin_next_cells_as_arrays(AsyncCallback callback, object state, long scanner);
      List<List<string>> End_next_cells_as_arrays(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Alternative interface returning buffer of serialized cells
      /// </summary>
      /// <param name="scanner"></param>
      byte[] scanner_get_cells_serialized(long scanner);
      #if SILVERLIGHT
      IAsyncResult Begin_scanner_get_cells_serialized(AsyncCallback callback, object state, long scanner);
      byte[] End_scanner_get_cells_serialized(IAsyncResult asyncResult);
      #endif
      byte[] next_cells_serialized(long scanner);
      #if SILVERLIGHT
      IAsyncResult Begin_next_cells_serialized(AsyncCallback callback, object state, long scanner);
      byte[] End_next_cells_serialized(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Iterate over rows of a scanner
      /// 
      /// @param scanner - scanner id
      /// </summary>
      /// <param name="scanner"></param>
      List<Cell> scanner_get_row(long scanner);
      #if SILVERLIGHT
      IAsyncResult Begin_scanner_get_row(AsyncCallback callback, object state, long scanner);
      List<Cell> End_scanner_get_row(IAsyncResult asyncResult);
      #endif
      List<Cell> next_row(long scanner);
      #if SILVERLIGHT
      IAsyncResult Begin_next_row(AsyncCallback callback, object state, long scanner);
      List<Cell> End_next_row(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Alternative interface using array as cell
      /// </summary>
      /// <param name="scanner"></param>
      List<List<string>> scanner_get_row_as_arrays(long scanner);
      #if SILVERLIGHT
      IAsyncResult Begin_scanner_get_row_as_arrays(AsyncCallback callback, object state, long scanner);
      List<List<string>> End_scanner_get_row_as_arrays(IAsyncResult asyncResult);
      #endif
      List<List<string>> next_row_as_arrays(long scanner);
      #if SILVERLIGHT
      IAsyncResult Begin_next_row_as_arrays(AsyncCallback callback, object state, long scanner);
      List<List<string>> End_next_row_as_arrays(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Alternate interface returning a buffer of serialized cells for iterating by row
      /// for a given scanner
      /// 
      /// @param scanner - scanner id
      /// </summary>
      /// <param name="scanner"></param>
      byte[] scanner_get_row_serialized(long scanner);
      #if SILVERLIGHT
      IAsyncResult Begin_scanner_get_row_serialized(AsyncCallback callback, object state, long scanner);
      byte[] End_scanner_get_row_serialized(IAsyncResult asyncResult);
      #endif
      byte[] next_row_serialized(long scanner);
      #if SILVERLIGHT
      IAsyncResult Begin_next_row_serialized(AsyncCallback callback, object state, long scanner);
      byte[] End_next_row_serialized(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Get a row (convenience method for random access a row)
      /// 
      /// @param ns - namespace id
      /// 
      /// @param table_name - table name
      /// 
      /// @param row - row key
      /// 
      /// @return a list of cells (with row_keys unset)
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      /// <param name="row"></param>
      List<Cell> get_row(long ns, string table_name, string row);
      #if SILVERLIGHT
      IAsyncResult Begin_get_row(AsyncCallback callback, object state, long ns, string table_name, string row);
      List<Cell> End_get_row(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Alternative interface using array as cell
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="name"></param>
      /// <param name="row"></param>
      List<List<string>> get_row_as_arrays(long ns, string name, string row);
      #if SILVERLIGHT
      IAsyncResult Begin_get_row_as_arrays(AsyncCallback callback, object state, long ns, string name, string row);
      List<List<string>> End_get_row_as_arrays(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Alternative interface returning buffer of serialized cells
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      /// <param name="row"></param>
      byte[] get_row_serialized(long ns, string table_name, string row);
      #if SILVERLIGHT
      IAsyncResult Begin_get_row_serialized(AsyncCallback callback, object state, long ns, string table_name, string row);
      byte[] End_get_row_serialized(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Get a cell (convenience method for random access a cell)
      /// 
      /// @param ns - namespace id
      /// 
      /// @param table_name - table name
      /// 
      /// @param row - row key
      /// 
      /// @param column - column name
      /// 
      /// @return value (byte sequence)
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      /// <param name="row"></param>
      /// <param name="column"></param>
      byte[] get_cell(long ns, string table_name, string row, string column);
      #if SILVERLIGHT
      IAsyncResult Begin_get_cell(AsyncCallback callback, object state, long ns, string table_name, string row, string column);
      byte[] End_get_cell(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Get cells (convenience method for access small amount of cells)
      /// 
      /// @param ns - namespace id
      ///  
      /// @param table_name - table name
      /// 
      /// @param scan_spec - scan specification
      /// 
      /// @return a list of cells (a cell with no row key set is assumed to have
      ///         the same row key as the previous cell)
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      /// <param name="scan_spec"></param>
      List<Cell> get_cells(long ns, string table_name, ScanSpec scan_spec);
      #if SILVERLIGHT
      IAsyncResult Begin_get_cells(AsyncCallback callback, object state, long ns, string table_name, ScanSpec scan_spec);
      List<Cell> End_get_cells(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Alternative interface using array as cell
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="name"></param>
      /// <param name="scan_spec"></param>
      List<List<string>> get_cells_as_arrays(long ns, string name, ScanSpec scan_spec);
      #if SILVERLIGHT
      IAsyncResult Begin_get_cells_as_arrays(AsyncCallback callback, object state, long ns, string name, ScanSpec scan_spec);
      List<List<string>> End_get_cells_as_arrays(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Alternative interface returning buffer of serialized cells
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="name"></param>
      /// <param name="scan_spec"></param>
      byte[] get_cells_serialized(long ns, string name, ScanSpec scan_spec);
      #if SILVERLIGHT
      IAsyncResult Begin_get_cells_serialized(AsyncCallback callback, object state, long ns, string name, ScanSpec scan_spec);
      byte[] End_get_cells_serialized(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Create a shared mutator with specified MutateSpec.
      /// Delete and recreate it if the mutator exists.
      /// 
      /// @param ns - namespace id
      ///  
      /// @param table_name - table name
      /// 
      /// @param mutate_spec - mutator specification
      /// 
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      /// <param name="mutate_spec"></param>
      void shared_mutator_refresh(long ns, string table_name, MutateSpec mutate_spec);
      #if SILVERLIGHT
      IAsyncResult Begin_shared_mutator_refresh(AsyncCallback callback, object state, long ns, string table_name, MutateSpec mutate_spec);
      void End_shared_mutator_refresh(IAsyncResult asyncResult);
      #endif
      void refresh_shared_mutator(long ns, string table_name, MutateSpec mutate_spec);
      #if SILVERLIGHT
      IAsyncResult Begin_refresh_shared_mutator(AsyncCallback callback, object state, long ns, string table_name, MutateSpec mutate_spec);
      void End_refresh_shared_mutator(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Open a shared periodic mutator which causes cells to be written asyncronously.
      /// Users beware: calling this method merely writes
      /// cells to a local buffer and does not guarantee that the cells have been persisted.
      /// If you want guaranteed durability, use the open_mutator+set_cells* interface instead.
      /// 
      /// @param ns - namespace id
      /// 
      /// @param table_name - table name
      /// 
      /// @param mutate_spec - mutator specification
      /// 
      /// @param cells - set of cells to be written
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      /// <param name="mutate_spec"></param>
      /// <param name="cells"></param>
      void shared_mutator_set_cells(long ns, string table_name, MutateSpec mutate_spec, List<Cell> cells);
      #if SILVERLIGHT
      IAsyncResult Begin_shared_mutator_set_cells(AsyncCallback callback, object state, long ns, string table_name, MutateSpec mutate_spec, List<Cell> cells);
      void End_shared_mutator_set_cells(IAsyncResult asyncResult);
      #endif
      void offer_cells(long ns, string table_name, MutateSpec mutate_spec, List<Cell> cells);
      #if SILVERLIGHT
      IAsyncResult Begin_offer_cells(AsyncCallback callback, object state, long ns, string table_name, MutateSpec mutate_spec, List<Cell> cells);
      void End_offer_cells(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Alternative to offer_cell interface using array as cell
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      /// <param name="mutate_spec"></param>
      /// <param name="cells"></param>
      void shared_mutator_set_cells_as_arrays(long ns, string table_name, MutateSpec mutate_spec, List<List<string>> cells);
      #if SILVERLIGHT
      IAsyncResult Begin_shared_mutator_set_cells_as_arrays(AsyncCallback callback, object state, long ns, string table_name, MutateSpec mutate_spec, List<List<string>> cells);
      void End_shared_mutator_set_cells_as_arrays(IAsyncResult asyncResult);
      #endif
      void offer_cells_as_arrays(long ns, string table_name, MutateSpec mutate_spec, List<List<string>> cells);
      #if SILVERLIGHT
      IAsyncResult Begin_offer_cells_as_arrays(AsyncCallback callback, object state, long ns, string table_name, MutateSpec mutate_spec, List<List<string>> cells);
      void End_offer_cells_as_arrays(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Open a shared periodic mutator which causes cells to be written asyncronously.
      /// Users beware: calling this method merely writes
      /// cells to a local buffer and does not guarantee that the cells have been persisted.
      /// If you want guaranteed durability, use the open_mutator+set_cells* interface instead.
      /// 
      /// @param ns - namespace id
      /// 
      /// @param table_name - table name
      /// 
      /// @param mutate_spec - mutator specification
      /// 
      /// @param cell - cell to be written
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      /// <param name="mutate_spec"></param>
      /// <param name="cell"></param>
      void shared_mutator_set_cell(long ns, string table_name, MutateSpec mutate_spec, Cell cell);
      #if SILVERLIGHT
      IAsyncResult Begin_shared_mutator_set_cell(AsyncCallback callback, object state, long ns, string table_name, MutateSpec mutate_spec, Cell cell);
      void End_shared_mutator_set_cell(IAsyncResult asyncResult);
      #endif
      void offer_cell(long ns, string table_name, MutateSpec mutate_spec, Cell cell);
      #if SILVERLIGHT
      IAsyncResult Begin_offer_cell(AsyncCallback callback, object state, long ns, string table_name, MutateSpec mutate_spec, Cell cell);
      void End_offer_cell(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Alternative to offer_cell interface using array as cell
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      /// <param name="mutate_spec"></param>
      /// <param name="cell"></param>
      void shared_mutator_set_cell_as_array(long ns, string table_name, MutateSpec mutate_spec, List<string> cell);
      #if SILVERLIGHT
      IAsyncResult Begin_shared_mutator_set_cell_as_array(AsyncCallback callback, object state, long ns, string table_name, MutateSpec mutate_spec, List<string> cell);
      void End_shared_mutator_set_cell_as_array(IAsyncResult asyncResult);
      #endif
      void offer_cell_as_array(long ns, string table_name, MutateSpec mutate_spec, List<string> cell);
      #if SILVERLIGHT
      IAsyncResult Begin_offer_cell_as_array(AsyncCallback callback, object state, long ns, string table_name, MutateSpec mutate_spec, List<string> cell);
      void End_offer_cell_as_array(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Open a table mutator
      /// 
      /// @param ns - namespace id
      /// 
      /// @param table_name - table name
      /// 
      /// @param flags - mutator flags
      /// 
      /// @param flush_interval - auto-flush interval in milliseconds; 0 disables it.
      /// 
      /// @return mutator id
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      /// <param name="flags"></param>
      /// <param name="flush_interval"></param>
      long mutator_open(long ns, string table_name, int flags, int flush_interval);
      #if SILVERLIGHT
      IAsyncResult Begin_mutator_open(AsyncCallback callback, object state, long ns, string table_name, int flags, int flush_interval);
      long End_mutator_open(IAsyncResult asyncResult);
      #endif
      long open_mutator(long ns, string table_name, int flags, int flush_interval);
      #if SILVERLIGHT
      IAsyncResult Begin_open_mutator(AsyncCallback callback, object state, long ns, string table_name, int flags, int flush_interval);
      long End_open_mutator(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Open an asynchronous table mutator
      /// 
      /// @param ns - namespace id
      /// @param table_name - table name
      /// @param future - callback object
      /// @param flags - mutator flags
      /// 
      /// @return mutator id
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      /// <param name="future"></param>
      /// <param name="flags"></param>
      long async_mutator_open(long ns, string table_name, long future, int flags);
      #if SILVERLIGHT
      IAsyncResult Begin_async_mutator_open(AsyncCallback callback, object state, long ns, string table_name, long future, int flags);
      long End_async_mutator_open(IAsyncResult asyncResult);
      #endif
      long open_mutator_async(long ns, string table_name, long future, int flags);
      #if SILVERLIGHT
      IAsyncResult Begin_open_mutator_async(AsyncCallback callback, object state, long ns, string table_name, long future, int flags);
      long End_open_mutator_async(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Close a table mutator
      /// 
      /// @param mutator - mutator id to close
      /// </summary>
      /// <param name="mutator"></param>
      void mutator_close(long mutator);
      #if SILVERLIGHT
      IAsyncResult Begin_mutator_close(AsyncCallback callback, object state, long mutator);
      void End_mutator_close(IAsyncResult asyncResult);
      #endif
      void close_mutator(long mutator);
      #if SILVERLIGHT
      IAsyncResult Begin_close_mutator(AsyncCallback callback, object state, long mutator);
      void End_close_mutator(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Cancel an asynchronous table mutator
      /// 
      /// @param mutator -  mutator id to cancel
      /// </summary>
      /// <param name="mutator"></param>
      void async_mutator_cancel(long mutator);
      #if SILVERLIGHT
      IAsyncResult Begin_async_mutator_cancel(AsyncCallback callback, object state, long mutator);
      void End_async_mutator_cancel(IAsyncResult asyncResult);
      #endif
      void cancel_mutator_async(long mutator);
      #if SILVERLIGHT
      IAsyncResult Begin_cancel_mutator_async(AsyncCallback callback, object state, long mutator);
      void End_cancel_mutator_async(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Close an asynchronous table mutator
      /// 
      /// @param mutator - mutator id to close
      /// </summary>
      /// <param name="mutator"></param>
      void async_mutator_close(long mutator);
      #if SILVERLIGHT
      IAsyncResult Begin_async_mutator_close(AsyncCallback callback, object state, long mutator);
      void End_async_mutator_close(IAsyncResult asyncResult);
      #endif
      void close_mutator_async(long mutator);
      #if SILVERLIGHT
      IAsyncResult Begin_close_mutator_async(AsyncCallback callback, object state, long mutator);
      void End_close_mutator_async(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Set a cell via mutator
      /// 
      /// @param mutator - mutator id
      /// 
      /// @param cell - the cell to set
      /// </summary>
      /// <param name="mutator"></param>
      /// <param name="cell"></param>
      void mutator_set_cell(long mutator, Cell cell);
      #if SILVERLIGHT
      IAsyncResult Begin_mutator_set_cell(AsyncCallback callback, object state, long mutator, Cell cell);
      void End_mutator_set_cell(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Set a cell in the table
      /// 
      /// @param ns - namespace id
      /// 
      /// @param table_name - table name
      /// 
      /// @param cell - the cell to set
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      /// <param name="cell"></param>
      void set_cell(long ns, string table_name, Cell cell);
      #if SILVERLIGHT
      IAsyncResult Begin_set_cell(AsyncCallback callback, object state, long ns, string table_name, Cell cell);
      void End_set_cell(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Alternative interface using array as cell
      /// </summary>
      /// <param name="mutator"></param>
      /// <param name="cell"></param>
      void mutator_set_cell_as_array(long mutator, List<string> cell);
      #if SILVERLIGHT
      IAsyncResult Begin_mutator_set_cell_as_array(AsyncCallback callback, object state, long mutator, List<string> cell);
      void End_mutator_set_cell_as_array(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Alternative interface using array as cell
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      /// <param name="cell"></param>
      void set_cell_as_array(long ns, string table_name, List<string> cell);
      #if SILVERLIGHT
      IAsyncResult Begin_set_cell_as_array(AsyncCallback callback, object state, long ns, string table_name, List<string> cell);
      void End_set_cell_as_array(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Put a list of cells into a table via mutator
      /// 
      /// @param mutator - mutator id
      /// 
      /// @param cells - a list of cells (a cell with no row key set is assumed
      ///        to have the same row key as the previous cell)
      /// </summary>
      /// <param name="mutator"></param>
      /// <param name="cells"></param>
      void mutator_set_cells(long mutator, List<Cell> cells);
      #if SILVERLIGHT
      IAsyncResult Begin_mutator_set_cells(AsyncCallback callback, object state, long mutator, List<Cell> cells);
      void End_mutator_set_cells(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Put a list of cells into a table
      /// 
      /// @param ns - namespace id
      /// 
      /// @param table_name - table name
      /// 
      /// @param cells - a list of cells (a cell with no row key set is assumed
      ///        to have the same row key as the previous cell)
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      /// <param name="cells"></param>
      void set_cells(long ns, string table_name, List<Cell> cells);
      #if SILVERLIGHT
      IAsyncResult Begin_set_cells(AsyncCallback callback, object state, long ns, string table_name, List<Cell> cells);
      void End_set_cells(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Alternative interface using array as cell
      /// </summary>
      /// <param name="mutator"></param>
      /// <param name="cells"></param>
      void mutator_set_cells_as_arrays(long mutator, List<List<string>> cells);
      #if SILVERLIGHT
      IAsyncResult Begin_mutator_set_cells_as_arrays(AsyncCallback callback, object state, long mutator, List<List<string>> cells);
      void End_mutator_set_cells_as_arrays(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Alternative interface using array as cell
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      /// <param name="cells"></param>
      void set_cells_as_arrays(long ns, string table_name, List<List<string>> cells);
      #if SILVERLIGHT
      IAsyncResult Begin_set_cells_as_arrays(AsyncCallback callback, object state, long ns, string table_name, List<List<string>> cells);
      void End_set_cells_as_arrays(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Alternative interface using buffer of serialized cells
      /// </summary>
      /// <param name="mutator"></param>
      /// <param name="cells"></param>
      /// <param name="flush"></param>
      void mutator_set_cells_serialized(long mutator, byte[] cells, bool flush);
      #if SILVERLIGHT
      IAsyncResult Begin_mutator_set_cells_serialized(AsyncCallback callback, object state, long mutator, byte[] cells, bool flush);
      void End_mutator_set_cells_serialized(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Alternative interface using buffer of serialized cells
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      /// <param name="cells"></param>
      void set_cells_serialized(long ns, string table_name, byte[] cells);
      #if SILVERLIGHT
      IAsyncResult Begin_set_cells_serialized(AsyncCallback callback, object state, long ns, string table_name, byte[] cells);
      void End_set_cells_serialized(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Flush mutator buffers
      /// </summary>
      /// <param name="mutator"></param>
      void mutator_flush(long mutator);
      #if SILVERLIGHT
      IAsyncResult Begin_mutator_flush(AsyncCallback callback, object state, long mutator);
      void End_mutator_flush(IAsyncResult asyncResult);
      #endif
      void flush_mutator(long mutator);
      #if SILVERLIGHT
      IAsyncResult Begin_flush_mutator(AsyncCallback callback, object state, long mutator);
      void End_flush_mutator(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Set a cell in the table using an asynchonous mutator
      /// 
      /// @param mutator - mutator id
      /// 
      /// @param cell - the cell to set
      /// </summary>
      /// <param name="mutator"></param>
      /// <param name="cell"></param>
      void async_mutator_set_cell(long mutator, Cell cell);
      #if SILVERLIGHT
      IAsyncResult Begin_async_mutator_set_cell(AsyncCallback callback, object state, long mutator, Cell cell);
      void End_async_mutator_set_cell(IAsyncResult asyncResult);
      #endif
      void set_cell_async(long mutator, Cell cell);
      #if SILVERLIGHT
      IAsyncResult Begin_set_cell_async(AsyncCallback callback, object state, long mutator, Cell cell);
      void End_set_cell_async(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Alternative interface using array as cell using an asynchonous mutator
      /// </summary>
      /// <param name="mutator"></param>
      /// <param name="cell"></param>
      void async_mutator_set_cell_as_array(long mutator, List<string> cell);
      #if SILVERLIGHT
      IAsyncResult Begin_async_mutator_set_cell_as_array(AsyncCallback callback, object state, long mutator, List<string> cell);
      void End_async_mutator_set_cell_as_array(IAsyncResult asyncResult);
      #endif
      void set_cell_as_array_async(long mutator, List<string> cell);
      #if SILVERLIGHT
      IAsyncResult Begin_set_cell_as_array_async(AsyncCallback callback, object state, long mutator, List<string> cell);
      void End_set_cell_as_array_async(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Put a list of cells into a table using asynchonous mutator
      /// 
      /// @param mutator - mutator id
      /// 
      /// @param cells - a list of cells (a cell with no row key set is assumed
      ///        to have the same row key as the previous cell)
      /// </summary>
      /// <param name="mutator"></param>
      /// <param name="cells"></param>
      void async_mutator_set_cells(long mutator, List<Cell> cells);
      #if SILVERLIGHT
      IAsyncResult Begin_async_mutator_set_cells(AsyncCallback callback, object state, long mutator, List<Cell> cells);
      void End_async_mutator_set_cells(IAsyncResult asyncResult);
      #endif
      void set_cells_async(long mutator, List<Cell> cells);
      #if SILVERLIGHT
      IAsyncResult Begin_set_cells_async(AsyncCallback callback, object state, long mutator, List<Cell> cells);
      void End_set_cells_async(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Alternative interface using array as cell
      /// </summary>
      /// <param name="mutator"></param>
      /// <param name="cells"></param>
      void async_mutator_set_cells_as_arrays(long mutator, List<List<string>> cells);
      #if SILVERLIGHT
      IAsyncResult Begin_async_mutator_set_cells_as_arrays(AsyncCallback callback, object state, long mutator, List<List<string>> cells);
      void End_async_mutator_set_cells_as_arrays(IAsyncResult asyncResult);
      #endif
      void set_cells_as_arrays_async(long mutator, List<List<string>> cells);
      #if SILVERLIGHT
      IAsyncResult Begin_set_cells_as_arrays_async(AsyncCallback callback, object state, long mutator, List<List<string>> cells);
      void End_set_cells_as_arrays_async(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Alternative interface using buffer of serialized cells
      /// </summary>
      /// <param name="mutator"></param>
      /// <param name="cells"></param>
      /// <param name="flush"></param>
      void async_mutator_set_cells_serialized(long mutator, byte[] cells, bool flush);
      #if SILVERLIGHT
      IAsyncResult Begin_async_mutator_set_cells_serialized(AsyncCallback callback, object state, long mutator, byte[] cells, bool flush);
      void End_async_mutator_set_cells_serialized(IAsyncResult asyncResult);
      #endif
      void set_cells_serialized_async(long mutator, byte[] cells, bool flush);
      #if SILVERLIGHT
      IAsyncResult Begin_set_cells_serialized_async(AsyncCallback callback, object state, long mutator, byte[] cells, bool flush);
      void End_set_cells_serialized_async(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Flush mutator buffers
      /// </summary>
      /// <param name="mutator"></param>
      void async_mutator_flush(long mutator);
      #if SILVERLIGHT
      IAsyncResult Begin_async_mutator_flush(AsyncCallback callback, object state, long mutator);
      void End_async_mutator_flush(IAsyncResult asyncResult);
      #endif
      void flush_mutator_async(long mutator);
      #if SILVERLIGHT
      IAsyncResult Begin_flush_mutator_async(AsyncCallback callback, object state, long mutator);
      void End_flush_mutator_async(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Check if the namespace exists
      /// 
      /// @param ns - namespace name
      /// 
      /// @return true if ns exists, false ow
      /// </summary>
      /// <param name="ns"></param>
      bool namespace_exists(string ns);
      #if SILVERLIGHT
      IAsyncResult Begin_namespace_exists(AsyncCallback callback, object state, string ns);
      bool End_namespace_exists(IAsyncResult asyncResult);
      #endif
      bool exists_namespace(string ns);
      #if SILVERLIGHT
      IAsyncResult Begin_exists_namespace(AsyncCallback callback, object state, string ns);
      bool End_exists_namespace(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Check if the table exists
      /// 
      /// @param ns - namespace id
      /// 
      /// @param name - table name
      /// 
      /// @return true if table exists, false ow
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="name"></param>
      bool exists_table(long ns, string name);
      #if SILVERLIGHT
      IAsyncResult Begin_exists_table(AsyncCallback callback, object state, long ns, string name);
      bool End_exists_table(IAsyncResult asyncResult);
      #endif
      bool table_exists(long ns, string name);
      #if SILVERLIGHT
      IAsyncResult Begin_table_exists(AsyncCallback callback, object state, long ns, string name);
      bool End_table_exists(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Get the id of a table
      /// 
      /// @param ns - namespace id
      /// 
      /// @param table_name - table name
      /// 
      /// @return table id string
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      string table_get_id(long ns, string table_name);
      #if SILVERLIGHT
      IAsyncResult Begin_table_get_id(AsyncCallback callback, object state, long ns, string table_name);
      string End_table_get_id(IAsyncResult asyncResult);
      #endif
      string get_table_id(long ns, string table_name);
      #if SILVERLIGHT
      IAsyncResult Begin_get_table_id(AsyncCallback callback, object state, long ns, string table_name);
      string End_get_table_id(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Get the schema of a table as a string (that can be used with create_table)
      /// 
      /// @param ns - namespace id
      /// 
      /// @param table_name - table name
      /// 
      /// @return schema string (in xml)
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      string table_get_schema_str(long ns, string table_name);
      #if SILVERLIGHT
      IAsyncResult Begin_table_get_schema_str(AsyncCallback callback, object state, long ns, string table_name);
      string End_table_get_schema_str(IAsyncResult asyncResult);
      #endif
      string get_schema_str(long ns, string table_name);
      #if SILVERLIGHT
      IAsyncResult Begin_get_schema_str(AsyncCallback callback, object state, long ns, string table_name);
      string End_get_schema_str(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Get the schema of a table as a string along with column family ids
      /// 
      /// @param ns - namespace id
      /// 
      /// @param table_name - table name
      /// 
      /// @return schema string (in xml)
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      string table_get_schema_str_with_ids(long ns, string table_name);
      #if SILVERLIGHT
      IAsyncResult Begin_table_get_schema_str_with_ids(AsyncCallback callback, object state, long ns, string table_name);
      string End_table_get_schema_str_with_ids(IAsyncResult asyncResult);
      #endif
      string get_schema_str_with_ids(long ns, string table_name);
      #if SILVERLIGHT
      IAsyncResult Begin_get_schema_str_with_ids(AsyncCallback callback, object state, long ns, string table_name);
      string End_get_schema_str_with_ids(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Get the schema of a table as a string (that can be used with create_table)
      ///   
      /// @param ns - namespace id
      /// 
      /// @param table_name - table name
      /// 
      /// @return schema object describing a table
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      Schema table_get_schema(long ns, string table_name);
      #if SILVERLIGHT
      IAsyncResult Begin_table_get_schema(AsyncCallback callback, object state, long ns, string table_name);
      Schema End_table_get_schema(IAsyncResult asyncResult);
      #endif
      Schema get_schema(long ns, string table_name);
      #if SILVERLIGHT
      IAsyncResult Begin_get_schema(AsyncCallback callback, object state, long ns, string table_name);
      Schema End_get_schema(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Get a list of table names in the namespace
      /// 
      /// @param ns - namespace id
      /// 
      /// @return a list of table names
      /// </summary>
      /// <param name="ns"></param>
      List<string> get_tables(long ns);
      #if SILVERLIGHT
      IAsyncResult Begin_get_tables(AsyncCallback callback, object state, long ns);
      List<string> End_get_tables(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Get a list of namespaces and table names table names in the namespace
      /// 
      /// @param ns - namespace
      /// 
      /// @return a list of table names
      /// </summary>
      /// <param name="ns"></param>
      List<NamespaceListing> namespace_get_listing(long ns);
      #if SILVERLIGHT
      IAsyncResult Begin_namespace_get_listing(AsyncCallback callback, object state, long ns);
      List<NamespaceListing> End_namespace_get_listing(IAsyncResult asyncResult);
      #endif
      List<NamespaceListing> get_listing(long ns);
      #if SILVERLIGHT
      IAsyncResult Begin_get_listing(AsyncCallback callback, object state, long ns);
      List<NamespaceListing> End_get_listing(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Get a list of table splits
      /// 
      /// @param ns - namespace id
      /// 
      /// @param table_name - table name
      /// 
      /// @return a list of table names
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      List<TableSplit> table_get_splits(long ns, string table_name);
      #if SILVERLIGHT
      IAsyncResult Begin_table_get_splits(AsyncCallback callback, object state, long ns, string table_name);
      List<TableSplit> End_table_get_splits(IAsyncResult asyncResult);
      #endif
      List<TableSplit> get_table_splits(long ns, string table_name);
      #if SILVERLIGHT
      IAsyncResult Begin_get_table_splits(AsyncCallback callback, object state, long ns, string table_name);
      List<TableSplit> End_get_table_splits(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Drop a namespace
      /// 
      /// @param ns - namespace name
      /// 
      /// @param if_exists - if true, don't barf if the table doesn't exist
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="if_exists"></param>
      void namespace_drop(string ns, bool if_exists);
      #if SILVERLIGHT
      IAsyncResult Begin_namespace_drop(AsyncCallback callback, object state, string ns, bool if_exists);
      void End_namespace_drop(IAsyncResult asyncResult);
      #endif
      void drop_namespace(string ns, bool if_exists);
      #if SILVERLIGHT
      IAsyncResult Begin_drop_namespace(AsyncCallback callback, object state, string ns, bool if_exists);
      void End_drop_namespace(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Rename a table
      /// 
      /// @param ns - namespace id
      /// 
      /// @param name - current table name
      /// 
      /// @param new_name - new table name
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="name"></param>
      /// <param name="new_name"></param>
      void rename_table(long ns, string name, string new_name);
      #if SILVERLIGHT
      IAsyncResult Begin_rename_table(AsyncCallback callback, object state, long ns, string name, string new_name);
      void End_rename_table(IAsyncResult asyncResult);
      #endif
      void table_rename(long ns, string name, string new_name);
      #if SILVERLIGHT
      IAsyncResult Begin_table_rename(AsyncCallback callback, object state, long ns, string name, string new_name);
      void End_table_rename(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Drop a table
      /// 
      /// @param ns - namespace id
      /// 
      /// @param name - table name
      /// 
      /// @param if_exists - if true, don't barf if the table doesn't exist
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="name"></param>
      /// <param name="if_exists"></param>
      void drop_table(long ns, string name, bool if_exists);
      #if SILVERLIGHT
      IAsyncResult Begin_drop_table(AsyncCallback callback, object state, long ns, string name, bool if_exists);
      void End_drop_table(IAsyncResult asyncResult);
      #endif
      void table_drop(long ns, string name, bool if_exists);
      #if SILVERLIGHT
      IAsyncResult Begin_table_drop(AsyncCallback callback, object state, long ns, string name, bool if_exists);
      void End_table_drop(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Generate a GUID
      /// 
      /// GUIDs are globally unique. The generated string is 36 bytes long and
      /// has a format similar to "9cf7da31-307a-4bef-b65e-19fb05aa57d8".
      /// </summary>
      string generate_guid();
      #if SILVERLIGHT
      IAsyncResult Begin_generate_guid(AsyncCallback callback, object state);
      string End_generate_guid(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Inserts a unique value into a table
      /// 
      /// This function inserts a unique value into a table. The table must be
      /// created with TIME_ORDER DESC, MAX_VERSIONS 1 (although the latter is
      /// optional).
      /// 
      /// If the value is empty then a new GUID will be assigned
      /// (using @a generate_guid).
      /// 
      /// @param ns - namespace id
      /// @param table_name - table name
      /// @param key - the Key of the value
      /// @param value - the unique value. Can be empty; in this case a new
      ///    guid will be generated internally
      /// 
      /// @return the inserted unique value (which is identical to the @a value
      ///    parameter or a new guid, if value is empty)
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      /// <param name="key"></param>
      /// <param name="value"></param>
      string create_cell_unique(long ns, string table_name, Key key, string @value);
      #if SILVERLIGHT
      IAsyncResult Begin_create_cell_unique(AsyncCallback callback, object state, long ns, string table_name, Key key, string @value);
      string End_create_cell_unique(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Retrieves a descriptive error string from an error code
      /// 
      /// @param error_code - the numeric error code
      /// 
      /// @return the descriptive string, or "ERROR NOT REGISTERED" if the error
      ///    code is unknown
      /// </summary>
      /// <param name="error_code"></param>
      string error_get_text(int error_code);
      #if SILVERLIGHT
      IAsyncResult Begin_error_get_text(AsyncCallback callback, object state, int error_code);
      string End_error_get_text(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Status check.
      /// @return Status information
      /// </summary>
      Status status();
      #if SILVERLIGHT
      IAsyncResult Begin_status(AsyncCallback callback, object state);
      Status End_status(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Shutdown broker.
      /// </summary>
      void shutdown();
      #if SILVERLIGHT
      IAsyncResult Begin_shutdown(AsyncCallback callback, object state);
      void End_shutdown(IAsyncResult asyncResult);
      #endif
    }

    /// <summary>
    /// The client service mimics the C++ client API, with table, scanner and
    /// mutator interface flattened.
    /// </summary>
    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_namespace_create(AsyncCallback callback, object state, string ns)
      {
        return send_namespace_create(callback, state, ns);
      }

      public void End_namespace_create(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_namespace_create();
      }

      #endif

      /// <summary>
      /// Create a namespace
      /// 
      /// @param ns - namespace name
      /// </summary>
      /// <param name="ns"></param>
      public void namespace_create(string ns)
      {
        #if !SILVERLIGHT
        send_namespace_create(ns);
        recv_namespace_create();

        #else
        var asyncResult = Begin_namespace_create(null, null, ns);
        End_namespace_create(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_namespace_create(AsyncCallback callback, object state, string ns)
      #else
      public void send_namespace_create(string ns)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("namespace_create", TMessageType.Call, seqid_));
        namespace_create_args args = new namespace_create_args();
        args.Ns = ns;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_namespace_create()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        namespace_create_result result = new namespace_create_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_create_namespace(AsyncCallback callback, object state, string ns)
      {
        return send_create_namespace(callback, state, ns);
      }

      public void End_create_namespace(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_create_namespace();
      }

      #endif

      public void create_namespace(string ns)
      {
        #if !SILVERLIGHT
        send_create_namespace(ns);
        recv_create_namespace();

        #else
        var asyncResult = Begin_create_namespace(null, null, ns);
        End_create_namespace(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_create_namespace(AsyncCallback callback, object state, string ns)
      #else
      public void send_create_namespace(string ns)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("create_namespace", TMessageType.Call, seqid_));
        create_namespace_args args = new create_namespace_args();
        args.Ns = ns;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_create_namespace()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        create_namespace_result result = new create_namespace_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_table_create(AsyncCallback callback, object state, long ns, string table_name, Schema schema)
      {
        return send_table_create(callback, state, ns, table_name, schema);
      }

      public void End_table_create(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_table_create();
      }

      #endif

      /// <summary>
      /// Create a table
      /// 
      /// @param ns - namespace id
      /// @param table_name - table name
      /// @param schema - schema of the table
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      /// <param name="schema"></param>
      public void table_create(long ns, string table_name, Schema schema)
      {
        #if !SILVERLIGHT
        send_table_create(ns, table_name, schema);
        recv_table_create();

        #else
        var asyncResult = Begin_table_create(null, null, ns, table_name, schema);
        End_table_create(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_table_create(AsyncCallback callback, object state, long ns, string table_name, Schema schema)
      #else
      public void send_table_create(long ns, string table_name, Schema schema)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("table_create", TMessageType.Call, seqid_));
        table_create_args args = new table_create_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Schema = schema;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_table_create()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        table_create_result result = new table_create_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_table_alter(AsyncCallback callback, object state, long ns, string table_name, Schema schema)
      {
        return send_table_alter(callback, state, ns, table_name, schema);
      }

      public void End_table_alter(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_table_alter();
      }

      #endif

      /// <summary>
      /// Alter a table
      /// 
      /// @param ns - namespace id
      /// @param table_name - table name
      /// @param schema - schema of the table
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      /// <param name="schema"></param>
      public void table_alter(long ns, string table_name, Schema schema)
      {
        #if !SILVERLIGHT
        send_table_alter(ns, table_name, schema);
        recv_table_alter();

        #else
        var asyncResult = Begin_table_alter(null, null, ns, table_name, schema);
        End_table_alter(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_table_alter(AsyncCallback callback, object state, long ns, string table_name, Schema schema)
      #else
      public void send_table_alter(long ns, string table_name, Schema schema)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("table_alter", TMessageType.Call, seqid_));
        table_alter_args args = new table_alter_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Schema = schema;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_table_alter()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        table_alter_result result = new table_alter_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_refresh_table(AsyncCallback callback, object state, long ns, string table_name)
      {
        return send_refresh_table(callback, state, ns, table_name);
      }

      public void End_refresh_table(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_refresh_table();
      }

      #endif

      /// <summary>
      /// Refreshes the cached table information
      /// 
      /// @param ns - namespace
      /// @param table_name - name of the table
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      public void refresh_table(long ns, string table_name)
      {
        #if !SILVERLIGHT
        send_refresh_table(ns, table_name);
        recv_refresh_table();

        #else
        var asyncResult = Begin_refresh_table(null, null, ns, table_name);
        End_refresh_table(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_refresh_table(AsyncCallback callback, object state, long ns, string table_name)
      #else
      public void send_refresh_table(long ns, string table_name)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("refresh_table", TMessageType.Call, seqid_));
        refresh_table_args args = new refresh_table_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_refresh_table()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        refresh_table_result result = new refresh_table_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_namespace_open(AsyncCallback callback, object state, string ns)
      {
        return send_namespace_open(callback, state, ns);
      }

      public long End_namespace_open(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_namespace_open();
      }

      #endif

      /// <summary>
      /// Open a namespace
      /// 
      /// @param ns - namespace
      /// @return value is guaranteed to be non-zero and unique
      /// </summary>
      /// <param name="ns"></param>
      public long namespace_open(string ns)
      {
        #if !SILVERLIGHT
        send_namespace_open(ns);
        return recv_namespace_open();

        #else
        var asyncResult = Begin_namespace_open(null, null, ns);
        return End_namespace_open(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_namespace_open(AsyncCallback callback, object state, string ns)
      #else
      public void send_namespace_open(string ns)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("namespace_open", TMessageType.Call, seqid_));
        namespace_open_args args = new namespace_open_args();
        args.Ns = ns;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public long recv_namespace_open()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        namespace_open_result result = new namespace_open_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "namespace_open failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_open_namespace(AsyncCallback callback, object state, string ns)
      {
        return send_open_namespace(callback, state, ns);
      }

      public long End_open_namespace(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_open_namespace();
      }

      #endif

      public long open_namespace(string ns)
      {
        #if !SILVERLIGHT
        send_open_namespace(ns);
        return recv_open_namespace();

        #else
        var asyncResult = Begin_open_namespace(null, null, ns);
        return End_open_namespace(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_open_namespace(AsyncCallback callback, object state, string ns)
      #else
      public void send_open_namespace(string ns)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("open_namespace", TMessageType.Call, seqid_));
        open_namespace_args args = new open_namespace_args();
        args.Ns = ns;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public long recv_open_namespace()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        open_namespace_result result = new open_namespace_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "open_namespace failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_namespace_close(AsyncCallback callback, object state, long ns)
      {
        return send_namespace_close(callback, state, ns);
      }

      public void End_namespace_close(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_namespace_close();
      }

      #endif

      /// <summary>
      /// Close a namespace
      /// 
      /// @param ns - namespace
      /// </summary>
      /// <param name="ns"></param>
      public void namespace_close(long ns)
      {
        #if !SILVERLIGHT
        send_namespace_close(ns);
        recv_namespace_close();

        #else
        var asyncResult = Begin_namespace_close(null, null, ns);
        End_namespace_close(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_namespace_close(AsyncCallback callback, object state, long ns)
      #else
      public void send_namespace_close(long ns)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("namespace_close", TMessageType.Call, seqid_));
        namespace_close_args args = new namespace_close_args();
        args.Ns = ns;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_namespace_close()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        namespace_close_result result = new namespace_close_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_close_namespace(AsyncCallback callback, object state, long ns)
      {
        return send_close_namespace(callback, state, ns);
      }

      public void End_close_namespace(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_close_namespace();
      }

      #endif

      public void close_namespace(long ns)
      {
        #if !SILVERLIGHT
        send_close_namespace(ns);
        recv_close_namespace();

        #else
        var asyncResult = Begin_close_namespace(null, null, ns);
        End_close_namespace(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_close_namespace(AsyncCallback callback, object state, long ns)
      #else
      public void send_close_namespace(long ns)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("close_namespace", TMessageType.Call, seqid_));
        close_namespace_args args = new close_namespace_args();
        args.Ns = ns;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_close_namespace()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        close_namespace_result result = new close_namespace_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_future_open(AsyncCallback callback, object state, int capacity)
      {
        return send_future_open(callback, state, capacity);
      }

      public long End_future_open(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_future_open();
      }

      #endif

      /// <summary>
      /// Open a future object
      /// @param capacity - Amount of result data the future object can enqueue without blocking threads
      /// </summary>
      /// <param name="capacity"></param>
      public long future_open(int capacity)
      {
        #if !SILVERLIGHT
        send_future_open(capacity);
        return recv_future_open();

        #else
        var asyncResult = Begin_future_open(null, null, capacity);
        return End_future_open(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_future_open(AsyncCallback callback, object state, int capacity)
      #else
      public void send_future_open(int capacity)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("future_open", TMessageType.Call, seqid_));
        future_open_args args = new future_open_args();
        args.Capacity = capacity;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public long recv_future_open()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        future_open_result result = new future_open_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "future_open failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_open_future(AsyncCallback callback, object state, int capacity)
      {
        return send_open_future(callback, state, capacity);
      }

      public long End_open_future(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_open_future();
      }

      #endif

      public long open_future(int capacity)
      {
        #if !SILVERLIGHT
        send_open_future(capacity);
        return recv_open_future();

        #else
        var asyncResult = Begin_open_future(null, null, capacity);
        return End_open_future(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_open_future(AsyncCallback callback, object state, int capacity)
      #else
      public void send_open_future(int capacity)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("open_future", TMessageType.Call, seqid_));
        open_future_args args = new open_future_args();
        args.Capacity = capacity;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public long recv_open_future()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        open_future_result result = new open_future_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "open_future failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_future_cancel(AsyncCallback callback, object state, long ff)
      {
        return send_future_cancel(callback, state, ff);
      }

      public void End_future_cancel(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_future_cancel();
      }

      #endif

      /// <summary>
      /// Cancel tasks outstanding in a future object
      /// @param ff - Future object
      /// </summary>
      /// <param name="ff"></param>
      public void future_cancel(long ff)
      {
        #if !SILVERLIGHT
        send_future_cancel(ff);
        recv_future_cancel();

        #else
        var asyncResult = Begin_future_cancel(null, null, ff);
        End_future_cancel(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_future_cancel(AsyncCallback callback, object state, long ff)
      #else
      public void send_future_cancel(long ff)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("future_cancel", TMessageType.Call, seqid_));
        future_cancel_args args = new future_cancel_args();
        args.Ff = ff;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_future_cancel()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        future_cancel_result result = new future_cancel_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_cancel_future(AsyncCallback callback, object state, long ff)
      {
        return send_cancel_future(callback, state, ff);
      }

      public void End_cancel_future(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_cancel_future();
      }

      #endif

      public void cancel_future(long ff)
      {
        #if !SILVERLIGHT
        send_cancel_future(ff);
        recv_cancel_future();

        #else
        var asyncResult = Begin_cancel_future(null, null, ff);
        End_cancel_future(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_cancel_future(AsyncCallback callback, object state, long ff)
      #else
      public void send_cancel_future(long ff)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("cancel_future", TMessageType.Call, seqid_));
        cancel_future_args args = new cancel_future_args();
        args.Ff = ff;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_cancel_future()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        cancel_future_result result = new cancel_future_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_future_get_result(AsyncCallback callback, object state, long ff, int timeout_millis)
      {
        return send_future_get_result(callback, state, ff, timeout_millis);
      }

      public Result End_future_get_result(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_future_get_result();
      }

      #endif

      /// <summary>
      /// Fetch asynchronous results
      /// @param ff - Future object which has the asynchronous results
      /// @return - result from async scanner/mutator
      /// </summary>
      /// <param name="ff"></param>
      /// <param name="timeout_millis"></param>
      public Result future_get_result(long ff, int timeout_millis)
      {
        #if !SILVERLIGHT
        send_future_get_result(ff, timeout_millis);
        return recv_future_get_result();

        #else
        var asyncResult = Begin_future_get_result(null, null, ff, timeout_millis);
        return End_future_get_result(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_future_get_result(AsyncCallback callback, object state, long ff, int timeout_millis)
      #else
      public void send_future_get_result(long ff, int timeout_millis)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("future_get_result", TMessageType.Call, seqid_));
        future_get_result_args args = new future_get_result_args();
        args.Ff = ff;
        args.Timeout_millis = timeout_millis;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Result recv_future_get_result()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        future_get_result_result result = new future_get_result_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "future_get_result failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_get_future_result(AsyncCallback callback, object state, long ff, int timeout_millis)
      {
        return send_get_future_result(callback, state, ff, timeout_millis);
      }

      public Result End_get_future_result(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_future_result();
      }

      #endif

      public Result get_future_result(long ff, int timeout_millis)
      {
        #if !SILVERLIGHT
        send_get_future_result(ff, timeout_millis);
        return recv_get_future_result();

        #else
        var asyncResult = Begin_get_future_result(null, null, ff, timeout_millis);
        return End_get_future_result(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_get_future_result(AsyncCallback callback, object state, long ff, int timeout_millis)
      #else
      public void send_get_future_result(long ff, int timeout_millis)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("get_future_result", TMessageType.Call, seqid_));
        get_future_result_args args = new get_future_result_args();
        args.Ff = ff;
        args.Timeout_millis = timeout_millis;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Result recv_get_future_result()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_future_result_result result = new get_future_result_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_future_result failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_future_get_result_as_arrays(AsyncCallback callback, object state, long ff, int timeout_millis)
      {
        return send_future_get_result_as_arrays(callback, state, ff, timeout_millis);
      }

      public ResultAsArrays End_future_get_result_as_arrays(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_future_get_result_as_arrays();
      }

      #endif

      /// <summary>
      /// Fetch asynchronous results
      /// @param ff - Future object which has the asynchronous results
      /// @return - result from async scanner/mutator
      /// </summary>
      /// <param name="ff"></param>
      /// <param name="timeout_millis"></param>
      public ResultAsArrays future_get_result_as_arrays(long ff, int timeout_millis)
      {
        #if !SILVERLIGHT
        send_future_get_result_as_arrays(ff, timeout_millis);
        return recv_future_get_result_as_arrays();

        #else
        var asyncResult = Begin_future_get_result_as_arrays(null, null, ff, timeout_millis);
        return End_future_get_result_as_arrays(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_future_get_result_as_arrays(AsyncCallback callback, object state, long ff, int timeout_millis)
      #else
      public void send_future_get_result_as_arrays(long ff, int timeout_millis)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("future_get_result_as_arrays", TMessageType.Call, seqid_));
        future_get_result_as_arrays_args args = new future_get_result_as_arrays_args();
        args.Ff = ff;
        args.Timeout_millis = timeout_millis;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ResultAsArrays recv_future_get_result_as_arrays()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        future_get_result_as_arrays_result result = new future_get_result_as_arrays_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "future_get_result_as_arrays failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_get_future_result_as_arrays(AsyncCallback callback, object state, long ff, int timeout_millis)
      {
        return send_get_future_result_as_arrays(callback, state, ff, timeout_millis);
      }

      public ResultAsArrays End_get_future_result_as_arrays(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_future_result_as_arrays();
      }

      #endif

      public ResultAsArrays get_future_result_as_arrays(long ff, int timeout_millis)
      {
        #if !SILVERLIGHT
        send_get_future_result_as_arrays(ff, timeout_millis);
        return recv_get_future_result_as_arrays();

        #else
        var asyncResult = Begin_get_future_result_as_arrays(null, null, ff, timeout_millis);
        return End_get_future_result_as_arrays(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_get_future_result_as_arrays(AsyncCallback callback, object state, long ff, int timeout_millis)
      #else
      public void send_get_future_result_as_arrays(long ff, int timeout_millis)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("get_future_result_as_arrays", TMessageType.Call, seqid_));
        get_future_result_as_arrays_args args = new get_future_result_as_arrays_args();
        args.Ff = ff;
        args.Timeout_millis = timeout_millis;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ResultAsArrays recv_get_future_result_as_arrays()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_future_result_as_arrays_result result = new get_future_result_as_arrays_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_future_result_as_arrays failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_future_get_result_serialized(AsyncCallback callback, object state, long ff, int timeout_millis)
      {
        return send_future_get_result_serialized(callback, state, ff, timeout_millis);
      }

      public ResultSerialized End_future_get_result_serialized(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_future_get_result_serialized();
      }

      #endif

      /// <summary>
      /// Fetch asynchronous results
      /// @param ff - Future object which has the asynchronous results
      /// @return - result from async scanner/mutator
      /// </summary>
      /// <param name="ff"></param>
      /// <param name="timeout_millis"></param>
      public ResultSerialized future_get_result_serialized(long ff, int timeout_millis)
      {
        #if !SILVERLIGHT
        send_future_get_result_serialized(ff, timeout_millis);
        return recv_future_get_result_serialized();

        #else
        var asyncResult = Begin_future_get_result_serialized(null, null, ff, timeout_millis);
        return End_future_get_result_serialized(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_future_get_result_serialized(AsyncCallback callback, object state, long ff, int timeout_millis)
      #else
      public void send_future_get_result_serialized(long ff, int timeout_millis)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("future_get_result_serialized", TMessageType.Call, seqid_));
        future_get_result_serialized_args args = new future_get_result_serialized_args();
        args.Ff = ff;
        args.Timeout_millis = timeout_millis;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ResultSerialized recv_future_get_result_serialized()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        future_get_result_serialized_result result = new future_get_result_serialized_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "future_get_result_serialized failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_get_future_result_serialized(AsyncCallback callback, object state, long ff, int timeout_millis)
      {
        return send_get_future_result_serialized(callback, state, ff, timeout_millis);
      }

      public ResultSerialized End_get_future_result_serialized(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_future_result_serialized();
      }

      #endif

      public ResultSerialized get_future_result_serialized(long ff, int timeout_millis)
      {
        #if !SILVERLIGHT
        send_get_future_result_serialized(ff, timeout_millis);
        return recv_get_future_result_serialized();

        #else
        var asyncResult = Begin_get_future_result_serialized(null, null, ff, timeout_millis);
        return End_get_future_result_serialized(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_get_future_result_serialized(AsyncCallback callback, object state, long ff, int timeout_millis)
      #else
      public void send_get_future_result_serialized(long ff, int timeout_millis)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("get_future_result_serialized", TMessageType.Call, seqid_));
        get_future_result_serialized_args args = new get_future_result_serialized_args();
        args.Ff = ff;
        args.Timeout_millis = timeout_millis;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ResultSerialized recv_get_future_result_serialized()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_future_result_serialized_result result = new get_future_result_serialized_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_future_result_serialized failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_future_is_empty(AsyncCallback callback, object state, long ff)
      {
        return send_future_is_empty(callback, state, ff);
      }

      public bool End_future_is_empty(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_future_is_empty();
      }

      #endif

      /// <summary>
      /// Check if future object's queue is empty
      /// </summary>
      /// <param name="ff"></param>
      public bool future_is_empty(long ff)
      {
        #if !SILVERLIGHT
        send_future_is_empty(ff);
        return recv_future_is_empty();

        #else
        var asyncResult = Begin_future_is_empty(null, null, ff);
        return End_future_is_empty(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_future_is_empty(AsyncCallback callback, object state, long ff)
      #else
      public void send_future_is_empty(long ff)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("future_is_empty", TMessageType.Call, seqid_));
        future_is_empty_args args = new future_is_empty_args();
        args.Ff = ff;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_future_is_empty()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        future_is_empty_result result = new future_is_empty_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "future_is_empty failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_future_is_full(AsyncCallback callback, object state, long ff)
      {
        return send_future_is_full(callback, state, ff);
      }

      public bool End_future_is_full(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_future_is_full();
      }

      #endif

      /// <summary>
      /// Check if future object's queue is full
      /// </summary>
      /// <param name="ff"></param>
      public bool future_is_full(long ff)
      {
        #if !SILVERLIGHT
        send_future_is_full(ff);
        return recv_future_is_full();

        #else
        var asyncResult = Begin_future_is_full(null, null, ff);
        return End_future_is_full(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_future_is_full(AsyncCallback callback, object state, long ff)
      #else
      public void send_future_is_full(long ff)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("future_is_full", TMessageType.Call, seqid_));
        future_is_full_args args = new future_is_full_args();
        args.Ff = ff;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_future_is_full()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        future_is_full_result result = new future_is_full_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "future_is_full failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_future_is_cancelled(AsyncCallback callback, object state, long ff)
      {
        return send_future_is_cancelled(callback, state, ff);
      }

      public bool End_future_is_cancelled(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_future_is_cancelled();
      }

      #endif

      /// <summary>
      /// Check if future object has been cancelled
      /// </summary>
      /// <param name="ff"></param>
      public bool future_is_cancelled(long ff)
      {
        #if !SILVERLIGHT
        send_future_is_cancelled(ff);
        return recv_future_is_cancelled();

        #else
        var asyncResult = Begin_future_is_cancelled(null, null, ff);
        return End_future_is_cancelled(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_future_is_cancelled(AsyncCallback callback, object state, long ff)
      #else
      public void send_future_is_cancelled(long ff)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("future_is_cancelled", TMessageType.Call, seqid_));
        future_is_cancelled_args args = new future_is_cancelled_args();
        args.Ff = ff;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_future_is_cancelled()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        future_is_cancelled_result result = new future_is_cancelled_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "future_is_cancelled failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_future_has_outstanding(AsyncCallback callback, object state, long ff)
      {
        return send_future_has_outstanding(callback, state, ff);
      }

      public bool End_future_has_outstanding(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_future_has_outstanding();
      }

      #endif

      /// <summary>
      /// Check if future object has outstanding operations
      /// </summary>
      /// <param name="ff"></param>
      public bool future_has_outstanding(long ff)
      {
        #if !SILVERLIGHT
        send_future_has_outstanding(ff);
        return recv_future_has_outstanding();

        #else
        var asyncResult = Begin_future_has_outstanding(null, null, ff);
        return End_future_has_outstanding(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_future_has_outstanding(AsyncCallback callback, object state, long ff)
      #else
      public void send_future_has_outstanding(long ff)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("future_has_outstanding", TMessageType.Call, seqid_));
        future_has_outstanding_args args = new future_has_outstanding_args();
        args.Ff = ff;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_future_has_outstanding()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        future_has_outstanding_result result = new future_has_outstanding_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "future_has_outstanding failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_future_close(AsyncCallback callback, object state, long ff)
      {
        return send_future_close(callback, state, ff);
      }

      public void End_future_close(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_future_close();
      }

      #endif

      /// <summary>
      /// Close a future object
      /// @param ff - the future object to be closed
      /// </summary>
      /// <param name="ff"></param>
      public void future_close(long ff)
      {
        #if !SILVERLIGHT
        send_future_close(ff);
        recv_future_close();

        #else
        var asyncResult = Begin_future_close(null, null, ff);
        End_future_close(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_future_close(AsyncCallback callback, object state, long ff)
      #else
      public void send_future_close(long ff)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("future_close", TMessageType.Call, seqid_));
        future_close_args args = new future_close_args();
        args.Ff = ff;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_future_close()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        future_close_result result = new future_close_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_close_future(AsyncCallback callback, object state, long ff)
      {
        return send_close_future(callback, state, ff);
      }

      public void End_close_future(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_close_future();
      }

      #endif

      public void close_future(long ff)
      {
        #if !SILVERLIGHT
        send_close_future(ff);
        recv_close_future();

        #else
        var asyncResult = Begin_close_future(null, null, ff);
        End_close_future(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_close_future(AsyncCallback callback, object state, long ff)
      #else
      public void send_close_future(long ff)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("close_future", TMessageType.Call, seqid_));
        close_future_args args = new close_future_args();
        args.Ff = ff;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_close_future()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        close_future_result result = new close_future_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_scanner_open(AsyncCallback callback, object state, long ns, string table_name, ScanSpec scan_spec)
      {
        return send_scanner_open(callback, state, ns, table_name, scan_spec);
      }

      public long End_scanner_open(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_scanner_open();
      }

      #endif

      /// <summary>
      /// Open a table scanner
      /// @param ns - namespace id
      /// @param table_name - table name
      /// @param scan_spec - scan specification
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      /// <param name="scan_spec"></param>
      public long scanner_open(long ns, string table_name, ScanSpec scan_spec)
      {
        #if !SILVERLIGHT
        send_scanner_open(ns, table_name, scan_spec);
        return recv_scanner_open();

        #else
        var asyncResult = Begin_scanner_open(null, null, ns, table_name, scan_spec);
        return End_scanner_open(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_scanner_open(AsyncCallback callback, object state, long ns, string table_name, ScanSpec scan_spec)
      #else
      public void send_scanner_open(long ns, string table_name, ScanSpec scan_spec)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("scanner_open", TMessageType.Call, seqid_));
        scanner_open_args args = new scanner_open_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Scan_spec = scan_spec;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public long recv_scanner_open()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        scanner_open_result result = new scanner_open_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scanner_open failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_open_scanner(AsyncCallback callback, object state, long ns, string table_name, ScanSpec scan_spec)
      {
        return send_open_scanner(callback, state, ns, table_name, scan_spec);
      }

      public long End_open_scanner(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_open_scanner();
      }

      #endif

      public long open_scanner(long ns, string table_name, ScanSpec scan_spec)
      {
        #if !SILVERLIGHT
        send_open_scanner(ns, table_name, scan_spec);
        return recv_open_scanner();

        #else
        var asyncResult = Begin_open_scanner(null, null, ns, table_name, scan_spec);
        return End_open_scanner(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_open_scanner(AsyncCallback callback, object state, long ns, string table_name, ScanSpec scan_spec)
      #else
      public void send_open_scanner(long ns, string table_name, ScanSpec scan_spec)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("open_scanner", TMessageType.Call, seqid_));
        open_scanner_args args = new open_scanner_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Scan_spec = scan_spec;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public long recv_open_scanner()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        open_scanner_result result = new open_scanner_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "open_scanner failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_async_scanner_open(AsyncCallback callback, object state, long ns, string table_name, long future, ScanSpec scan_spec)
      {
        return send_async_scanner_open(callback, state, ns, table_name, future, scan_spec);
      }

      public long End_async_scanner_open(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_async_scanner_open();
      }

      #endif

      /// <summary>
      /// Open an asynchronous table scanner
      /// @param ns - namespace id
      /// @param table_name - table name
      /// @param future - callback object
      /// @param scan_spec - scan specification
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      /// <param name="future"></param>
      /// <param name="scan_spec"></param>
      public long async_scanner_open(long ns, string table_name, long future, ScanSpec scan_spec)
      {
        #if !SILVERLIGHT
        send_async_scanner_open(ns, table_name, future, scan_spec);
        return recv_async_scanner_open();

        #else
        var asyncResult = Begin_async_scanner_open(null, null, ns, table_name, future, scan_spec);
        return End_async_scanner_open(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_async_scanner_open(AsyncCallback callback, object state, long ns, string table_name, long future, ScanSpec scan_spec)
      #else
      public void send_async_scanner_open(long ns, string table_name, long future, ScanSpec scan_spec)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("async_scanner_open", TMessageType.Call, seqid_));
        async_scanner_open_args args = new async_scanner_open_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Future = future;
        args.Scan_spec = scan_spec;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public long recv_async_scanner_open()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        async_scanner_open_result result = new async_scanner_open_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "async_scanner_open failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_open_scanner_async(AsyncCallback callback, object state, long ns, string table_name, long future, ScanSpec scan_spec)
      {
        return send_open_scanner_async(callback, state, ns, table_name, future, scan_spec);
      }

      public long End_open_scanner_async(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_open_scanner_async();
      }

      #endif

      public long open_scanner_async(long ns, string table_name, long future, ScanSpec scan_spec)
      {
        #if !SILVERLIGHT
        send_open_scanner_async(ns, table_name, future, scan_spec);
        return recv_open_scanner_async();

        #else
        var asyncResult = Begin_open_scanner_async(null, null, ns, table_name, future, scan_spec);
        return End_open_scanner_async(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_open_scanner_async(AsyncCallback callback, object state, long ns, string table_name, long future, ScanSpec scan_spec)
      #else
      public void send_open_scanner_async(long ns, string table_name, long future, ScanSpec scan_spec)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("open_scanner_async", TMessageType.Call, seqid_));
        open_scanner_async_args args = new open_scanner_async_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Future = future;
        args.Scan_spec = scan_spec;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public long recv_open_scanner_async()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        open_scanner_async_result result = new open_scanner_async_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "open_scanner_async failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_scanner_close(AsyncCallback callback, object state, long scanner)
      {
        return send_scanner_close(callback, state, scanner);
      }

      public void End_scanner_close(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_scanner_close();
      }

      #endif

      /// <summary>
      /// Close a table scanner
      /// 
      /// @param scanner - scanner id to close
      /// </summary>
      /// <param name="scanner"></param>
      public void scanner_close(long scanner)
      {
        #if !SILVERLIGHT
        send_scanner_close(scanner);
        recv_scanner_close();

        #else
        var asyncResult = Begin_scanner_close(null, null, scanner);
        End_scanner_close(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_scanner_close(AsyncCallback callback, object state, long scanner)
      #else
      public void send_scanner_close(long scanner)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("scanner_close", TMessageType.Call, seqid_));
        scanner_close_args args = new scanner_close_args();
        args.Scanner = scanner;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_scanner_close()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        scanner_close_result result = new scanner_close_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_close_scanner(AsyncCallback callback, object state, long scanner)
      {
        return send_close_scanner(callback, state, scanner);
      }

      public void End_close_scanner(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_close_scanner();
      }

      #endif

      public void close_scanner(long scanner)
      {
        #if !SILVERLIGHT
        send_close_scanner(scanner);
        recv_close_scanner();

        #else
        var asyncResult = Begin_close_scanner(null, null, scanner);
        End_close_scanner(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_close_scanner(AsyncCallback callback, object state, long scanner)
      #else
      public void send_close_scanner(long scanner)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("close_scanner", TMessageType.Call, seqid_));
        close_scanner_args args = new close_scanner_args();
        args.Scanner = scanner;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_close_scanner()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        close_scanner_result result = new close_scanner_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_async_scanner_cancel(AsyncCallback callback, object state, long scanner)
      {
        return send_async_scanner_cancel(callback, state, scanner);
      }

      public void End_async_scanner_cancel(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_async_scanner_cancel();
      }

      #endif

      /// <summary>
      /// Cancel a table scanner
      /// 
      /// @param scanner - scanner id to close
      /// </summary>
      /// <param name="scanner"></param>
      public void async_scanner_cancel(long scanner)
      {
        #if !SILVERLIGHT
        send_async_scanner_cancel(scanner);
        recv_async_scanner_cancel();

        #else
        var asyncResult = Begin_async_scanner_cancel(null, null, scanner);
        End_async_scanner_cancel(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_async_scanner_cancel(AsyncCallback callback, object state, long scanner)
      #else
      public void send_async_scanner_cancel(long scanner)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("async_scanner_cancel", TMessageType.Call, seqid_));
        async_scanner_cancel_args args = new async_scanner_cancel_args();
        args.Scanner = scanner;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_async_scanner_cancel()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        async_scanner_cancel_result result = new async_scanner_cancel_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_cancel_scanner_async(AsyncCallback callback, object state, long scanner)
      {
        return send_cancel_scanner_async(callback, state, scanner);
      }

      public void End_cancel_scanner_async(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_cancel_scanner_async();
      }

      #endif

      public void cancel_scanner_async(long scanner)
      {
        #if !SILVERLIGHT
        send_cancel_scanner_async(scanner);
        recv_cancel_scanner_async();

        #else
        var asyncResult = Begin_cancel_scanner_async(null, null, scanner);
        End_cancel_scanner_async(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_cancel_scanner_async(AsyncCallback callback, object state, long scanner)
      #else
      public void send_cancel_scanner_async(long scanner)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("cancel_scanner_async", TMessageType.Call, seqid_));
        cancel_scanner_async_args args = new cancel_scanner_async_args();
        args.Scanner = scanner;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_cancel_scanner_async()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        cancel_scanner_async_result result = new cancel_scanner_async_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_async_scanner_close(AsyncCallback callback, object state, long scanner)
      {
        return send_async_scanner_close(callback, state, scanner);
      }

      public void End_async_scanner_close(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_async_scanner_close();
      }

      #endif

      /// <summary>
      /// Close a table scanner
      /// 
      /// @param scanner - scanner id to close
      /// </summary>
      /// <param name="scanner"></param>
      public void async_scanner_close(long scanner)
      {
        #if !SILVERLIGHT
        send_async_scanner_close(scanner);
        recv_async_scanner_close();

        #else
        var asyncResult = Begin_async_scanner_close(null, null, scanner);
        End_async_scanner_close(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_async_scanner_close(AsyncCallback callback, object state, long scanner)
      #else
      public void send_async_scanner_close(long scanner)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("async_scanner_close", TMessageType.Call, seqid_));
        async_scanner_close_args args = new async_scanner_close_args();
        args.Scanner = scanner;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_async_scanner_close()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        async_scanner_close_result result = new async_scanner_close_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_close_scanner_async(AsyncCallback callback, object state, long scanner)
      {
        return send_close_scanner_async(callback, state, scanner);
      }

      public void End_close_scanner_async(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_close_scanner_async();
      }

      #endif

      public void close_scanner_async(long scanner)
      {
        #if !SILVERLIGHT
        send_close_scanner_async(scanner);
        recv_close_scanner_async();

        #else
        var asyncResult = Begin_close_scanner_async(null, null, scanner);
        End_close_scanner_async(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_close_scanner_async(AsyncCallback callback, object state, long scanner)
      #else
      public void send_close_scanner_async(long scanner)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("close_scanner_async", TMessageType.Call, seqid_));
        close_scanner_async_args args = new close_scanner_async_args();
        args.Scanner = scanner;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_close_scanner_async()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        close_scanner_async_result result = new close_scanner_async_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_scanner_get_cells(AsyncCallback callback, object state, long scanner)
      {
        return send_scanner_get_cells(callback, state, scanner);
      }

      public List<Cell> End_scanner_get_cells(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_scanner_get_cells();
      }

      #endif

      /// <summary>
      /// Iterate over cells of a scanner
      /// 
      /// @param scanner - scanner id
      /// </summary>
      /// <param name="scanner"></param>
      public List<Cell> scanner_get_cells(long scanner)
      {
        #if !SILVERLIGHT
        send_scanner_get_cells(scanner);
        return recv_scanner_get_cells();

        #else
        var asyncResult = Begin_scanner_get_cells(null, null, scanner);
        return End_scanner_get_cells(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_scanner_get_cells(AsyncCallback callback, object state, long scanner)
      #else
      public void send_scanner_get_cells(long scanner)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("scanner_get_cells", TMessageType.Call, seqid_));
        scanner_get_cells_args args = new scanner_get_cells_args();
        args.Scanner = scanner;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Cell> recv_scanner_get_cells()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        scanner_get_cells_result result = new scanner_get_cells_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scanner_get_cells failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_next_cells(AsyncCallback callback, object state, long scanner)
      {
        return send_next_cells(callback, state, scanner);
      }

      public List<Cell> End_next_cells(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_next_cells();
      }

      #endif

      public List<Cell> next_cells(long scanner)
      {
        #if !SILVERLIGHT
        send_next_cells(scanner);
        return recv_next_cells();

        #else
        var asyncResult = Begin_next_cells(null, null, scanner);
        return End_next_cells(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_next_cells(AsyncCallback callback, object state, long scanner)
      #else
      public void send_next_cells(long scanner)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("next_cells", TMessageType.Call, seqid_));
        next_cells_args args = new next_cells_args();
        args.Scanner = scanner;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Cell> recv_next_cells()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        next_cells_result result = new next_cells_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "next_cells failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_scanner_get_cells_as_arrays(AsyncCallback callback, object state, long scanner)
      {
        return send_scanner_get_cells_as_arrays(callback, state, scanner);
      }

      public List<List<string>> End_scanner_get_cells_as_arrays(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_scanner_get_cells_as_arrays();
      }

      #endif

      public List<List<string>> scanner_get_cells_as_arrays(long scanner)
      {
        #if !SILVERLIGHT
        send_scanner_get_cells_as_arrays(scanner);
        return recv_scanner_get_cells_as_arrays();

        #else
        var asyncResult = Begin_scanner_get_cells_as_arrays(null, null, scanner);
        return End_scanner_get_cells_as_arrays(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_scanner_get_cells_as_arrays(AsyncCallback callback, object state, long scanner)
      #else
      public void send_scanner_get_cells_as_arrays(long scanner)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("scanner_get_cells_as_arrays", TMessageType.Call, seqid_));
        scanner_get_cells_as_arrays_args args = new scanner_get_cells_as_arrays_args();
        args.Scanner = scanner;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<List<string>> recv_scanner_get_cells_as_arrays()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        scanner_get_cells_as_arrays_result result = new scanner_get_cells_as_arrays_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scanner_get_cells_as_arrays failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_next_cells_as_arrays(AsyncCallback callback, object state, long scanner)
      {
        return send_next_cells_as_arrays(callback, state, scanner);
      }

      public List<List<string>> End_next_cells_as_arrays(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_next_cells_as_arrays();
      }

      #endif

      public List<List<string>> next_cells_as_arrays(long scanner)
      {
        #if !SILVERLIGHT
        send_next_cells_as_arrays(scanner);
        return recv_next_cells_as_arrays();

        #else
        var asyncResult = Begin_next_cells_as_arrays(null, null, scanner);
        return End_next_cells_as_arrays(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_next_cells_as_arrays(AsyncCallback callback, object state, long scanner)
      #else
      public void send_next_cells_as_arrays(long scanner)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("next_cells_as_arrays", TMessageType.Call, seqid_));
        next_cells_as_arrays_args args = new next_cells_as_arrays_args();
        args.Scanner = scanner;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<List<string>> recv_next_cells_as_arrays()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        next_cells_as_arrays_result result = new next_cells_as_arrays_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "next_cells_as_arrays failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_scanner_get_cells_serialized(AsyncCallback callback, object state, long scanner)
      {
        return send_scanner_get_cells_serialized(callback, state, scanner);
      }

      public byte[] End_scanner_get_cells_serialized(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_scanner_get_cells_serialized();
      }

      #endif

      /// <summary>
      /// Alternative interface returning buffer of serialized cells
      /// </summary>
      /// <param name="scanner"></param>
      public byte[] scanner_get_cells_serialized(long scanner)
      {
        #if !SILVERLIGHT
        send_scanner_get_cells_serialized(scanner);
        return recv_scanner_get_cells_serialized();

        #else
        var asyncResult = Begin_scanner_get_cells_serialized(null, null, scanner);
        return End_scanner_get_cells_serialized(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_scanner_get_cells_serialized(AsyncCallback callback, object state, long scanner)
      #else
      public void send_scanner_get_cells_serialized(long scanner)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("scanner_get_cells_serialized", TMessageType.Call, seqid_));
        scanner_get_cells_serialized_args args = new scanner_get_cells_serialized_args();
        args.Scanner = scanner;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_scanner_get_cells_serialized()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        scanner_get_cells_serialized_result result = new scanner_get_cells_serialized_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scanner_get_cells_serialized failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_next_cells_serialized(AsyncCallback callback, object state, long scanner)
      {
        return send_next_cells_serialized(callback, state, scanner);
      }

      public byte[] End_next_cells_serialized(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_next_cells_serialized();
      }

      #endif

      public byte[] next_cells_serialized(long scanner)
      {
        #if !SILVERLIGHT
        send_next_cells_serialized(scanner);
        return recv_next_cells_serialized();

        #else
        var asyncResult = Begin_next_cells_serialized(null, null, scanner);
        return End_next_cells_serialized(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_next_cells_serialized(AsyncCallback callback, object state, long scanner)
      #else
      public void send_next_cells_serialized(long scanner)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("next_cells_serialized", TMessageType.Call, seqid_));
        next_cells_serialized_args args = new next_cells_serialized_args();
        args.Scanner = scanner;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_next_cells_serialized()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        next_cells_serialized_result result = new next_cells_serialized_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "next_cells_serialized failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_scanner_get_row(AsyncCallback callback, object state, long scanner)
      {
        return send_scanner_get_row(callback, state, scanner);
      }

      public List<Cell> End_scanner_get_row(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_scanner_get_row();
      }

      #endif

      /// <summary>
      /// Iterate over rows of a scanner
      /// 
      /// @param scanner - scanner id
      /// </summary>
      /// <param name="scanner"></param>
      public List<Cell> scanner_get_row(long scanner)
      {
        #if !SILVERLIGHT
        send_scanner_get_row(scanner);
        return recv_scanner_get_row();

        #else
        var asyncResult = Begin_scanner_get_row(null, null, scanner);
        return End_scanner_get_row(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_scanner_get_row(AsyncCallback callback, object state, long scanner)
      #else
      public void send_scanner_get_row(long scanner)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("scanner_get_row", TMessageType.Call, seqid_));
        scanner_get_row_args args = new scanner_get_row_args();
        args.Scanner = scanner;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Cell> recv_scanner_get_row()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        scanner_get_row_result result = new scanner_get_row_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scanner_get_row failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_next_row(AsyncCallback callback, object state, long scanner)
      {
        return send_next_row(callback, state, scanner);
      }

      public List<Cell> End_next_row(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_next_row();
      }

      #endif

      public List<Cell> next_row(long scanner)
      {
        #if !SILVERLIGHT
        send_next_row(scanner);
        return recv_next_row();

        #else
        var asyncResult = Begin_next_row(null, null, scanner);
        return End_next_row(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_next_row(AsyncCallback callback, object state, long scanner)
      #else
      public void send_next_row(long scanner)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("next_row", TMessageType.Call, seqid_));
        next_row_args args = new next_row_args();
        args.Scanner = scanner;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Cell> recv_next_row()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        next_row_result result = new next_row_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "next_row failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_scanner_get_row_as_arrays(AsyncCallback callback, object state, long scanner)
      {
        return send_scanner_get_row_as_arrays(callback, state, scanner);
      }

      public List<List<string>> End_scanner_get_row_as_arrays(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_scanner_get_row_as_arrays();
      }

      #endif

      /// <summary>
      /// Alternative interface using array as cell
      /// </summary>
      /// <param name="scanner"></param>
      public List<List<string>> scanner_get_row_as_arrays(long scanner)
      {
        #if !SILVERLIGHT
        send_scanner_get_row_as_arrays(scanner);
        return recv_scanner_get_row_as_arrays();

        #else
        var asyncResult = Begin_scanner_get_row_as_arrays(null, null, scanner);
        return End_scanner_get_row_as_arrays(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_scanner_get_row_as_arrays(AsyncCallback callback, object state, long scanner)
      #else
      public void send_scanner_get_row_as_arrays(long scanner)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("scanner_get_row_as_arrays", TMessageType.Call, seqid_));
        scanner_get_row_as_arrays_args args = new scanner_get_row_as_arrays_args();
        args.Scanner = scanner;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<List<string>> recv_scanner_get_row_as_arrays()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        scanner_get_row_as_arrays_result result = new scanner_get_row_as_arrays_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scanner_get_row_as_arrays failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_next_row_as_arrays(AsyncCallback callback, object state, long scanner)
      {
        return send_next_row_as_arrays(callback, state, scanner);
      }

      public List<List<string>> End_next_row_as_arrays(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_next_row_as_arrays();
      }

      #endif

      public List<List<string>> next_row_as_arrays(long scanner)
      {
        #if !SILVERLIGHT
        send_next_row_as_arrays(scanner);
        return recv_next_row_as_arrays();

        #else
        var asyncResult = Begin_next_row_as_arrays(null, null, scanner);
        return End_next_row_as_arrays(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_next_row_as_arrays(AsyncCallback callback, object state, long scanner)
      #else
      public void send_next_row_as_arrays(long scanner)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("next_row_as_arrays", TMessageType.Call, seqid_));
        next_row_as_arrays_args args = new next_row_as_arrays_args();
        args.Scanner = scanner;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<List<string>> recv_next_row_as_arrays()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        next_row_as_arrays_result result = new next_row_as_arrays_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "next_row_as_arrays failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_scanner_get_row_serialized(AsyncCallback callback, object state, long scanner)
      {
        return send_scanner_get_row_serialized(callback, state, scanner);
      }

      public byte[] End_scanner_get_row_serialized(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_scanner_get_row_serialized();
      }

      #endif

      /// <summary>
      /// Alternate interface returning a buffer of serialized cells for iterating by row
      /// for a given scanner
      /// 
      /// @param scanner - scanner id
      /// </summary>
      /// <param name="scanner"></param>
      public byte[] scanner_get_row_serialized(long scanner)
      {
        #if !SILVERLIGHT
        send_scanner_get_row_serialized(scanner);
        return recv_scanner_get_row_serialized();

        #else
        var asyncResult = Begin_scanner_get_row_serialized(null, null, scanner);
        return End_scanner_get_row_serialized(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_scanner_get_row_serialized(AsyncCallback callback, object state, long scanner)
      #else
      public void send_scanner_get_row_serialized(long scanner)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("scanner_get_row_serialized", TMessageType.Call, seqid_));
        scanner_get_row_serialized_args args = new scanner_get_row_serialized_args();
        args.Scanner = scanner;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_scanner_get_row_serialized()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        scanner_get_row_serialized_result result = new scanner_get_row_serialized_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scanner_get_row_serialized failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_next_row_serialized(AsyncCallback callback, object state, long scanner)
      {
        return send_next_row_serialized(callback, state, scanner);
      }

      public byte[] End_next_row_serialized(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_next_row_serialized();
      }

      #endif

      public byte[] next_row_serialized(long scanner)
      {
        #if !SILVERLIGHT
        send_next_row_serialized(scanner);
        return recv_next_row_serialized();

        #else
        var asyncResult = Begin_next_row_serialized(null, null, scanner);
        return End_next_row_serialized(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_next_row_serialized(AsyncCallback callback, object state, long scanner)
      #else
      public void send_next_row_serialized(long scanner)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("next_row_serialized", TMessageType.Call, seqid_));
        next_row_serialized_args args = new next_row_serialized_args();
        args.Scanner = scanner;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_next_row_serialized()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        next_row_serialized_result result = new next_row_serialized_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "next_row_serialized failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_get_row(AsyncCallback callback, object state, long ns, string table_name, string row)
      {
        return send_get_row(callback, state, ns, table_name, row);
      }

      public List<Cell> End_get_row(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_row();
      }

      #endif

      /// <summary>
      /// Get a row (convenience method for random access a row)
      /// 
      /// @param ns - namespace id
      /// 
      /// @param table_name - table name
      /// 
      /// @param row - row key
      /// 
      /// @return a list of cells (with row_keys unset)
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      /// <param name="row"></param>
      public List<Cell> get_row(long ns, string table_name, string row)
      {
        #if !SILVERLIGHT
        send_get_row(ns, table_name, row);
        return recv_get_row();

        #else
        var asyncResult = Begin_get_row(null, null, ns, table_name, row);
        return End_get_row(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_get_row(AsyncCallback callback, object state, long ns, string table_name, string row)
      #else
      public void send_get_row(long ns, string table_name, string row)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("get_row", TMessageType.Call, seqid_));
        get_row_args args = new get_row_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Row = row;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Cell> recv_get_row()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_row_result result = new get_row_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_row failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_get_row_as_arrays(AsyncCallback callback, object state, long ns, string name, string row)
      {
        return send_get_row_as_arrays(callback, state, ns, name, row);
      }

      public List<List<string>> End_get_row_as_arrays(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_row_as_arrays();
      }

      #endif

      /// <summary>
      /// Alternative interface using array as cell
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="name"></param>
      /// <param name="row"></param>
      public List<List<string>> get_row_as_arrays(long ns, string name, string row)
      {
        #if !SILVERLIGHT
        send_get_row_as_arrays(ns, name, row);
        return recv_get_row_as_arrays();

        #else
        var asyncResult = Begin_get_row_as_arrays(null, null, ns, name, row);
        return End_get_row_as_arrays(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_get_row_as_arrays(AsyncCallback callback, object state, long ns, string name, string row)
      #else
      public void send_get_row_as_arrays(long ns, string name, string row)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("get_row_as_arrays", TMessageType.Call, seqid_));
        get_row_as_arrays_args args = new get_row_as_arrays_args();
        args.Ns = ns;
        args.Name = name;
        args.Row = row;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<List<string>> recv_get_row_as_arrays()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_row_as_arrays_result result = new get_row_as_arrays_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_row_as_arrays failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_get_row_serialized(AsyncCallback callback, object state, long ns, string table_name, string row)
      {
        return send_get_row_serialized(callback, state, ns, table_name, row);
      }

      public byte[] End_get_row_serialized(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_row_serialized();
      }

      #endif

      /// <summary>
      /// Alternative interface returning buffer of serialized cells
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      /// <param name="row"></param>
      public byte[] get_row_serialized(long ns, string table_name, string row)
      {
        #if !SILVERLIGHT
        send_get_row_serialized(ns, table_name, row);
        return recv_get_row_serialized();

        #else
        var asyncResult = Begin_get_row_serialized(null, null, ns, table_name, row);
        return End_get_row_serialized(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_get_row_serialized(AsyncCallback callback, object state, long ns, string table_name, string row)
      #else
      public void send_get_row_serialized(long ns, string table_name, string row)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("get_row_serialized", TMessageType.Call, seqid_));
        get_row_serialized_args args = new get_row_serialized_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Row = row;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_get_row_serialized()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_row_serialized_result result = new get_row_serialized_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_row_serialized failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_get_cell(AsyncCallback callback, object state, long ns, string table_name, string row, string column)
      {
        return send_get_cell(callback, state, ns, table_name, row, column);
      }

      public byte[] End_get_cell(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_cell();
      }

      #endif

      /// <summary>
      /// Get a cell (convenience method for random access a cell)
      /// 
      /// @param ns - namespace id
      /// 
      /// @param table_name - table name
      /// 
      /// @param row - row key
      /// 
      /// @param column - column name
      /// 
      /// @return value (byte sequence)
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      /// <param name="row"></param>
      /// <param name="column"></param>
      public byte[] get_cell(long ns, string table_name, string row, string column)
      {
        #if !SILVERLIGHT
        send_get_cell(ns, table_name, row, column);
        return recv_get_cell();

        #else
        var asyncResult = Begin_get_cell(null, null, ns, table_name, row, column);
        return End_get_cell(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_get_cell(AsyncCallback callback, object state, long ns, string table_name, string row, string column)
      #else
      public void send_get_cell(long ns, string table_name, string row, string column)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("get_cell", TMessageType.Call, seqid_));
        get_cell_args args = new get_cell_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Row = row;
        args.Column = column;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_get_cell()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_cell_result result = new get_cell_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_cell failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_get_cells(AsyncCallback callback, object state, long ns, string table_name, ScanSpec scan_spec)
      {
        return send_get_cells(callback, state, ns, table_name, scan_spec);
      }

      public List<Cell> End_get_cells(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_cells();
      }

      #endif

      /// <summary>
      /// Get cells (convenience method for access small amount of cells)
      /// 
      /// @param ns - namespace id
      ///  
      /// @param table_name - table name
      /// 
      /// @param scan_spec - scan specification
      /// 
      /// @return a list of cells (a cell with no row key set is assumed to have
      ///         the same row key as the previous cell)
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      /// <param name="scan_spec"></param>
      public List<Cell> get_cells(long ns, string table_name, ScanSpec scan_spec)
      {
        #if !SILVERLIGHT
        send_get_cells(ns, table_name, scan_spec);
        return recv_get_cells();

        #else
        var asyncResult = Begin_get_cells(null, null, ns, table_name, scan_spec);
        return End_get_cells(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_get_cells(AsyncCallback callback, object state, long ns, string table_name, ScanSpec scan_spec)
      #else
      public void send_get_cells(long ns, string table_name, ScanSpec scan_spec)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("get_cells", TMessageType.Call, seqid_));
        get_cells_args args = new get_cells_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Scan_spec = scan_spec;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Cell> recv_get_cells()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_cells_result result = new get_cells_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_cells failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_get_cells_as_arrays(AsyncCallback callback, object state, long ns, string name, ScanSpec scan_spec)
      {
        return send_get_cells_as_arrays(callback, state, ns, name, scan_spec);
      }

      public List<List<string>> End_get_cells_as_arrays(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_cells_as_arrays();
      }

      #endif

      /// <summary>
      /// Alternative interface using array as cell
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="name"></param>
      /// <param name="scan_spec"></param>
      public List<List<string>> get_cells_as_arrays(long ns, string name, ScanSpec scan_spec)
      {
        #if !SILVERLIGHT
        send_get_cells_as_arrays(ns, name, scan_spec);
        return recv_get_cells_as_arrays();

        #else
        var asyncResult = Begin_get_cells_as_arrays(null, null, ns, name, scan_spec);
        return End_get_cells_as_arrays(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_get_cells_as_arrays(AsyncCallback callback, object state, long ns, string name, ScanSpec scan_spec)
      #else
      public void send_get_cells_as_arrays(long ns, string name, ScanSpec scan_spec)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("get_cells_as_arrays", TMessageType.Call, seqid_));
        get_cells_as_arrays_args args = new get_cells_as_arrays_args();
        args.Ns = ns;
        args.Name = name;
        args.Scan_spec = scan_spec;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<List<string>> recv_get_cells_as_arrays()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_cells_as_arrays_result result = new get_cells_as_arrays_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_cells_as_arrays failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_get_cells_serialized(AsyncCallback callback, object state, long ns, string name, ScanSpec scan_spec)
      {
        return send_get_cells_serialized(callback, state, ns, name, scan_spec);
      }

      public byte[] End_get_cells_serialized(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_cells_serialized();
      }

      #endif

      /// <summary>
      /// Alternative interface returning buffer of serialized cells
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="name"></param>
      /// <param name="scan_spec"></param>
      public byte[] get_cells_serialized(long ns, string name, ScanSpec scan_spec)
      {
        #if !SILVERLIGHT
        send_get_cells_serialized(ns, name, scan_spec);
        return recv_get_cells_serialized();

        #else
        var asyncResult = Begin_get_cells_serialized(null, null, ns, name, scan_spec);
        return End_get_cells_serialized(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_get_cells_serialized(AsyncCallback callback, object state, long ns, string name, ScanSpec scan_spec)
      #else
      public void send_get_cells_serialized(long ns, string name, ScanSpec scan_spec)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("get_cells_serialized", TMessageType.Call, seqid_));
        get_cells_serialized_args args = new get_cells_serialized_args();
        args.Ns = ns;
        args.Name = name;
        args.Scan_spec = scan_spec;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_get_cells_serialized()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_cells_serialized_result result = new get_cells_serialized_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_cells_serialized failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_shared_mutator_refresh(AsyncCallback callback, object state, long ns, string table_name, MutateSpec mutate_spec)
      {
        return send_shared_mutator_refresh(callback, state, ns, table_name, mutate_spec);
      }

      public void End_shared_mutator_refresh(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_shared_mutator_refresh();
      }

      #endif

      /// <summary>
      /// Create a shared mutator with specified MutateSpec.
      /// Delete and recreate it if the mutator exists.
      /// 
      /// @param ns - namespace id
      ///  
      /// @param table_name - table name
      /// 
      /// @param mutate_spec - mutator specification
      /// 
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      /// <param name="mutate_spec"></param>
      public void shared_mutator_refresh(long ns, string table_name, MutateSpec mutate_spec)
      {
        #if !SILVERLIGHT
        send_shared_mutator_refresh(ns, table_name, mutate_spec);
        recv_shared_mutator_refresh();

        #else
        var asyncResult = Begin_shared_mutator_refresh(null, null, ns, table_name, mutate_spec);
        End_shared_mutator_refresh(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_shared_mutator_refresh(AsyncCallback callback, object state, long ns, string table_name, MutateSpec mutate_spec)
      #else
      public void send_shared_mutator_refresh(long ns, string table_name, MutateSpec mutate_spec)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("shared_mutator_refresh", TMessageType.Call, seqid_));
        shared_mutator_refresh_args args = new shared_mutator_refresh_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Mutate_spec = mutate_spec;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_shared_mutator_refresh()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        shared_mutator_refresh_result result = new shared_mutator_refresh_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_refresh_shared_mutator(AsyncCallback callback, object state, long ns, string table_name, MutateSpec mutate_spec)
      {
        return send_refresh_shared_mutator(callback, state, ns, table_name, mutate_spec);
      }

      public void End_refresh_shared_mutator(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_refresh_shared_mutator();
      }

      #endif

      public void refresh_shared_mutator(long ns, string table_name, MutateSpec mutate_spec)
      {
        #if !SILVERLIGHT
        send_refresh_shared_mutator(ns, table_name, mutate_spec);
        recv_refresh_shared_mutator();

        #else
        var asyncResult = Begin_refresh_shared_mutator(null, null, ns, table_name, mutate_spec);
        End_refresh_shared_mutator(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_refresh_shared_mutator(AsyncCallback callback, object state, long ns, string table_name, MutateSpec mutate_spec)
      #else
      public void send_refresh_shared_mutator(long ns, string table_name, MutateSpec mutate_spec)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("refresh_shared_mutator", TMessageType.Call, seqid_));
        refresh_shared_mutator_args args = new refresh_shared_mutator_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Mutate_spec = mutate_spec;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_refresh_shared_mutator()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        refresh_shared_mutator_result result = new refresh_shared_mutator_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_shared_mutator_set_cells(AsyncCallback callback, object state, long ns, string table_name, MutateSpec mutate_spec, List<Cell> cells)
      {
        return send_shared_mutator_set_cells(callback, state, ns, table_name, mutate_spec, cells);
      }

      public void End_shared_mutator_set_cells(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_shared_mutator_set_cells();
      }

      #endif

      /// <summary>
      /// Open a shared periodic mutator which causes cells to be written asyncronously.
      /// Users beware: calling this method merely writes
      /// cells to a local buffer and does not guarantee that the cells have been persisted.
      /// If you want guaranteed durability, use the open_mutator+set_cells* interface instead.
      /// 
      /// @param ns - namespace id
      /// 
      /// @param table_name - table name
      /// 
      /// @param mutate_spec - mutator specification
      /// 
      /// @param cells - set of cells to be written
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      /// <param name="mutate_spec"></param>
      /// <param name="cells"></param>
      public void shared_mutator_set_cells(long ns, string table_name, MutateSpec mutate_spec, List<Cell> cells)
      {
        #if !SILVERLIGHT
        send_shared_mutator_set_cells(ns, table_name, mutate_spec, cells);
        recv_shared_mutator_set_cells();

        #else
        var asyncResult = Begin_shared_mutator_set_cells(null, null, ns, table_name, mutate_spec, cells);
        End_shared_mutator_set_cells(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_shared_mutator_set_cells(AsyncCallback callback, object state, long ns, string table_name, MutateSpec mutate_spec, List<Cell> cells)
      #else
      public void send_shared_mutator_set_cells(long ns, string table_name, MutateSpec mutate_spec, List<Cell> cells)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("shared_mutator_set_cells", TMessageType.Call, seqid_));
        shared_mutator_set_cells_args args = new shared_mutator_set_cells_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Mutate_spec = mutate_spec;
        args.Cells = cells;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_shared_mutator_set_cells()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        shared_mutator_set_cells_result result = new shared_mutator_set_cells_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_offer_cells(AsyncCallback callback, object state, long ns, string table_name, MutateSpec mutate_spec, List<Cell> cells)
      {
        return send_offer_cells(callback, state, ns, table_name, mutate_spec, cells);
      }

      public void End_offer_cells(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_offer_cells();
      }

      #endif

      public void offer_cells(long ns, string table_name, MutateSpec mutate_spec, List<Cell> cells)
      {
        #if !SILVERLIGHT
        send_offer_cells(ns, table_name, mutate_spec, cells);
        recv_offer_cells();

        #else
        var asyncResult = Begin_offer_cells(null, null, ns, table_name, mutate_spec, cells);
        End_offer_cells(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_offer_cells(AsyncCallback callback, object state, long ns, string table_name, MutateSpec mutate_spec, List<Cell> cells)
      #else
      public void send_offer_cells(long ns, string table_name, MutateSpec mutate_spec, List<Cell> cells)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("offer_cells", TMessageType.Call, seqid_));
        offer_cells_args args = new offer_cells_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Mutate_spec = mutate_spec;
        args.Cells = cells;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_offer_cells()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        offer_cells_result result = new offer_cells_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_shared_mutator_set_cells_as_arrays(AsyncCallback callback, object state, long ns, string table_name, MutateSpec mutate_spec, List<List<string>> cells)
      {
        return send_shared_mutator_set_cells_as_arrays(callback, state, ns, table_name, mutate_spec, cells);
      }

      public void End_shared_mutator_set_cells_as_arrays(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_shared_mutator_set_cells_as_arrays();
      }

      #endif

      /// <summary>
      /// Alternative to offer_cell interface using array as cell
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      /// <param name="mutate_spec"></param>
      /// <param name="cells"></param>
      public void shared_mutator_set_cells_as_arrays(long ns, string table_name, MutateSpec mutate_spec, List<List<string>> cells)
      {
        #if !SILVERLIGHT
        send_shared_mutator_set_cells_as_arrays(ns, table_name, mutate_spec, cells);
        recv_shared_mutator_set_cells_as_arrays();

        #else
        var asyncResult = Begin_shared_mutator_set_cells_as_arrays(null, null, ns, table_name, mutate_spec, cells);
        End_shared_mutator_set_cells_as_arrays(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_shared_mutator_set_cells_as_arrays(AsyncCallback callback, object state, long ns, string table_name, MutateSpec mutate_spec, List<List<string>> cells)
      #else
      public void send_shared_mutator_set_cells_as_arrays(long ns, string table_name, MutateSpec mutate_spec, List<List<string>> cells)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("shared_mutator_set_cells_as_arrays", TMessageType.Call, seqid_));
        shared_mutator_set_cells_as_arrays_args args = new shared_mutator_set_cells_as_arrays_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Mutate_spec = mutate_spec;
        args.Cells = cells;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_shared_mutator_set_cells_as_arrays()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        shared_mutator_set_cells_as_arrays_result result = new shared_mutator_set_cells_as_arrays_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_offer_cells_as_arrays(AsyncCallback callback, object state, long ns, string table_name, MutateSpec mutate_spec, List<List<string>> cells)
      {
        return send_offer_cells_as_arrays(callback, state, ns, table_name, mutate_spec, cells);
      }

      public void End_offer_cells_as_arrays(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_offer_cells_as_arrays();
      }

      #endif

      public void offer_cells_as_arrays(long ns, string table_name, MutateSpec mutate_spec, List<List<string>> cells)
      {
        #if !SILVERLIGHT
        send_offer_cells_as_arrays(ns, table_name, mutate_spec, cells);
        recv_offer_cells_as_arrays();

        #else
        var asyncResult = Begin_offer_cells_as_arrays(null, null, ns, table_name, mutate_spec, cells);
        End_offer_cells_as_arrays(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_offer_cells_as_arrays(AsyncCallback callback, object state, long ns, string table_name, MutateSpec mutate_spec, List<List<string>> cells)
      #else
      public void send_offer_cells_as_arrays(long ns, string table_name, MutateSpec mutate_spec, List<List<string>> cells)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("offer_cells_as_arrays", TMessageType.Call, seqid_));
        offer_cells_as_arrays_args args = new offer_cells_as_arrays_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Mutate_spec = mutate_spec;
        args.Cells = cells;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_offer_cells_as_arrays()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        offer_cells_as_arrays_result result = new offer_cells_as_arrays_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_shared_mutator_set_cell(AsyncCallback callback, object state, long ns, string table_name, MutateSpec mutate_spec, Cell cell)
      {
        return send_shared_mutator_set_cell(callback, state, ns, table_name, mutate_spec, cell);
      }

      public void End_shared_mutator_set_cell(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_shared_mutator_set_cell();
      }

      #endif

      /// <summary>
      /// Open a shared periodic mutator which causes cells to be written asyncronously.
      /// Users beware: calling this method merely writes
      /// cells to a local buffer and does not guarantee that the cells have been persisted.
      /// If you want guaranteed durability, use the open_mutator+set_cells* interface instead.
      /// 
      /// @param ns - namespace id
      /// 
      /// @param table_name - table name
      /// 
      /// @param mutate_spec - mutator specification
      /// 
      /// @param cell - cell to be written
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      /// <param name="mutate_spec"></param>
      /// <param name="cell"></param>
      public void shared_mutator_set_cell(long ns, string table_name, MutateSpec mutate_spec, Cell cell)
      {
        #if !SILVERLIGHT
        send_shared_mutator_set_cell(ns, table_name, mutate_spec, cell);
        recv_shared_mutator_set_cell();

        #else
        var asyncResult = Begin_shared_mutator_set_cell(null, null, ns, table_name, mutate_spec, cell);
        End_shared_mutator_set_cell(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_shared_mutator_set_cell(AsyncCallback callback, object state, long ns, string table_name, MutateSpec mutate_spec, Cell cell)
      #else
      public void send_shared_mutator_set_cell(long ns, string table_name, MutateSpec mutate_spec, Cell cell)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("shared_mutator_set_cell", TMessageType.Call, seqid_));
        shared_mutator_set_cell_args args = new shared_mutator_set_cell_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Mutate_spec = mutate_spec;
        args.Cell = cell;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_shared_mutator_set_cell()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        shared_mutator_set_cell_result result = new shared_mutator_set_cell_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_offer_cell(AsyncCallback callback, object state, long ns, string table_name, MutateSpec mutate_spec, Cell cell)
      {
        return send_offer_cell(callback, state, ns, table_name, mutate_spec, cell);
      }

      public void End_offer_cell(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_offer_cell();
      }

      #endif

      public void offer_cell(long ns, string table_name, MutateSpec mutate_spec, Cell cell)
      {
        #if !SILVERLIGHT
        send_offer_cell(ns, table_name, mutate_spec, cell);
        recv_offer_cell();

        #else
        var asyncResult = Begin_offer_cell(null, null, ns, table_name, mutate_spec, cell);
        End_offer_cell(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_offer_cell(AsyncCallback callback, object state, long ns, string table_name, MutateSpec mutate_spec, Cell cell)
      #else
      public void send_offer_cell(long ns, string table_name, MutateSpec mutate_spec, Cell cell)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("offer_cell", TMessageType.Call, seqid_));
        offer_cell_args args = new offer_cell_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Mutate_spec = mutate_spec;
        args.Cell = cell;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_offer_cell()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        offer_cell_result result = new offer_cell_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_shared_mutator_set_cell_as_array(AsyncCallback callback, object state, long ns, string table_name, MutateSpec mutate_spec, List<string> cell)
      {
        return send_shared_mutator_set_cell_as_array(callback, state, ns, table_name, mutate_spec, cell);
      }

      public void End_shared_mutator_set_cell_as_array(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_shared_mutator_set_cell_as_array();
      }

      #endif

      /// <summary>
      /// Alternative to offer_cell interface using array as cell
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      /// <param name="mutate_spec"></param>
      /// <param name="cell"></param>
      public void shared_mutator_set_cell_as_array(long ns, string table_name, MutateSpec mutate_spec, List<string> cell)
      {
        #if !SILVERLIGHT
        send_shared_mutator_set_cell_as_array(ns, table_name, mutate_spec, cell);
        recv_shared_mutator_set_cell_as_array();

        #else
        var asyncResult = Begin_shared_mutator_set_cell_as_array(null, null, ns, table_name, mutate_spec, cell);
        End_shared_mutator_set_cell_as_array(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_shared_mutator_set_cell_as_array(AsyncCallback callback, object state, long ns, string table_name, MutateSpec mutate_spec, List<string> cell)
      #else
      public void send_shared_mutator_set_cell_as_array(long ns, string table_name, MutateSpec mutate_spec, List<string> cell)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("shared_mutator_set_cell_as_array", TMessageType.Call, seqid_));
        shared_mutator_set_cell_as_array_args args = new shared_mutator_set_cell_as_array_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Mutate_spec = mutate_spec;
        args.Cell = cell;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_shared_mutator_set_cell_as_array()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        shared_mutator_set_cell_as_array_result result = new shared_mutator_set_cell_as_array_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_offer_cell_as_array(AsyncCallback callback, object state, long ns, string table_name, MutateSpec mutate_spec, List<string> cell)
      {
        return send_offer_cell_as_array(callback, state, ns, table_name, mutate_spec, cell);
      }

      public void End_offer_cell_as_array(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_offer_cell_as_array();
      }

      #endif

      public void offer_cell_as_array(long ns, string table_name, MutateSpec mutate_spec, List<string> cell)
      {
        #if !SILVERLIGHT
        send_offer_cell_as_array(ns, table_name, mutate_spec, cell);
        recv_offer_cell_as_array();

        #else
        var asyncResult = Begin_offer_cell_as_array(null, null, ns, table_name, mutate_spec, cell);
        End_offer_cell_as_array(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_offer_cell_as_array(AsyncCallback callback, object state, long ns, string table_name, MutateSpec mutate_spec, List<string> cell)
      #else
      public void send_offer_cell_as_array(long ns, string table_name, MutateSpec mutate_spec, List<string> cell)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("offer_cell_as_array", TMessageType.Call, seqid_));
        offer_cell_as_array_args args = new offer_cell_as_array_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Mutate_spec = mutate_spec;
        args.Cell = cell;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_offer_cell_as_array()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        offer_cell_as_array_result result = new offer_cell_as_array_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_mutator_open(AsyncCallback callback, object state, long ns, string table_name, int flags, int flush_interval)
      {
        return send_mutator_open(callback, state, ns, table_name, flags, flush_interval);
      }

      public long End_mutator_open(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_mutator_open();
      }

      #endif

      /// <summary>
      /// Open a table mutator
      /// 
      /// @param ns - namespace id
      /// 
      /// @param table_name - table name
      /// 
      /// @param flags - mutator flags
      /// 
      /// @param flush_interval - auto-flush interval in milliseconds; 0 disables it.
      /// 
      /// @return mutator id
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      /// <param name="flags"></param>
      /// <param name="flush_interval"></param>
      public long mutator_open(long ns, string table_name, int flags, int flush_interval)
      {
        #if !SILVERLIGHT
        send_mutator_open(ns, table_name, flags, flush_interval);
        return recv_mutator_open();

        #else
        var asyncResult = Begin_mutator_open(null, null, ns, table_name, flags, flush_interval);
        return End_mutator_open(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_mutator_open(AsyncCallback callback, object state, long ns, string table_name, int flags, int flush_interval)
      #else
      public void send_mutator_open(long ns, string table_name, int flags, int flush_interval)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("mutator_open", TMessageType.Call, seqid_));
        mutator_open_args args = new mutator_open_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Flags = flags;
        args.Flush_interval = flush_interval;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public long recv_mutator_open()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        mutator_open_result result = new mutator_open_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "mutator_open failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_open_mutator(AsyncCallback callback, object state, long ns, string table_name, int flags, int flush_interval)
      {
        return send_open_mutator(callback, state, ns, table_name, flags, flush_interval);
      }

      public long End_open_mutator(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_open_mutator();
      }

      #endif

      public long open_mutator(long ns, string table_name, int flags, int flush_interval)
      {
        #if !SILVERLIGHT
        send_open_mutator(ns, table_name, flags, flush_interval);
        return recv_open_mutator();

        #else
        var asyncResult = Begin_open_mutator(null, null, ns, table_name, flags, flush_interval);
        return End_open_mutator(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_open_mutator(AsyncCallback callback, object state, long ns, string table_name, int flags, int flush_interval)
      #else
      public void send_open_mutator(long ns, string table_name, int flags, int flush_interval)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("open_mutator", TMessageType.Call, seqid_));
        open_mutator_args args = new open_mutator_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Flags = flags;
        args.Flush_interval = flush_interval;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public long recv_open_mutator()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        open_mutator_result result = new open_mutator_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "open_mutator failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_async_mutator_open(AsyncCallback callback, object state, long ns, string table_name, long future, int flags)
      {
        return send_async_mutator_open(callback, state, ns, table_name, future, flags);
      }

      public long End_async_mutator_open(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_async_mutator_open();
      }

      #endif

      /// <summary>
      /// Open an asynchronous table mutator
      /// 
      /// @param ns - namespace id
      /// @param table_name - table name
      /// @param future - callback object
      /// @param flags - mutator flags
      /// 
      /// @return mutator id
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      /// <param name="future"></param>
      /// <param name="flags"></param>
      public long async_mutator_open(long ns, string table_name, long future, int flags)
      {
        #if !SILVERLIGHT
        send_async_mutator_open(ns, table_name, future, flags);
        return recv_async_mutator_open();

        #else
        var asyncResult = Begin_async_mutator_open(null, null, ns, table_name, future, flags);
        return End_async_mutator_open(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_async_mutator_open(AsyncCallback callback, object state, long ns, string table_name, long future, int flags)
      #else
      public void send_async_mutator_open(long ns, string table_name, long future, int flags)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("async_mutator_open", TMessageType.Call, seqid_));
        async_mutator_open_args args = new async_mutator_open_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Future = future;
        args.Flags = flags;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public long recv_async_mutator_open()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        async_mutator_open_result result = new async_mutator_open_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "async_mutator_open failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_open_mutator_async(AsyncCallback callback, object state, long ns, string table_name, long future, int flags)
      {
        return send_open_mutator_async(callback, state, ns, table_name, future, flags);
      }

      public long End_open_mutator_async(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_open_mutator_async();
      }

      #endif

      public long open_mutator_async(long ns, string table_name, long future, int flags)
      {
        #if !SILVERLIGHT
        send_open_mutator_async(ns, table_name, future, flags);
        return recv_open_mutator_async();

        #else
        var asyncResult = Begin_open_mutator_async(null, null, ns, table_name, future, flags);
        return End_open_mutator_async(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_open_mutator_async(AsyncCallback callback, object state, long ns, string table_name, long future, int flags)
      #else
      public void send_open_mutator_async(long ns, string table_name, long future, int flags)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("open_mutator_async", TMessageType.Call, seqid_));
        open_mutator_async_args args = new open_mutator_async_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Future = future;
        args.Flags = flags;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public long recv_open_mutator_async()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        open_mutator_async_result result = new open_mutator_async_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "open_mutator_async failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_mutator_close(AsyncCallback callback, object state, long mutator)
      {
        return send_mutator_close(callback, state, mutator);
      }

      public void End_mutator_close(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_mutator_close();
      }

      #endif

      /// <summary>
      /// Close a table mutator
      /// 
      /// @param mutator - mutator id to close
      /// </summary>
      /// <param name="mutator"></param>
      public void mutator_close(long mutator)
      {
        #if !SILVERLIGHT
        send_mutator_close(mutator);
        recv_mutator_close();

        #else
        var asyncResult = Begin_mutator_close(null, null, mutator);
        End_mutator_close(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_mutator_close(AsyncCallback callback, object state, long mutator)
      #else
      public void send_mutator_close(long mutator)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("mutator_close", TMessageType.Call, seqid_));
        mutator_close_args args = new mutator_close_args();
        args.Mutator = mutator;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_mutator_close()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        mutator_close_result result = new mutator_close_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_close_mutator(AsyncCallback callback, object state, long mutator)
      {
        return send_close_mutator(callback, state, mutator);
      }

      public void End_close_mutator(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_close_mutator();
      }

      #endif

      public void close_mutator(long mutator)
      {
        #if !SILVERLIGHT
        send_close_mutator(mutator);
        recv_close_mutator();

        #else
        var asyncResult = Begin_close_mutator(null, null, mutator);
        End_close_mutator(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_close_mutator(AsyncCallback callback, object state, long mutator)
      #else
      public void send_close_mutator(long mutator)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("close_mutator", TMessageType.Call, seqid_));
        close_mutator_args args = new close_mutator_args();
        args.Mutator = mutator;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_close_mutator()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        close_mutator_result result = new close_mutator_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_async_mutator_cancel(AsyncCallback callback, object state, long mutator)
      {
        return send_async_mutator_cancel(callback, state, mutator);
      }

      public void End_async_mutator_cancel(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_async_mutator_cancel();
      }

      #endif

      /// <summary>
      /// Cancel an asynchronous table mutator
      /// 
      /// @param mutator -  mutator id to cancel
      /// </summary>
      /// <param name="mutator"></param>
      public void async_mutator_cancel(long mutator)
      {
        #if !SILVERLIGHT
        send_async_mutator_cancel(mutator);
        recv_async_mutator_cancel();

        #else
        var asyncResult = Begin_async_mutator_cancel(null, null, mutator);
        End_async_mutator_cancel(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_async_mutator_cancel(AsyncCallback callback, object state, long mutator)
      #else
      public void send_async_mutator_cancel(long mutator)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("async_mutator_cancel", TMessageType.Call, seqid_));
        async_mutator_cancel_args args = new async_mutator_cancel_args();
        args.Mutator = mutator;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_async_mutator_cancel()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        async_mutator_cancel_result result = new async_mutator_cancel_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_cancel_mutator_async(AsyncCallback callback, object state, long mutator)
      {
        return send_cancel_mutator_async(callback, state, mutator);
      }

      public void End_cancel_mutator_async(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_cancel_mutator_async();
      }

      #endif

      public void cancel_mutator_async(long mutator)
      {
        #if !SILVERLIGHT
        send_cancel_mutator_async(mutator);
        recv_cancel_mutator_async();

        #else
        var asyncResult = Begin_cancel_mutator_async(null, null, mutator);
        End_cancel_mutator_async(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_cancel_mutator_async(AsyncCallback callback, object state, long mutator)
      #else
      public void send_cancel_mutator_async(long mutator)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("cancel_mutator_async", TMessageType.Call, seqid_));
        cancel_mutator_async_args args = new cancel_mutator_async_args();
        args.Mutator = mutator;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_cancel_mutator_async()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        cancel_mutator_async_result result = new cancel_mutator_async_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_async_mutator_close(AsyncCallback callback, object state, long mutator)
      {
        return send_async_mutator_close(callback, state, mutator);
      }

      public void End_async_mutator_close(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_async_mutator_close();
      }

      #endif

      /// <summary>
      /// Close an asynchronous table mutator
      /// 
      /// @param mutator - mutator id to close
      /// </summary>
      /// <param name="mutator"></param>
      public void async_mutator_close(long mutator)
      {
        #if !SILVERLIGHT
        send_async_mutator_close(mutator);
        recv_async_mutator_close();

        #else
        var asyncResult = Begin_async_mutator_close(null, null, mutator);
        End_async_mutator_close(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_async_mutator_close(AsyncCallback callback, object state, long mutator)
      #else
      public void send_async_mutator_close(long mutator)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("async_mutator_close", TMessageType.Call, seqid_));
        async_mutator_close_args args = new async_mutator_close_args();
        args.Mutator = mutator;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_async_mutator_close()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        async_mutator_close_result result = new async_mutator_close_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_close_mutator_async(AsyncCallback callback, object state, long mutator)
      {
        return send_close_mutator_async(callback, state, mutator);
      }

      public void End_close_mutator_async(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_close_mutator_async();
      }

      #endif

      public void close_mutator_async(long mutator)
      {
        #if !SILVERLIGHT
        send_close_mutator_async(mutator);
        recv_close_mutator_async();

        #else
        var asyncResult = Begin_close_mutator_async(null, null, mutator);
        End_close_mutator_async(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_close_mutator_async(AsyncCallback callback, object state, long mutator)
      #else
      public void send_close_mutator_async(long mutator)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("close_mutator_async", TMessageType.Call, seqid_));
        close_mutator_async_args args = new close_mutator_async_args();
        args.Mutator = mutator;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_close_mutator_async()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        close_mutator_async_result result = new close_mutator_async_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_mutator_set_cell(AsyncCallback callback, object state, long mutator, Cell cell)
      {
        return send_mutator_set_cell(callback, state, mutator, cell);
      }

      public void End_mutator_set_cell(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_mutator_set_cell();
      }

      #endif

      /// <summary>
      /// Set a cell via mutator
      /// 
      /// @param mutator - mutator id
      /// 
      /// @param cell - the cell to set
      /// </summary>
      /// <param name="mutator"></param>
      /// <param name="cell"></param>
      public void mutator_set_cell(long mutator, Cell cell)
      {
        #if !SILVERLIGHT
        send_mutator_set_cell(mutator, cell);
        recv_mutator_set_cell();

        #else
        var asyncResult = Begin_mutator_set_cell(null, null, mutator, cell);
        End_mutator_set_cell(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_mutator_set_cell(AsyncCallback callback, object state, long mutator, Cell cell)
      #else
      public void send_mutator_set_cell(long mutator, Cell cell)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("mutator_set_cell", TMessageType.Call, seqid_));
        mutator_set_cell_args args = new mutator_set_cell_args();
        args.Mutator = mutator;
        args.Cell = cell;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_mutator_set_cell()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        mutator_set_cell_result result = new mutator_set_cell_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_set_cell(AsyncCallback callback, object state, long ns, string table_name, Cell cell)
      {
        return send_set_cell(callback, state, ns, table_name, cell);
      }

      public void End_set_cell(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_set_cell();
      }

      #endif

      /// <summary>
      /// Set a cell in the table
      /// 
      /// @param ns - namespace id
      /// 
      /// @param table_name - table name
      /// 
      /// @param cell - the cell to set
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      /// <param name="cell"></param>
      public void set_cell(long ns, string table_name, Cell cell)
      {
        #if !SILVERLIGHT
        send_set_cell(ns, table_name, cell);
        recv_set_cell();

        #else
        var asyncResult = Begin_set_cell(null, null, ns, table_name, cell);
        End_set_cell(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_set_cell(AsyncCallback callback, object state, long ns, string table_name, Cell cell)
      #else
      public void send_set_cell(long ns, string table_name, Cell cell)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("set_cell", TMessageType.Call, seqid_));
        set_cell_args args = new set_cell_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Cell = cell;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_set_cell()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        set_cell_result result = new set_cell_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_mutator_set_cell_as_array(AsyncCallback callback, object state, long mutator, List<string> cell)
      {
        return send_mutator_set_cell_as_array(callback, state, mutator, cell);
      }

      public void End_mutator_set_cell_as_array(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_mutator_set_cell_as_array();
      }

      #endif

      /// <summary>
      /// Alternative interface using array as cell
      /// </summary>
      /// <param name="mutator"></param>
      /// <param name="cell"></param>
      public void mutator_set_cell_as_array(long mutator, List<string> cell)
      {
        #if !SILVERLIGHT
        send_mutator_set_cell_as_array(mutator, cell);
        recv_mutator_set_cell_as_array();

        #else
        var asyncResult = Begin_mutator_set_cell_as_array(null, null, mutator, cell);
        End_mutator_set_cell_as_array(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_mutator_set_cell_as_array(AsyncCallback callback, object state, long mutator, List<string> cell)
      #else
      public void send_mutator_set_cell_as_array(long mutator, List<string> cell)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("mutator_set_cell_as_array", TMessageType.Call, seqid_));
        mutator_set_cell_as_array_args args = new mutator_set_cell_as_array_args();
        args.Mutator = mutator;
        args.Cell = cell;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_mutator_set_cell_as_array()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        mutator_set_cell_as_array_result result = new mutator_set_cell_as_array_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_set_cell_as_array(AsyncCallback callback, object state, long ns, string table_name, List<string> cell)
      {
        return send_set_cell_as_array(callback, state, ns, table_name, cell);
      }

      public void End_set_cell_as_array(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_set_cell_as_array();
      }

      #endif

      /// <summary>
      /// Alternative interface using array as cell
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      /// <param name="cell"></param>
      public void set_cell_as_array(long ns, string table_name, List<string> cell)
      {
        #if !SILVERLIGHT
        send_set_cell_as_array(ns, table_name, cell);
        recv_set_cell_as_array();

        #else
        var asyncResult = Begin_set_cell_as_array(null, null, ns, table_name, cell);
        End_set_cell_as_array(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_set_cell_as_array(AsyncCallback callback, object state, long ns, string table_name, List<string> cell)
      #else
      public void send_set_cell_as_array(long ns, string table_name, List<string> cell)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("set_cell_as_array", TMessageType.Call, seqid_));
        set_cell_as_array_args args = new set_cell_as_array_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Cell = cell;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_set_cell_as_array()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        set_cell_as_array_result result = new set_cell_as_array_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_mutator_set_cells(AsyncCallback callback, object state, long mutator, List<Cell> cells)
      {
        return send_mutator_set_cells(callback, state, mutator, cells);
      }

      public void End_mutator_set_cells(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_mutator_set_cells();
      }

      #endif

      /// <summary>
      /// Put a list of cells into a table via mutator
      /// 
      /// @param mutator - mutator id
      /// 
      /// @param cells - a list of cells (a cell with no row key set is assumed
      ///        to have the same row key as the previous cell)
      /// </summary>
      /// <param name="mutator"></param>
      /// <param name="cells"></param>
      public void mutator_set_cells(long mutator, List<Cell> cells)
      {
        #if !SILVERLIGHT
        send_mutator_set_cells(mutator, cells);
        recv_mutator_set_cells();

        #else
        var asyncResult = Begin_mutator_set_cells(null, null, mutator, cells);
        End_mutator_set_cells(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_mutator_set_cells(AsyncCallback callback, object state, long mutator, List<Cell> cells)
      #else
      public void send_mutator_set_cells(long mutator, List<Cell> cells)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("mutator_set_cells", TMessageType.Call, seqid_));
        mutator_set_cells_args args = new mutator_set_cells_args();
        args.Mutator = mutator;
        args.Cells = cells;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_mutator_set_cells()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        mutator_set_cells_result result = new mutator_set_cells_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_set_cells(AsyncCallback callback, object state, long ns, string table_name, List<Cell> cells)
      {
        return send_set_cells(callback, state, ns, table_name, cells);
      }

      public void End_set_cells(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_set_cells();
      }

      #endif

      /// <summary>
      /// Put a list of cells into a table
      /// 
      /// @param ns - namespace id
      /// 
      /// @param table_name - table name
      /// 
      /// @param cells - a list of cells (a cell with no row key set is assumed
      ///        to have the same row key as the previous cell)
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      /// <param name="cells"></param>
      public void set_cells(long ns, string table_name, List<Cell> cells)
      {
        #if !SILVERLIGHT
        send_set_cells(ns, table_name, cells);
        recv_set_cells();

        #else
        var asyncResult = Begin_set_cells(null, null, ns, table_name, cells);
        End_set_cells(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_set_cells(AsyncCallback callback, object state, long ns, string table_name, List<Cell> cells)
      #else
      public void send_set_cells(long ns, string table_name, List<Cell> cells)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("set_cells", TMessageType.Call, seqid_));
        set_cells_args args = new set_cells_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Cells = cells;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_set_cells()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        set_cells_result result = new set_cells_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_mutator_set_cells_as_arrays(AsyncCallback callback, object state, long mutator, List<List<string>> cells)
      {
        return send_mutator_set_cells_as_arrays(callback, state, mutator, cells);
      }

      public void End_mutator_set_cells_as_arrays(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_mutator_set_cells_as_arrays();
      }

      #endif

      /// <summary>
      /// Alternative interface using array as cell
      /// </summary>
      /// <param name="mutator"></param>
      /// <param name="cells"></param>
      public void mutator_set_cells_as_arrays(long mutator, List<List<string>> cells)
      {
        #if !SILVERLIGHT
        send_mutator_set_cells_as_arrays(mutator, cells);
        recv_mutator_set_cells_as_arrays();

        #else
        var asyncResult = Begin_mutator_set_cells_as_arrays(null, null, mutator, cells);
        End_mutator_set_cells_as_arrays(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_mutator_set_cells_as_arrays(AsyncCallback callback, object state, long mutator, List<List<string>> cells)
      #else
      public void send_mutator_set_cells_as_arrays(long mutator, List<List<string>> cells)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("mutator_set_cells_as_arrays", TMessageType.Call, seqid_));
        mutator_set_cells_as_arrays_args args = new mutator_set_cells_as_arrays_args();
        args.Mutator = mutator;
        args.Cells = cells;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_mutator_set_cells_as_arrays()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        mutator_set_cells_as_arrays_result result = new mutator_set_cells_as_arrays_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_set_cells_as_arrays(AsyncCallback callback, object state, long ns, string table_name, List<List<string>> cells)
      {
        return send_set_cells_as_arrays(callback, state, ns, table_name, cells);
      }

      public void End_set_cells_as_arrays(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_set_cells_as_arrays();
      }

      #endif

      /// <summary>
      /// Alternative interface using array as cell
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      /// <param name="cells"></param>
      public void set_cells_as_arrays(long ns, string table_name, List<List<string>> cells)
      {
        #if !SILVERLIGHT
        send_set_cells_as_arrays(ns, table_name, cells);
        recv_set_cells_as_arrays();

        #else
        var asyncResult = Begin_set_cells_as_arrays(null, null, ns, table_name, cells);
        End_set_cells_as_arrays(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_set_cells_as_arrays(AsyncCallback callback, object state, long ns, string table_name, List<List<string>> cells)
      #else
      public void send_set_cells_as_arrays(long ns, string table_name, List<List<string>> cells)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("set_cells_as_arrays", TMessageType.Call, seqid_));
        set_cells_as_arrays_args args = new set_cells_as_arrays_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Cells = cells;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_set_cells_as_arrays()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        set_cells_as_arrays_result result = new set_cells_as_arrays_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_mutator_set_cells_serialized(AsyncCallback callback, object state, long mutator, byte[] cells, bool flush)
      {
        return send_mutator_set_cells_serialized(callback, state, mutator, cells, flush);
      }

      public void End_mutator_set_cells_serialized(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_mutator_set_cells_serialized();
      }

      #endif

      /// <summary>
      /// Alternative interface using buffer of serialized cells
      /// </summary>
      /// <param name="mutator"></param>
      /// <param name="cells"></param>
      /// <param name="flush"></param>
      public void mutator_set_cells_serialized(long mutator, byte[] cells, bool flush)
      {
        #if !SILVERLIGHT
        send_mutator_set_cells_serialized(mutator, cells, flush);
        recv_mutator_set_cells_serialized();

        #else
        var asyncResult = Begin_mutator_set_cells_serialized(null, null, mutator, cells, flush);
        End_mutator_set_cells_serialized(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_mutator_set_cells_serialized(AsyncCallback callback, object state, long mutator, byte[] cells, bool flush)
      #else
      public void send_mutator_set_cells_serialized(long mutator, byte[] cells, bool flush)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("mutator_set_cells_serialized", TMessageType.Call, seqid_));
        mutator_set_cells_serialized_args args = new mutator_set_cells_serialized_args();
        args.Mutator = mutator;
        args.Cells = cells;
        args.Flush = flush;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_mutator_set_cells_serialized()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        mutator_set_cells_serialized_result result = new mutator_set_cells_serialized_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_set_cells_serialized(AsyncCallback callback, object state, long ns, string table_name, byte[] cells)
      {
        return send_set_cells_serialized(callback, state, ns, table_name, cells);
      }

      public void End_set_cells_serialized(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_set_cells_serialized();
      }

      #endif

      /// <summary>
      /// Alternative interface using buffer of serialized cells
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      /// <param name="cells"></param>
      public void set_cells_serialized(long ns, string table_name, byte[] cells)
      {
        #if !SILVERLIGHT
        send_set_cells_serialized(ns, table_name, cells);
        recv_set_cells_serialized();

        #else
        var asyncResult = Begin_set_cells_serialized(null, null, ns, table_name, cells);
        End_set_cells_serialized(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_set_cells_serialized(AsyncCallback callback, object state, long ns, string table_name, byte[] cells)
      #else
      public void send_set_cells_serialized(long ns, string table_name, byte[] cells)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("set_cells_serialized", TMessageType.Call, seqid_));
        set_cells_serialized_args args = new set_cells_serialized_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Cells = cells;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_set_cells_serialized()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        set_cells_serialized_result result = new set_cells_serialized_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_mutator_flush(AsyncCallback callback, object state, long mutator)
      {
        return send_mutator_flush(callback, state, mutator);
      }

      public void End_mutator_flush(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_mutator_flush();
      }

      #endif

      /// <summary>
      /// Flush mutator buffers
      /// </summary>
      /// <param name="mutator"></param>
      public void mutator_flush(long mutator)
      {
        #if !SILVERLIGHT
        send_mutator_flush(mutator);
        recv_mutator_flush();

        #else
        var asyncResult = Begin_mutator_flush(null, null, mutator);
        End_mutator_flush(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_mutator_flush(AsyncCallback callback, object state, long mutator)
      #else
      public void send_mutator_flush(long mutator)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("mutator_flush", TMessageType.Call, seqid_));
        mutator_flush_args args = new mutator_flush_args();
        args.Mutator = mutator;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_mutator_flush()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        mutator_flush_result result = new mutator_flush_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_flush_mutator(AsyncCallback callback, object state, long mutator)
      {
        return send_flush_mutator(callback, state, mutator);
      }

      public void End_flush_mutator(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_flush_mutator();
      }

      #endif

      public void flush_mutator(long mutator)
      {
        #if !SILVERLIGHT
        send_flush_mutator(mutator);
        recv_flush_mutator();

        #else
        var asyncResult = Begin_flush_mutator(null, null, mutator);
        End_flush_mutator(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_flush_mutator(AsyncCallback callback, object state, long mutator)
      #else
      public void send_flush_mutator(long mutator)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("flush_mutator", TMessageType.Call, seqid_));
        flush_mutator_args args = new flush_mutator_args();
        args.Mutator = mutator;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_flush_mutator()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        flush_mutator_result result = new flush_mutator_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_async_mutator_set_cell(AsyncCallback callback, object state, long mutator, Cell cell)
      {
        return send_async_mutator_set_cell(callback, state, mutator, cell);
      }

      public void End_async_mutator_set_cell(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_async_mutator_set_cell();
      }

      #endif

      /// <summary>
      /// Set a cell in the table using an asynchonous mutator
      /// 
      /// @param mutator - mutator id
      /// 
      /// @param cell - the cell to set
      /// </summary>
      /// <param name="mutator"></param>
      /// <param name="cell"></param>
      public void async_mutator_set_cell(long mutator, Cell cell)
      {
        #if !SILVERLIGHT
        send_async_mutator_set_cell(mutator, cell);
        recv_async_mutator_set_cell();

        #else
        var asyncResult = Begin_async_mutator_set_cell(null, null, mutator, cell);
        End_async_mutator_set_cell(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_async_mutator_set_cell(AsyncCallback callback, object state, long mutator, Cell cell)
      #else
      public void send_async_mutator_set_cell(long mutator, Cell cell)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("async_mutator_set_cell", TMessageType.Call, seqid_));
        async_mutator_set_cell_args args = new async_mutator_set_cell_args();
        args.Mutator = mutator;
        args.Cell = cell;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_async_mutator_set_cell()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        async_mutator_set_cell_result result = new async_mutator_set_cell_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_set_cell_async(AsyncCallback callback, object state, long mutator, Cell cell)
      {
        return send_set_cell_async(callback, state, mutator, cell);
      }

      public void End_set_cell_async(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_set_cell_async();
      }

      #endif

      public void set_cell_async(long mutator, Cell cell)
      {
        #if !SILVERLIGHT
        send_set_cell_async(mutator, cell);
        recv_set_cell_async();

        #else
        var asyncResult = Begin_set_cell_async(null, null, mutator, cell);
        End_set_cell_async(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_set_cell_async(AsyncCallback callback, object state, long mutator, Cell cell)
      #else
      public void send_set_cell_async(long mutator, Cell cell)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("set_cell_async", TMessageType.Call, seqid_));
        set_cell_async_args args = new set_cell_async_args();
        args.Mutator = mutator;
        args.Cell = cell;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_set_cell_async()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        set_cell_async_result result = new set_cell_async_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_async_mutator_set_cell_as_array(AsyncCallback callback, object state, long mutator, List<string> cell)
      {
        return send_async_mutator_set_cell_as_array(callback, state, mutator, cell);
      }

      public void End_async_mutator_set_cell_as_array(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_async_mutator_set_cell_as_array();
      }

      #endif

      /// <summary>
      /// Alternative interface using array as cell using an asynchonous mutator
      /// </summary>
      /// <param name="mutator"></param>
      /// <param name="cell"></param>
      public void async_mutator_set_cell_as_array(long mutator, List<string> cell)
      {
        #if !SILVERLIGHT
        send_async_mutator_set_cell_as_array(mutator, cell);
        recv_async_mutator_set_cell_as_array();

        #else
        var asyncResult = Begin_async_mutator_set_cell_as_array(null, null, mutator, cell);
        End_async_mutator_set_cell_as_array(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_async_mutator_set_cell_as_array(AsyncCallback callback, object state, long mutator, List<string> cell)
      #else
      public void send_async_mutator_set_cell_as_array(long mutator, List<string> cell)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("async_mutator_set_cell_as_array", TMessageType.Call, seqid_));
        async_mutator_set_cell_as_array_args args = new async_mutator_set_cell_as_array_args();
        args.Mutator = mutator;
        args.Cell = cell;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_async_mutator_set_cell_as_array()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        async_mutator_set_cell_as_array_result result = new async_mutator_set_cell_as_array_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_set_cell_as_array_async(AsyncCallback callback, object state, long mutator, List<string> cell)
      {
        return send_set_cell_as_array_async(callback, state, mutator, cell);
      }

      public void End_set_cell_as_array_async(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_set_cell_as_array_async();
      }

      #endif

      public void set_cell_as_array_async(long mutator, List<string> cell)
      {
        #if !SILVERLIGHT
        send_set_cell_as_array_async(mutator, cell);
        recv_set_cell_as_array_async();

        #else
        var asyncResult = Begin_set_cell_as_array_async(null, null, mutator, cell);
        End_set_cell_as_array_async(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_set_cell_as_array_async(AsyncCallback callback, object state, long mutator, List<string> cell)
      #else
      public void send_set_cell_as_array_async(long mutator, List<string> cell)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("set_cell_as_array_async", TMessageType.Call, seqid_));
        set_cell_as_array_async_args args = new set_cell_as_array_async_args();
        args.Mutator = mutator;
        args.Cell = cell;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_set_cell_as_array_async()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        set_cell_as_array_async_result result = new set_cell_as_array_async_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_async_mutator_set_cells(AsyncCallback callback, object state, long mutator, List<Cell> cells)
      {
        return send_async_mutator_set_cells(callback, state, mutator, cells);
      }

      public void End_async_mutator_set_cells(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_async_mutator_set_cells();
      }

      #endif

      /// <summary>
      /// Put a list of cells into a table using asynchonous mutator
      /// 
      /// @param mutator - mutator id
      /// 
      /// @param cells - a list of cells (a cell with no row key set is assumed
      ///        to have the same row key as the previous cell)
      /// </summary>
      /// <param name="mutator"></param>
      /// <param name="cells"></param>
      public void async_mutator_set_cells(long mutator, List<Cell> cells)
      {
        #if !SILVERLIGHT
        send_async_mutator_set_cells(mutator, cells);
        recv_async_mutator_set_cells();

        #else
        var asyncResult = Begin_async_mutator_set_cells(null, null, mutator, cells);
        End_async_mutator_set_cells(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_async_mutator_set_cells(AsyncCallback callback, object state, long mutator, List<Cell> cells)
      #else
      public void send_async_mutator_set_cells(long mutator, List<Cell> cells)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("async_mutator_set_cells", TMessageType.Call, seqid_));
        async_mutator_set_cells_args args = new async_mutator_set_cells_args();
        args.Mutator = mutator;
        args.Cells = cells;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_async_mutator_set_cells()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        async_mutator_set_cells_result result = new async_mutator_set_cells_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_set_cells_async(AsyncCallback callback, object state, long mutator, List<Cell> cells)
      {
        return send_set_cells_async(callback, state, mutator, cells);
      }

      public void End_set_cells_async(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_set_cells_async();
      }

      #endif

      public void set_cells_async(long mutator, List<Cell> cells)
      {
        #if !SILVERLIGHT
        send_set_cells_async(mutator, cells);
        recv_set_cells_async();

        #else
        var asyncResult = Begin_set_cells_async(null, null, mutator, cells);
        End_set_cells_async(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_set_cells_async(AsyncCallback callback, object state, long mutator, List<Cell> cells)
      #else
      public void send_set_cells_async(long mutator, List<Cell> cells)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("set_cells_async", TMessageType.Call, seqid_));
        set_cells_async_args args = new set_cells_async_args();
        args.Mutator = mutator;
        args.Cells = cells;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_set_cells_async()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        set_cells_async_result result = new set_cells_async_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_async_mutator_set_cells_as_arrays(AsyncCallback callback, object state, long mutator, List<List<string>> cells)
      {
        return send_async_mutator_set_cells_as_arrays(callback, state, mutator, cells);
      }

      public void End_async_mutator_set_cells_as_arrays(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_async_mutator_set_cells_as_arrays();
      }

      #endif

      /// <summary>
      /// Alternative interface using array as cell
      /// </summary>
      /// <param name="mutator"></param>
      /// <param name="cells"></param>
      public void async_mutator_set_cells_as_arrays(long mutator, List<List<string>> cells)
      {
        #if !SILVERLIGHT
        send_async_mutator_set_cells_as_arrays(mutator, cells);
        recv_async_mutator_set_cells_as_arrays();

        #else
        var asyncResult = Begin_async_mutator_set_cells_as_arrays(null, null, mutator, cells);
        End_async_mutator_set_cells_as_arrays(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_async_mutator_set_cells_as_arrays(AsyncCallback callback, object state, long mutator, List<List<string>> cells)
      #else
      public void send_async_mutator_set_cells_as_arrays(long mutator, List<List<string>> cells)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("async_mutator_set_cells_as_arrays", TMessageType.Call, seqid_));
        async_mutator_set_cells_as_arrays_args args = new async_mutator_set_cells_as_arrays_args();
        args.Mutator = mutator;
        args.Cells = cells;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_async_mutator_set_cells_as_arrays()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        async_mutator_set_cells_as_arrays_result result = new async_mutator_set_cells_as_arrays_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_set_cells_as_arrays_async(AsyncCallback callback, object state, long mutator, List<List<string>> cells)
      {
        return send_set_cells_as_arrays_async(callback, state, mutator, cells);
      }

      public void End_set_cells_as_arrays_async(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_set_cells_as_arrays_async();
      }

      #endif

      public void set_cells_as_arrays_async(long mutator, List<List<string>> cells)
      {
        #if !SILVERLIGHT
        send_set_cells_as_arrays_async(mutator, cells);
        recv_set_cells_as_arrays_async();

        #else
        var asyncResult = Begin_set_cells_as_arrays_async(null, null, mutator, cells);
        End_set_cells_as_arrays_async(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_set_cells_as_arrays_async(AsyncCallback callback, object state, long mutator, List<List<string>> cells)
      #else
      public void send_set_cells_as_arrays_async(long mutator, List<List<string>> cells)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("set_cells_as_arrays_async", TMessageType.Call, seqid_));
        set_cells_as_arrays_async_args args = new set_cells_as_arrays_async_args();
        args.Mutator = mutator;
        args.Cells = cells;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_set_cells_as_arrays_async()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        set_cells_as_arrays_async_result result = new set_cells_as_arrays_async_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_async_mutator_set_cells_serialized(AsyncCallback callback, object state, long mutator, byte[] cells, bool flush)
      {
        return send_async_mutator_set_cells_serialized(callback, state, mutator, cells, flush);
      }

      public void End_async_mutator_set_cells_serialized(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_async_mutator_set_cells_serialized();
      }

      #endif

      /// <summary>
      /// Alternative interface using buffer of serialized cells
      /// </summary>
      /// <param name="mutator"></param>
      /// <param name="cells"></param>
      /// <param name="flush"></param>
      public void async_mutator_set_cells_serialized(long mutator, byte[] cells, bool flush)
      {
        #if !SILVERLIGHT
        send_async_mutator_set_cells_serialized(mutator, cells, flush);
        recv_async_mutator_set_cells_serialized();

        #else
        var asyncResult = Begin_async_mutator_set_cells_serialized(null, null, mutator, cells, flush);
        End_async_mutator_set_cells_serialized(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_async_mutator_set_cells_serialized(AsyncCallback callback, object state, long mutator, byte[] cells, bool flush)
      #else
      public void send_async_mutator_set_cells_serialized(long mutator, byte[] cells, bool flush)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("async_mutator_set_cells_serialized", TMessageType.Call, seqid_));
        async_mutator_set_cells_serialized_args args = new async_mutator_set_cells_serialized_args();
        args.Mutator = mutator;
        args.Cells = cells;
        args.Flush = flush;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_async_mutator_set_cells_serialized()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        async_mutator_set_cells_serialized_result result = new async_mutator_set_cells_serialized_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_set_cells_serialized_async(AsyncCallback callback, object state, long mutator, byte[] cells, bool flush)
      {
        return send_set_cells_serialized_async(callback, state, mutator, cells, flush);
      }

      public void End_set_cells_serialized_async(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_set_cells_serialized_async();
      }

      #endif

      public void set_cells_serialized_async(long mutator, byte[] cells, bool flush)
      {
        #if !SILVERLIGHT
        send_set_cells_serialized_async(mutator, cells, flush);
        recv_set_cells_serialized_async();

        #else
        var asyncResult = Begin_set_cells_serialized_async(null, null, mutator, cells, flush);
        End_set_cells_serialized_async(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_set_cells_serialized_async(AsyncCallback callback, object state, long mutator, byte[] cells, bool flush)
      #else
      public void send_set_cells_serialized_async(long mutator, byte[] cells, bool flush)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("set_cells_serialized_async", TMessageType.Call, seqid_));
        set_cells_serialized_async_args args = new set_cells_serialized_async_args();
        args.Mutator = mutator;
        args.Cells = cells;
        args.Flush = flush;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_set_cells_serialized_async()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        set_cells_serialized_async_result result = new set_cells_serialized_async_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_async_mutator_flush(AsyncCallback callback, object state, long mutator)
      {
        return send_async_mutator_flush(callback, state, mutator);
      }

      public void End_async_mutator_flush(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_async_mutator_flush();
      }

      #endif

      /// <summary>
      /// Flush mutator buffers
      /// </summary>
      /// <param name="mutator"></param>
      public void async_mutator_flush(long mutator)
      {
        #if !SILVERLIGHT
        send_async_mutator_flush(mutator);
        recv_async_mutator_flush();

        #else
        var asyncResult = Begin_async_mutator_flush(null, null, mutator);
        End_async_mutator_flush(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_async_mutator_flush(AsyncCallback callback, object state, long mutator)
      #else
      public void send_async_mutator_flush(long mutator)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("async_mutator_flush", TMessageType.Call, seqid_));
        async_mutator_flush_args args = new async_mutator_flush_args();
        args.Mutator = mutator;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_async_mutator_flush()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        async_mutator_flush_result result = new async_mutator_flush_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_flush_mutator_async(AsyncCallback callback, object state, long mutator)
      {
        return send_flush_mutator_async(callback, state, mutator);
      }

      public void End_flush_mutator_async(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_flush_mutator_async();
      }

      #endif

      public void flush_mutator_async(long mutator)
      {
        #if !SILVERLIGHT
        send_flush_mutator_async(mutator);
        recv_flush_mutator_async();

        #else
        var asyncResult = Begin_flush_mutator_async(null, null, mutator);
        End_flush_mutator_async(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_flush_mutator_async(AsyncCallback callback, object state, long mutator)
      #else
      public void send_flush_mutator_async(long mutator)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("flush_mutator_async", TMessageType.Call, seqid_));
        flush_mutator_async_args args = new flush_mutator_async_args();
        args.Mutator = mutator;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_flush_mutator_async()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        flush_mutator_async_result result = new flush_mutator_async_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_namespace_exists(AsyncCallback callback, object state, string ns)
      {
        return send_namespace_exists(callback, state, ns);
      }

      public bool End_namespace_exists(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_namespace_exists();
      }

      #endif

      /// <summary>
      /// Check if the namespace exists
      /// 
      /// @param ns - namespace name
      /// 
      /// @return true if ns exists, false ow
      /// </summary>
      /// <param name="ns"></param>
      public bool namespace_exists(string ns)
      {
        #if !SILVERLIGHT
        send_namespace_exists(ns);
        return recv_namespace_exists();

        #else
        var asyncResult = Begin_namespace_exists(null, null, ns);
        return End_namespace_exists(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_namespace_exists(AsyncCallback callback, object state, string ns)
      #else
      public void send_namespace_exists(string ns)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("namespace_exists", TMessageType.Call, seqid_));
        namespace_exists_args args = new namespace_exists_args();
        args.Ns = ns;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_namespace_exists()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        namespace_exists_result result = new namespace_exists_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "namespace_exists failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_exists_namespace(AsyncCallback callback, object state, string ns)
      {
        return send_exists_namespace(callback, state, ns);
      }

      public bool End_exists_namespace(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_exists_namespace();
      }

      #endif

      public bool exists_namespace(string ns)
      {
        #if !SILVERLIGHT
        send_exists_namespace(ns);
        return recv_exists_namespace();

        #else
        var asyncResult = Begin_exists_namespace(null, null, ns);
        return End_exists_namespace(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_exists_namespace(AsyncCallback callback, object state, string ns)
      #else
      public void send_exists_namespace(string ns)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("exists_namespace", TMessageType.Call, seqid_));
        exists_namespace_args args = new exists_namespace_args();
        args.Ns = ns;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_exists_namespace()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        exists_namespace_result result = new exists_namespace_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "exists_namespace failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_exists_table(AsyncCallback callback, object state, long ns, string name)
      {
        return send_exists_table(callback, state, ns, name);
      }

      public bool End_exists_table(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_exists_table();
      }

      #endif

      /// <summary>
      /// Check if the table exists
      /// 
      /// @param ns - namespace id
      /// 
      /// @param name - table name
      /// 
      /// @return true if table exists, false ow
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="name"></param>
      public bool exists_table(long ns, string name)
      {
        #if !SILVERLIGHT
        send_exists_table(ns, name);
        return recv_exists_table();

        #else
        var asyncResult = Begin_exists_table(null, null, ns, name);
        return End_exists_table(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_exists_table(AsyncCallback callback, object state, long ns, string name)
      #else
      public void send_exists_table(long ns, string name)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("exists_table", TMessageType.Call, seqid_));
        exists_table_args args = new exists_table_args();
        args.Ns = ns;
        args.Name = name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_exists_table()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        exists_table_result result = new exists_table_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "exists_table failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_table_exists(AsyncCallback callback, object state, long ns, string name)
      {
        return send_table_exists(callback, state, ns, name);
      }

      public bool End_table_exists(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_table_exists();
      }

      #endif

      public bool table_exists(long ns, string name)
      {
        #if !SILVERLIGHT
        send_table_exists(ns, name);
        return recv_table_exists();

        #else
        var asyncResult = Begin_table_exists(null, null, ns, name);
        return End_table_exists(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_table_exists(AsyncCallback callback, object state, long ns, string name)
      #else
      public void send_table_exists(long ns, string name)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("table_exists", TMessageType.Call, seqid_));
        table_exists_args args = new table_exists_args();
        args.Ns = ns;
        args.Name = name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_table_exists()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        table_exists_result result = new table_exists_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "table_exists failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_table_get_id(AsyncCallback callback, object state, long ns, string table_name)
      {
        return send_table_get_id(callback, state, ns, table_name);
      }

      public string End_table_get_id(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_table_get_id();
      }

      #endif

      /// <summary>
      /// Get the id of a table
      /// 
      /// @param ns - namespace id
      /// 
      /// @param table_name - table name
      /// 
      /// @return table id string
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      public string table_get_id(long ns, string table_name)
      {
        #if !SILVERLIGHT
        send_table_get_id(ns, table_name);
        return recv_table_get_id();

        #else
        var asyncResult = Begin_table_get_id(null, null, ns, table_name);
        return End_table_get_id(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_table_get_id(AsyncCallback callback, object state, long ns, string table_name)
      #else
      public void send_table_get_id(long ns, string table_name)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("table_get_id", TMessageType.Call, seqid_));
        table_get_id_args args = new table_get_id_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_table_get_id()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        table_get_id_result result = new table_get_id_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "table_get_id failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_get_table_id(AsyncCallback callback, object state, long ns, string table_name)
      {
        return send_get_table_id(callback, state, ns, table_name);
      }

      public string End_get_table_id(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_table_id();
      }

      #endif

      public string get_table_id(long ns, string table_name)
      {
        #if !SILVERLIGHT
        send_get_table_id(ns, table_name);
        return recv_get_table_id();

        #else
        var asyncResult = Begin_get_table_id(null, null, ns, table_name);
        return End_get_table_id(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_get_table_id(AsyncCallback callback, object state, long ns, string table_name)
      #else
      public void send_get_table_id(long ns, string table_name)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("get_table_id", TMessageType.Call, seqid_));
        get_table_id_args args = new get_table_id_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_get_table_id()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_table_id_result result = new get_table_id_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_table_id failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_table_get_schema_str(AsyncCallback callback, object state, long ns, string table_name)
      {
        return send_table_get_schema_str(callback, state, ns, table_name);
      }

      public string End_table_get_schema_str(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_table_get_schema_str();
      }

      #endif

      /// <summary>
      /// Get the schema of a table as a string (that can be used with create_table)
      /// 
      /// @param ns - namespace id
      /// 
      /// @param table_name - table name
      /// 
      /// @return schema string (in xml)
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      public string table_get_schema_str(long ns, string table_name)
      {
        #if !SILVERLIGHT
        send_table_get_schema_str(ns, table_name);
        return recv_table_get_schema_str();

        #else
        var asyncResult = Begin_table_get_schema_str(null, null, ns, table_name);
        return End_table_get_schema_str(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_table_get_schema_str(AsyncCallback callback, object state, long ns, string table_name)
      #else
      public void send_table_get_schema_str(long ns, string table_name)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("table_get_schema_str", TMessageType.Call, seqid_));
        table_get_schema_str_args args = new table_get_schema_str_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_table_get_schema_str()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        table_get_schema_str_result result = new table_get_schema_str_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "table_get_schema_str failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_get_schema_str(AsyncCallback callback, object state, long ns, string table_name)
      {
        return send_get_schema_str(callback, state, ns, table_name);
      }

      public string End_get_schema_str(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_schema_str();
      }

      #endif

      public string get_schema_str(long ns, string table_name)
      {
        #if !SILVERLIGHT
        send_get_schema_str(ns, table_name);
        return recv_get_schema_str();

        #else
        var asyncResult = Begin_get_schema_str(null, null, ns, table_name);
        return End_get_schema_str(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_get_schema_str(AsyncCallback callback, object state, long ns, string table_name)
      #else
      public void send_get_schema_str(long ns, string table_name)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("get_schema_str", TMessageType.Call, seqid_));
        get_schema_str_args args = new get_schema_str_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_get_schema_str()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_schema_str_result result = new get_schema_str_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_schema_str failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_table_get_schema_str_with_ids(AsyncCallback callback, object state, long ns, string table_name)
      {
        return send_table_get_schema_str_with_ids(callback, state, ns, table_name);
      }

      public string End_table_get_schema_str_with_ids(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_table_get_schema_str_with_ids();
      }

      #endif

      /// <summary>
      /// Get the schema of a table as a string along with column family ids
      /// 
      /// @param ns - namespace id
      /// 
      /// @param table_name - table name
      /// 
      /// @return schema string (in xml)
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      public string table_get_schema_str_with_ids(long ns, string table_name)
      {
        #if !SILVERLIGHT
        send_table_get_schema_str_with_ids(ns, table_name);
        return recv_table_get_schema_str_with_ids();

        #else
        var asyncResult = Begin_table_get_schema_str_with_ids(null, null, ns, table_name);
        return End_table_get_schema_str_with_ids(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_table_get_schema_str_with_ids(AsyncCallback callback, object state, long ns, string table_name)
      #else
      public void send_table_get_schema_str_with_ids(long ns, string table_name)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("table_get_schema_str_with_ids", TMessageType.Call, seqid_));
        table_get_schema_str_with_ids_args args = new table_get_schema_str_with_ids_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_table_get_schema_str_with_ids()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        table_get_schema_str_with_ids_result result = new table_get_schema_str_with_ids_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "table_get_schema_str_with_ids failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_get_schema_str_with_ids(AsyncCallback callback, object state, long ns, string table_name)
      {
        return send_get_schema_str_with_ids(callback, state, ns, table_name);
      }

      public string End_get_schema_str_with_ids(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_schema_str_with_ids();
      }

      #endif

      public string get_schema_str_with_ids(long ns, string table_name)
      {
        #if !SILVERLIGHT
        send_get_schema_str_with_ids(ns, table_name);
        return recv_get_schema_str_with_ids();

        #else
        var asyncResult = Begin_get_schema_str_with_ids(null, null, ns, table_name);
        return End_get_schema_str_with_ids(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_get_schema_str_with_ids(AsyncCallback callback, object state, long ns, string table_name)
      #else
      public void send_get_schema_str_with_ids(long ns, string table_name)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("get_schema_str_with_ids", TMessageType.Call, seqid_));
        get_schema_str_with_ids_args args = new get_schema_str_with_ids_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_get_schema_str_with_ids()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_schema_str_with_ids_result result = new get_schema_str_with_ids_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_schema_str_with_ids failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_table_get_schema(AsyncCallback callback, object state, long ns, string table_name)
      {
        return send_table_get_schema(callback, state, ns, table_name);
      }

      public Schema End_table_get_schema(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_table_get_schema();
      }

      #endif

      /// <summary>
      /// Get the schema of a table as a string (that can be used with create_table)
      ///   
      /// @param ns - namespace id
      /// 
      /// @param table_name - table name
      /// 
      /// @return schema object describing a table
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      public Schema table_get_schema(long ns, string table_name)
      {
        #if !SILVERLIGHT
        send_table_get_schema(ns, table_name);
        return recv_table_get_schema();

        #else
        var asyncResult = Begin_table_get_schema(null, null, ns, table_name);
        return End_table_get_schema(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_table_get_schema(AsyncCallback callback, object state, long ns, string table_name)
      #else
      public void send_table_get_schema(long ns, string table_name)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("table_get_schema", TMessageType.Call, seqid_));
        table_get_schema_args args = new table_get_schema_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Schema recv_table_get_schema()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        table_get_schema_result result = new table_get_schema_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "table_get_schema failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_get_schema(AsyncCallback callback, object state, long ns, string table_name)
      {
        return send_get_schema(callback, state, ns, table_name);
      }

      public Schema End_get_schema(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_schema();
      }

      #endif

      public Schema get_schema(long ns, string table_name)
      {
        #if !SILVERLIGHT
        send_get_schema(ns, table_name);
        return recv_get_schema();

        #else
        var asyncResult = Begin_get_schema(null, null, ns, table_name);
        return End_get_schema(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_get_schema(AsyncCallback callback, object state, long ns, string table_name)
      #else
      public void send_get_schema(long ns, string table_name)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("get_schema", TMessageType.Call, seqid_));
        get_schema_args args = new get_schema_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Schema recv_get_schema()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_schema_result result = new get_schema_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_schema failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_get_tables(AsyncCallback callback, object state, long ns)
      {
        return send_get_tables(callback, state, ns);
      }

      public List<string> End_get_tables(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_tables();
      }

      #endif

      /// <summary>
      /// Get a list of table names in the namespace
      /// 
      /// @param ns - namespace id
      /// 
      /// @return a list of table names
      /// </summary>
      /// <param name="ns"></param>
      public List<string> get_tables(long ns)
      {
        #if !SILVERLIGHT
        send_get_tables(ns);
        return recv_get_tables();

        #else
        var asyncResult = Begin_get_tables(null, null, ns);
        return End_get_tables(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_get_tables(AsyncCallback callback, object state, long ns)
      #else
      public void send_get_tables(long ns)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("get_tables", TMessageType.Call, seqid_));
        get_tables_args args = new get_tables_args();
        args.Ns = ns;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<string> recv_get_tables()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_tables_result result = new get_tables_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_tables failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_namespace_get_listing(AsyncCallback callback, object state, long ns)
      {
        return send_namespace_get_listing(callback, state, ns);
      }

      public List<NamespaceListing> End_namespace_get_listing(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_namespace_get_listing();
      }

      #endif

      /// <summary>
      /// Get a list of namespaces and table names table names in the namespace
      /// 
      /// @param ns - namespace
      /// 
      /// @return a list of table names
      /// </summary>
      /// <param name="ns"></param>
      public List<NamespaceListing> namespace_get_listing(long ns)
      {
        #if !SILVERLIGHT
        send_namespace_get_listing(ns);
        return recv_namespace_get_listing();

        #else
        var asyncResult = Begin_namespace_get_listing(null, null, ns);
        return End_namespace_get_listing(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_namespace_get_listing(AsyncCallback callback, object state, long ns)
      #else
      public void send_namespace_get_listing(long ns)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("namespace_get_listing", TMessageType.Call, seqid_));
        namespace_get_listing_args args = new namespace_get_listing_args();
        args.Ns = ns;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<NamespaceListing> recv_namespace_get_listing()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        namespace_get_listing_result result = new namespace_get_listing_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "namespace_get_listing failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_get_listing(AsyncCallback callback, object state, long ns)
      {
        return send_get_listing(callback, state, ns);
      }

      public List<NamespaceListing> End_get_listing(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_listing();
      }

      #endif

      public List<NamespaceListing> get_listing(long ns)
      {
        #if !SILVERLIGHT
        send_get_listing(ns);
        return recv_get_listing();

        #else
        var asyncResult = Begin_get_listing(null, null, ns);
        return End_get_listing(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_get_listing(AsyncCallback callback, object state, long ns)
      #else
      public void send_get_listing(long ns)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("get_listing", TMessageType.Call, seqid_));
        get_listing_args args = new get_listing_args();
        args.Ns = ns;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<NamespaceListing> recv_get_listing()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_listing_result result = new get_listing_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_listing failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_table_get_splits(AsyncCallback callback, object state, long ns, string table_name)
      {
        return send_table_get_splits(callback, state, ns, table_name);
      }

      public List<TableSplit> End_table_get_splits(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_table_get_splits();
      }

      #endif

      /// <summary>
      /// Get a list of table splits
      /// 
      /// @param ns - namespace id
      /// 
      /// @param table_name - table name
      /// 
      /// @return a list of table names
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      public List<TableSplit> table_get_splits(long ns, string table_name)
      {
        #if !SILVERLIGHT
        send_table_get_splits(ns, table_name);
        return recv_table_get_splits();

        #else
        var asyncResult = Begin_table_get_splits(null, null, ns, table_name);
        return End_table_get_splits(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_table_get_splits(AsyncCallback callback, object state, long ns, string table_name)
      #else
      public void send_table_get_splits(long ns, string table_name)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("table_get_splits", TMessageType.Call, seqid_));
        table_get_splits_args args = new table_get_splits_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<TableSplit> recv_table_get_splits()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        table_get_splits_result result = new table_get_splits_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "table_get_splits failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_get_table_splits(AsyncCallback callback, object state, long ns, string table_name)
      {
        return send_get_table_splits(callback, state, ns, table_name);
      }

      public List<TableSplit> End_get_table_splits(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_table_splits();
      }

      #endif

      public List<TableSplit> get_table_splits(long ns, string table_name)
      {
        #if !SILVERLIGHT
        send_get_table_splits(ns, table_name);
        return recv_get_table_splits();

        #else
        var asyncResult = Begin_get_table_splits(null, null, ns, table_name);
        return End_get_table_splits(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_get_table_splits(AsyncCallback callback, object state, long ns, string table_name)
      #else
      public void send_get_table_splits(long ns, string table_name)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("get_table_splits", TMessageType.Call, seqid_));
        get_table_splits_args args = new get_table_splits_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<TableSplit> recv_get_table_splits()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_table_splits_result result = new get_table_splits_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_table_splits failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_namespace_drop(AsyncCallback callback, object state, string ns, bool if_exists)
      {
        return send_namespace_drop(callback, state, ns, if_exists);
      }

      public void End_namespace_drop(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_namespace_drop();
      }

      #endif

      /// <summary>
      /// Drop a namespace
      /// 
      /// @param ns - namespace name
      /// 
      /// @param if_exists - if true, don't barf if the table doesn't exist
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="if_exists"></param>
      public void namespace_drop(string ns, bool if_exists)
      {
        #if !SILVERLIGHT
        send_namespace_drop(ns, if_exists);
        recv_namespace_drop();

        #else
        var asyncResult = Begin_namespace_drop(null, null, ns, if_exists);
        End_namespace_drop(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_namespace_drop(AsyncCallback callback, object state, string ns, bool if_exists)
      #else
      public void send_namespace_drop(string ns, bool if_exists)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("namespace_drop", TMessageType.Call, seqid_));
        namespace_drop_args args = new namespace_drop_args();
        args.Ns = ns;
        args.If_exists = if_exists;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_namespace_drop()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        namespace_drop_result result = new namespace_drop_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_drop_namespace(AsyncCallback callback, object state, string ns, bool if_exists)
      {
        return send_drop_namespace(callback, state, ns, if_exists);
      }

      public void End_drop_namespace(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_drop_namespace();
      }

      #endif

      public void drop_namespace(string ns, bool if_exists)
      {
        #if !SILVERLIGHT
        send_drop_namespace(ns, if_exists);
        recv_drop_namespace();

        #else
        var asyncResult = Begin_drop_namespace(null, null, ns, if_exists);
        End_drop_namespace(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_drop_namespace(AsyncCallback callback, object state, string ns, bool if_exists)
      #else
      public void send_drop_namespace(string ns, bool if_exists)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("drop_namespace", TMessageType.Call, seqid_));
        drop_namespace_args args = new drop_namespace_args();
        args.Ns = ns;
        args.If_exists = if_exists;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_drop_namespace()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        drop_namespace_result result = new drop_namespace_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_rename_table(AsyncCallback callback, object state, long ns, string name, string new_name)
      {
        return send_rename_table(callback, state, ns, name, new_name);
      }

      public void End_rename_table(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_rename_table();
      }

      #endif

      /// <summary>
      /// Rename a table
      /// 
      /// @param ns - namespace id
      /// 
      /// @param name - current table name
      /// 
      /// @param new_name - new table name
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="name"></param>
      /// <param name="new_name"></param>
      public void rename_table(long ns, string name, string new_name)
      {
        #if !SILVERLIGHT
        send_rename_table(ns, name, new_name);
        recv_rename_table();

        #else
        var asyncResult = Begin_rename_table(null, null, ns, name, new_name);
        End_rename_table(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_rename_table(AsyncCallback callback, object state, long ns, string name, string new_name)
      #else
      public void send_rename_table(long ns, string name, string new_name)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("rename_table", TMessageType.Call, seqid_));
        rename_table_args args = new rename_table_args();
        args.Ns = ns;
        args.Name = name;
        args.New_name = new_name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_rename_table()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        rename_table_result result = new rename_table_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_table_rename(AsyncCallback callback, object state, long ns, string name, string new_name)
      {
        return send_table_rename(callback, state, ns, name, new_name);
      }

      public void End_table_rename(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_table_rename();
      }

      #endif

      public void table_rename(long ns, string name, string new_name)
      {
        #if !SILVERLIGHT
        send_table_rename(ns, name, new_name);
        recv_table_rename();

        #else
        var asyncResult = Begin_table_rename(null, null, ns, name, new_name);
        End_table_rename(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_table_rename(AsyncCallback callback, object state, long ns, string name, string new_name)
      #else
      public void send_table_rename(long ns, string name, string new_name)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("table_rename", TMessageType.Call, seqid_));
        table_rename_args args = new table_rename_args();
        args.Ns = ns;
        args.Name = name;
        args.New_name = new_name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_table_rename()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        table_rename_result result = new table_rename_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_drop_table(AsyncCallback callback, object state, long ns, string name, bool if_exists)
      {
        return send_drop_table(callback, state, ns, name, if_exists);
      }

      public void End_drop_table(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_drop_table();
      }

      #endif

      /// <summary>
      /// Drop a table
      /// 
      /// @param ns - namespace id
      /// 
      /// @param name - table name
      /// 
      /// @param if_exists - if true, don't barf if the table doesn't exist
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="name"></param>
      /// <param name="if_exists"></param>
      public void drop_table(long ns, string name, bool if_exists)
      {
        #if !SILVERLIGHT
        send_drop_table(ns, name, if_exists);
        recv_drop_table();

        #else
        var asyncResult = Begin_drop_table(null, null, ns, name, if_exists);
        End_drop_table(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_drop_table(AsyncCallback callback, object state, long ns, string name, bool if_exists)
      #else
      public void send_drop_table(long ns, string name, bool if_exists)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("drop_table", TMessageType.Call, seqid_));
        drop_table_args args = new drop_table_args();
        args.Ns = ns;
        args.Name = name;
        args.If_exists = if_exists;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_drop_table()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        drop_table_result result = new drop_table_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_table_drop(AsyncCallback callback, object state, long ns, string name, bool if_exists)
      {
        return send_table_drop(callback, state, ns, name, if_exists);
      }

      public void End_table_drop(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_table_drop();
      }

      #endif

      public void table_drop(long ns, string name, bool if_exists)
      {
        #if !SILVERLIGHT
        send_table_drop(ns, name, if_exists);
        recv_table_drop();

        #else
        var asyncResult = Begin_table_drop(null, null, ns, name, if_exists);
        End_table_drop(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_table_drop(AsyncCallback callback, object state, long ns, string name, bool if_exists)
      #else
      public void send_table_drop(long ns, string name, bool if_exists)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("table_drop", TMessageType.Call, seqid_));
        table_drop_args args = new table_drop_args();
        args.Ns = ns;
        args.Name = name;
        args.If_exists = if_exists;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_table_drop()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        table_drop_result result = new table_drop_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_generate_guid(AsyncCallback callback, object state)
      {
        return send_generate_guid(callback, state);
      }

      public string End_generate_guid(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_generate_guid();
      }

      #endif

      /// <summary>
      /// Generate a GUID
      /// 
      /// GUIDs are globally unique. The generated string is 36 bytes long and
      /// has a format similar to "9cf7da31-307a-4bef-b65e-19fb05aa57d8".
      /// </summary>
      public string generate_guid()
      {
        #if !SILVERLIGHT
        send_generate_guid();
        return recv_generate_guid();

        #else
        var asyncResult = Begin_generate_guid(null, null);
        return End_generate_guid(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_generate_guid(AsyncCallback callback, object state)
      #else
      public void send_generate_guid()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("generate_guid", TMessageType.Call, seqid_));
        generate_guid_args args = new generate_guid_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_generate_guid()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        generate_guid_result result = new generate_guid_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "generate_guid failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_create_cell_unique(AsyncCallback callback, object state, long ns, string table_name, Key key, string @value)
      {
        return send_create_cell_unique(callback, state, ns, table_name, key, @value);
      }

      public string End_create_cell_unique(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_create_cell_unique();
      }

      #endif

      /// <summary>
      /// Inserts a unique value into a table
      /// 
      /// This function inserts a unique value into a table. The table must be
      /// created with TIME_ORDER DESC, MAX_VERSIONS 1 (although the latter is
      /// optional).
      /// 
      /// If the value is empty then a new GUID will be assigned
      /// (using @a generate_guid).
      /// 
      /// @param ns - namespace id
      /// @param table_name - table name
      /// @param key - the Key of the value
      /// @param value - the unique value. Can be empty; in this case a new
      ///    guid will be generated internally
      /// 
      /// @return the inserted unique value (which is identical to the @a value
      ///    parameter or a new guid, if value is empty)
      /// </summary>
      /// <param name="ns"></param>
      /// <param name="table_name"></param>
      /// <param name="key"></param>
      /// <param name="value"></param>
      public string create_cell_unique(long ns, string table_name, Key key, string @value)
      {
        #if !SILVERLIGHT
        send_create_cell_unique(ns, table_name, key, @value);
        return recv_create_cell_unique();

        #else
        var asyncResult = Begin_create_cell_unique(null, null, ns, table_name, key, @value);
        return End_create_cell_unique(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_create_cell_unique(AsyncCallback callback, object state, long ns, string table_name, Key key, string @value)
      #else
      public void send_create_cell_unique(long ns, string table_name, Key key, string @value)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("create_cell_unique", TMessageType.Call, seqid_));
        create_cell_unique_args args = new create_cell_unique_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Key = key;
        args.Value = @value;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_create_cell_unique()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        create_cell_unique_result result = new create_cell_unique_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "create_cell_unique failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_error_get_text(AsyncCallback callback, object state, int error_code)
      {
        return send_error_get_text(callback, state, error_code);
      }

      public string End_error_get_text(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_error_get_text();
      }

      #endif

      /// <summary>
      /// Retrieves a descriptive error string from an error code
      /// 
      /// @param error_code - the numeric error code
      /// 
      /// @return the descriptive string, or "ERROR NOT REGISTERED" if the error
      ///    code is unknown
      /// </summary>
      /// <param name="error_code"></param>
      public string error_get_text(int error_code)
      {
        #if !SILVERLIGHT
        send_error_get_text(error_code);
        return recv_error_get_text();

        #else
        var asyncResult = Begin_error_get_text(null, null, error_code);
        return End_error_get_text(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_error_get_text(AsyncCallback callback, object state, int error_code)
      #else
      public void send_error_get_text(int error_code)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("error_get_text", TMessageType.Call, seqid_));
        error_get_text_args args = new error_get_text_args();
        args.Error_code = error_code;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_error_get_text()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        error_get_text_result result = new error_get_text_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "error_get_text failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_status(AsyncCallback callback, object state)
      {
        return send_status(callback, state);
      }

      public Status End_status(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_status();
      }

      #endif

      /// <summary>
      /// Status check.
      /// @return Status information
      /// </summary>
      public Status status()
      {
        #if !SILVERLIGHT
        send_status();
        return recv_status();

        #else
        var asyncResult = Begin_status(null, null);
        return End_status(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_status(AsyncCallback callback, object state)
      #else
      public void send_status()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("status", TMessageType.Call, seqid_));
        status_args args = new status_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Status recv_status()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        status_result result = new status_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "status failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_shutdown(AsyncCallback callback, object state)
      {
        return send_shutdown(callback, state);
      }

      public void End_shutdown(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_shutdown();
      }

      #endif

      /// <summary>
      /// Shutdown broker.
      /// </summary>
      public void shutdown()
      {
        #if !SILVERLIGHT
        send_shutdown();
        recv_shutdown();

        #else
        var asyncResult = Begin_shutdown(null, null);
        End_shutdown(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_shutdown(AsyncCallback callback, object state)
      #else
      public void send_shutdown()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("shutdown", TMessageType.Call, seqid_));
        shutdown_args args = new shutdown_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_shutdown()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        shutdown_result result = new shutdown_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["namespace_create"] = namespace_create_Process;
        processMap_["create_namespace"] = create_namespace_Process;
        processMap_["table_create"] = table_create_Process;
        processMap_["table_alter"] = table_alter_Process;
        processMap_["refresh_table"] = refresh_table_Process;
        processMap_["namespace_open"] = namespace_open_Process;
        processMap_["open_namespace"] = open_namespace_Process;
        processMap_["namespace_close"] = namespace_close_Process;
        processMap_["close_namespace"] = close_namespace_Process;
        processMap_["future_open"] = future_open_Process;
        processMap_["open_future"] = open_future_Process;
        processMap_["future_cancel"] = future_cancel_Process;
        processMap_["cancel_future"] = cancel_future_Process;
        processMap_["future_get_result"] = future_get_result_Process;
        processMap_["get_future_result"] = get_future_result_Process;
        processMap_["future_get_result_as_arrays"] = future_get_result_as_arrays_Process;
        processMap_["get_future_result_as_arrays"] = get_future_result_as_arrays_Process;
        processMap_["future_get_result_serialized"] = future_get_result_serialized_Process;
        processMap_["get_future_result_serialized"] = get_future_result_serialized_Process;
        processMap_["future_is_empty"] = future_is_empty_Process;
        processMap_["future_is_full"] = future_is_full_Process;
        processMap_["future_is_cancelled"] = future_is_cancelled_Process;
        processMap_["future_has_outstanding"] = future_has_outstanding_Process;
        processMap_["future_close"] = future_close_Process;
        processMap_["close_future"] = close_future_Process;
        processMap_["scanner_open"] = scanner_open_Process;
        processMap_["open_scanner"] = open_scanner_Process;
        processMap_["async_scanner_open"] = async_scanner_open_Process;
        processMap_["open_scanner_async"] = open_scanner_async_Process;
        processMap_["scanner_close"] = scanner_close_Process;
        processMap_["close_scanner"] = close_scanner_Process;
        processMap_["async_scanner_cancel"] = async_scanner_cancel_Process;
        processMap_["cancel_scanner_async"] = cancel_scanner_async_Process;
        processMap_["async_scanner_close"] = async_scanner_close_Process;
        processMap_["close_scanner_async"] = close_scanner_async_Process;
        processMap_["scanner_get_cells"] = scanner_get_cells_Process;
        processMap_["next_cells"] = next_cells_Process;
        processMap_["scanner_get_cells_as_arrays"] = scanner_get_cells_as_arrays_Process;
        processMap_["next_cells_as_arrays"] = next_cells_as_arrays_Process;
        processMap_["scanner_get_cells_serialized"] = scanner_get_cells_serialized_Process;
        processMap_["next_cells_serialized"] = next_cells_serialized_Process;
        processMap_["scanner_get_row"] = scanner_get_row_Process;
        processMap_["next_row"] = next_row_Process;
        processMap_["scanner_get_row_as_arrays"] = scanner_get_row_as_arrays_Process;
        processMap_["next_row_as_arrays"] = next_row_as_arrays_Process;
        processMap_["scanner_get_row_serialized"] = scanner_get_row_serialized_Process;
        processMap_["next_row_serialized"] = next_row_serialized_Process;
        processMap_["get_row"] = get_row_Process;
        processMap_["get_row_as_arrays"] = get_row_as_arrays_Process;
        processMap_["get_row_serialized"] = get_row_serialized_Process;
        processMap_["get_cell"] = get_cell_Process;
        processMap_["get_cells"] = get_cells_Process;
        processMap_["get_cells_as_arrays"] = get_cells_as_arrays_Process;
        processMap_["get_cells_serialized"] = get_cells_serialized_Process;
        processMap_["shared_mutator_refresh"] = shared_mutator_refresh_Process;
        processMap_["refresh_shared_mutator"] = refresh_shared_mutator_Process;
        processMap_["shared_mutator_set_cells"] = shared_mutator_set_cells_Process;
        processMap_["offer_cells"] = offer_cells_Process;
        processMap_["shared_mutator_set_cells_as_arrays"] = shared_mutator_set_cells_as_arrays_Process;
        processMap_["offer_cells_as_arrays"] = offer_cells_as_arrays_Process;
        processMap_["shared_mutator_set_cell"] = shared_mutator_set_cell_Process;
        processMap_["offer_cell"] = offer_cell_Process;
        processMap_["shared_mutator_set_cell_as_array"] = shared_mutator_set_cell_as_array_Process;
        processMap_["offer_cell_as_array"] = offer_cell_as_array_Process;
        processMap_["mutator_open"] = mutator_open_Process;
        processMap_["open_mutator"] = open_mutator_Process;
        processMap_["async_mutator_open"] = async_mutator_open_Process;
        processMap_["open_mutator_async"] = open_mutator_async_Process;
        processMap_["mutator_close"] = mutator_close_Process;
        processMap_["close_mutator"] = close_mutator_Process;
        processMap_["async_mutator_cancel"] = async_mutator_cancel_Process;
        processMap_["cancel_mutator_async"] = cancel_mutator_async_Process;
        processMap_["async_mutator_close"] = async_mutator_close_Process;
        processMap_["close_mutator_async"] = close_mutator_async_Process;
        processMap_["mutator_set_cell"] = mutator_set_cell_Process;
        processMap_["set_cell"] = set_cell_Process;
        processMap_["mutator_set_cell_as_array"] = mutator_set_cell_as_array_Process;
        processMap_["set_cell_as_array"] = set_cell_as_array_Process;
        processMap_["mutator_set_cells"] = mutator_set_cells_Process;
        processMap_["set_cells"] = set_cells_Process;
        processMap_["mutator_set_cells_as_arrays"] = mutator_set_cells_as_arrays_Process;
        processMap_["set_cells_as_arrays"] = set_cells_as_arrays_Process;
        processMap_["mutator_set_cells_serialized"] = mutator_set_cells_serialized_Process;
        processMap_["set_cells_serialized"] = set_cells_serialized_Process;
        processMap_["mutator_flush"] = mutator_flush_Process;
        processMap_["flush_mutator"] = flush_mutator_Process;
        processMap_["async_mutator_set_cell"] = async_mutator_set_cell_Process;
        processMap_["set_cell_async"] = set_cell_async_Process;
        processMap_["async_mutator_set_cell_as_array"] = async_mutator_set_cell_as_array_Process;
        processMap_["set_cell_as_array_async"] = set_cell_as_array_async_Process;
        processMap_["async_mutator_set_cells"] = async_mutator_set_cells_Process;
        processMap_["set_cells_async"] = set_cells_async_Process;
        processMap_["async_mutator_set_cells_as_arrays"] = async_mutator_set_cells_as_arrays_Process;
        processMap_["set_cells_as_arrays_async"] = set_cells_as_arrays_async_Process;
        processMap_["async_mutator_set_cells_serialized"] = async_mutator_set_cells_serialized_Process;
        processMap_["set_cells_serialized_async"] = set_cells_serialized_async_Process;
        processMap_["async_mutator_flush"] = async_mutator_flush_Process;
        processMap_["flush_mutator_async"] = flush_mutator_async_Process;
        processMap_["namespace_exists"] = namespace_exists_Process;
        processMap_["exists_namespace"] = exists_namespace_Process;
        processMap_["exists_table"] = exists_table_Process;
        processMap_["table_exists"] = table_exists_Process;
        processMap_["table_get_id"] = table_get_id_Process;
        processMap_["get_table_id"] = get_table_id_Process;
        processMap_["table_get_schema_str"] = table_get_schema_str_Process;
        processMap_["get_schema_str"] = get_schema_str_Process;
        processMap_["table_get_schema_str_with_ids"] = table_get_schema_str_with_ids_Process;
        processMap_["get_schema_str_with_ids"] = get_schema_str_with_ids_Process;
        processMap_["table_get_schema"] = table_get_schema_Process;
        processMap_["get_schema"] = get_schema_Process;
        processMap_["get_tables"] = get_tables_Process;
        processMap_["namespace_get_listing"] = namespace_get_listing_Process;
        processMap_["get_listing"] = get_listing_Process;
        processMap_["table_get_splits"] = table_get_splits_Process;
        processMap_["get_table_splits"] = get_table_splits_Process;
        processMap_["namespace_drop"] = namespace_drop_Process;
        processMap_["drop_namespace"] = drop_namespace_Process;
        processMap_["rename_table"] = rename_table_Process;
        processMap_["table_rename"] = table_rename_Process;
        processMap_["drop_table"] = drop_table_Process;
        processMap_["table_drop"] = table_drop_Process;
        processMap_["generate_guid"] = generate_guid_Process;
        processMap_["create_cell_unique"] = create_cell_unique_Process;
        processMap_["error_get_text"] = error_get_text_Process;
        processMap_["status"] = status_Process;
        processMap_["shutdown"] = shutdown_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void namespace_create_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        namespace_create_args args = new namespace_create_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        namespace_create_result result = new namespace_create_result();
        try {
          iface_.namespace_create(args.Ns);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("namespace_create", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void create_namespace_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        create_namespace_args args = new create_namespace_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        create_namespace_result result = new create_namespace_result();
        try {
          iface_.create_namespace(args.Ns);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("create_namespace", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void table_create_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        table_create_args args = new table_create_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        table_create_result result = new table_create_result();
        try {
          iface_.table_create(args.Ns, args.Table_name, args.Schema);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("table_create", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void table_alter_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        table_alter_args args = new table_alter_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        table_alter_result result = new table_alter_result();
        try {
          iface_.table_alter(args.Ns, args.Table_name, args.Schema);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("table_alter", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void refresh_table_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        refresh_table_args args = new refresh_table_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        refresh_table_result result = new refresh_table_result();
        try {
          iface_.refresh_table(args.Ns, args.Table_name);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("refresh_table", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void namespace_open_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        namespace_open_args args = new namespace_open_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        namespace_open_result result = new namespace_open_result();
        try {
          result.Success = iface_.namespace_open(args.Ns);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("namespace_open", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void open_namespace_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        open_namespace_args args = new open_namespace_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        open_namespace_result result = new open_namespace_result();
        try {
          result.Success = iface_.open_namespace(args.Ns);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("open_namespace", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void namespace_close_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        namespace_close_args args = new namespace_close_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        namespace_close_result result = new namespace_close_result();
        try {
          iface_.namespace_close(args.Ns);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("namespace_close", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void close_namespace_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        close_namespace_args args = new close_namespace_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        close_namespace_result result = new close_namespace_result();
        try {
          iface_.close_namespace(args.Ns);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("close_namespace", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void future_open_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        future_open_args args = new future_open_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        future_open_result result = new future_open_result();
        try {
          result.Success = iface_.future_open(args.Capacity);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("future_open", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void open_future_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        open_future_args args = new open_future_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        open_future_result result = new open_future_result();
        try {
          result.Success = iface_.open_future(args.Capacity);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("open_future", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void future_cancel_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        future_cancel_args args = new future_cancel_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        future_cancel_result result = new future_cancel_result();
        try {
          iface_.future_cancel(args.Ff);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("future_cancel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void cancel_future_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        cancel_future_args args = new cancel_future_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        cancel_future_result result = new cancel_future_result();
        try {
          iface_.cancel_future(args.Ff);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("cancel_future", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void future_get_result_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        future_get_result_args args = new future_get_result_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        future_get_result_result result = new future_get_result_result();
        try {
          result.Success = iface_.future_get_result(args.Ff, args.Timeout_millis);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("future_get_result", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_future_result_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_future_result_args args = new get_future_result_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_future_result_result result = new get_future_result_result();
        try {
          result.Success = iface_.get_future_result(args.Ff, args.Timeout_millis);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("get_future_result", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void future_get_result_as_arrays_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        future_get_result_as_arrays_args args = new future_get_result_as_arrays_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        future_get_result_as_arrays_result result = new future_get_result_as_arrays_result();
        try {
          result.Success = iface_.future_get_result_as_arrays(args.Ff, args.Timeout_millis);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("future_get_result_as_arrays", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_future_result_as_arrays_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_future_result_as_arrays_args args = new get_future_result_as_arrays_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_future_result_as_arrays_result result = new get_future_result_as_arrays_result();
        try {
          result.Success = iface_.get_future_result_as_arrays(args.Ff, args.Timeout_millis);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("get_future_result_as_arrays", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void future_get_result_serialized_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        future_get_result_serialized_args args = new future_get_result_serialized_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        future_get_result_serialized_result result = new future_get_result_serialized_result();
        try {
          result.Success = iface_.future_get_result_serialized(args.Ff, args.Timeout_millis);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("future_get_result_serialized", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_future_result_serialized_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_future_result_serialized_args args = new get_future_result_serialized_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_future_result_serialized_result result = new get_future_result_serialized_result();
        try {
          result.Success = iface_.get_future_result_serialized(args.Ff, args.Timeout_millis);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("get_future_result_serialized", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void future_is_empty_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        future_is_empty_args args = new future_is_empty_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        future_is_empty_result result = new future_is_empty_result();
        try {
          result.Success = iface_.future_is_empty(args.Ff);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("future_is_empty", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void future_is_full_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        future_is_full_args args = new future_is_full_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        future_is_full_result result = new future_is_full_result();
        try {
          result.Success = iface_.future_is_full(args.Ff);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("future_is_full", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void future_is_cancelled_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        future_is_cancelled_args args = new future_is_cancelled_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        future_is_cancelled_result result = new future_is_cancelled_result();
        try {
          result.Success = iface_.future_is_cancelled(args.Ff);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("future_is_cancelled", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void future_has_outstanding_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        future_has_outstanding_args args = new future_has_outstanding_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        future_has_outstanding_result result = new future_has_outstanding_result();
        try {
          result.Success = iface_.future_has_outstanding(args.Ff);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("future_has_outstanding", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void future_close_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        future_close_args args = new future_close_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        future_close_result result = new future_close_result();
        try {
          iface_.future_close(args.Ff);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("future_close", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void close_future_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        close_future_args args = new close_future_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        close_future_result result = new close_future_result();
        try {
          iface_.close_future(args.Ff);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("close_future", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void scanner_open_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        scanner_open_args args = new scanner_open_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        scanner_open_result result = new scanner_open_result();
        try {
          result.Success = iface_.scanner_open(args.Ns, args.Table_name, args.Scan_spec);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("scanner_open", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void open_scanner_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        open_scanner_args args = new open_scanner_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        open_scanner_result result = new open_scanner_result();
        try {
          result.Success = iface_.open_scanner(args.Ns, args.Table_name, args.Scan_spec);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("open_scanner", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void async_scanner_open_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        async_scanner_open_args args = new async_scanner_open_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        async_scanner_open_result result = new async_scanner_open_result();
        try {
          result.Success = iface_.async_scanner_open(args.Ns, args.Table_name, args.Future, args.Scan_spec);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("async_scanner_open", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void open_scanner_async_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        open_scanner_async_args args = new open_scanner_async_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        open_scanner_async_result result = new open_scanner_async_result();
        try {
          result.Success = iface_.open_scanner_async(args.Ns, args.Table_name, args.Future, args.Scan_spec);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("open_scanner_async", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void scanner_close_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        scanner_close_args args = new scanner_close_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        scanner_close_result result = new scanner_close_result();
        try {
          iface_.scanner_close(args.Scanner);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("scanner_close", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void close_scanner_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        close_scanner_args args = new close_scanner_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        close_scanner_result result = new close_scanner_result();
        try {
          iface_.close_scanner(args.Scanner);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("close_scanner", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void async_scanner_cancel_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        async_scanner_cancel_args args = new async_scanner_cancel_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        async_scanner_cancel_result result = new async_scanner_cancel_result();
        try {
          iface_.async_scanner_cancel(args.Scanner);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("async_scanner_cancel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void cancel_scanner_async_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        cancel_scanner_async_args args = new cancel_scanner_async_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        cancel_scanner_async_result result = new cancel_scanner_async_result();
        try {
          iface_.cancel_scanner_async(args.Scanner);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("cancel_scanner_async", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void async_scanner_close_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        async_scanner_close_args args = new async_scanner_close_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        async_scanner_close_result result = new async_scanner_close_result();
        try {
          iface_.async_scanner_close(args.Scanner);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("async_scanner_close", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void close_scanner_async_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        close_scanner_async_args args = new close_scanner_async_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        close_scanner_async_result result = new close_scanner_async_result();
        try {
          iface_.close_scanner_async(args.Scanner);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("close_scanner_async", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void scanner_get_cells_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        scanner_get_cells_args args = new scanner_get_cells_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        scanner_get_cells_result result = new scanner_get_cells_result();
        try {
          result.Success = iface_.scanner_get_cells(args.Scanner);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("scanner_get_cells", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void next_cells_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        next_cells_args args = new next_cells_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        next_cells_result result = new next_cells_result();
        try {
          result.Success = iface_.next_cells(args.Scanner);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("next_cells", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void scanner_get_cells_as_arrays_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        scanner_get_cells_as_arrays_args args = new scanner_get_cells_as_arrays_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        scanner_get_cells_as_arrays_result result = new scanner_get_cells_as_arrays_result();
        try {
          result.Success = iface_.scanner_get_cells_as_arrays(args.Scanner);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("scanner_get_cells_as_arrays", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void next_cells_as_arrays_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        next_cells_as_arrays_args args = new next_cells_as_arrays_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        next_cells_as_arrays_result result = new next_cells_as_arrays_result();
        try {
          result.Success = iface_.next_cells_as_arrays(args.Scanner);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("next_cells_as_arrays", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void scanner_get_cells_serialized_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        scanner_get_cells_serialized_args args = new scanner_get_cells_serialized_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        scanner_get_cells_serialized_result result = new scanner_get_cells_serialized_result();
        try {
          result.Success = iface_.scanner_get_cells_serialized(args.Scanner);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("scanner_get_cells_serialized", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void next_cells_serialized_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        next_cells_serialized_args args = new next_cells_serialized_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        next_cells_serialized_result result = new next_cells_serialized_result();
        try {
          result.Success = iface_.next_cells_serialized(args.Scanner);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("next_cells_serialized", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void scanner_get_row_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        scanner_get_row_args args = new scanner_get_row_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        scanner_get_row_result result = new scanner_get_row_result();
        try {
          result.Success = iface_.scanner_get_row(args.Scanner);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("scanner_get_row", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void next_row_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        next_row_args args = new next_row_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        next_row_result result = new next_row_result();
        try {
          result.Success = iface_.next_row(args.Scanner);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("next_row", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void scanner_get_row_as_arrays_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        scanner_get_row_as_arrays_args args = new scanner_get_row_as_arrays_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        scanner_get_row_as_arrays_result result = new scanner_get_row_as_arrays_result();
        try {
          result.Success = iface_.scanner_get_row_as_arrays(args.Scanner);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("scanner_get_row_as_arrays", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void next_row_as_arrays_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        next_row_as_arrays_args args = new next_row_as_arrays_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        next_row_as_arrays_result result = new next_row_as_arrays_result();
        try {
          result.Success = iface_.next_row_as_arrays(args.Scanner);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("next_row_as_arrays", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void scanner_get_row_serialized_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        scanner_get_row_serialized_args args = new scanner_get_row_serialized_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        scanner_get_row_serialized_result result = new scanner_get_row_serialized_result();
        try {
          result.Success = iface_.scanner_get_row_serialized(args.Scanner);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("scanner_get_row_serialized", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void next_row_serialized_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        next_row_serialized_args args = new next_row_serialized_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        next_row_serialized_result result = new next_row_serialized_result();
        try {
          result.Success = iface_.next_row_serialized(args.Scanner);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("next_row_serialized", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_row_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_row_args args = new get_row_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_row_result result = new get_row_result();
        try {
          result.Success = iface_.get_row(args.Ns, args.Table_name, args.Row);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("get_row", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_row_as_arrays_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_row_as_arrays_args args = new get_row_as_arrays_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_row_as_arrays_result result = new get_row_as_arrays_result();
        try {
          result.Success = iface_.get_row_as_arrays(args.Ns, args.Name, args.Row);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("get_row_as_arrays", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_row_serialized_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_row_serialized_args args = new get_row_serialized_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_row_serialized_result result = new get_row_serialized_result();
        try {
          result.Success = iface_.get_row_serialized(args.Ns, args.Table_name, args.Row);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("get_row_serialized", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_cell_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_cell_args args = new get_cell_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_cell_result result = new get_cell_result();
        try {
          result.Success = iface_.get_cell(args.Ns, args.Table_name, args.Row, args.Column);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("get_cell", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_cells_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_cells_args args = new get_cells_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_cells_result result = new get_cells_result();
        try {
          result.Success = iface_.get_cells(args.Ns, args.Table_name, args.Scan_spec);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("get_cells", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_cells_as_arrays_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_cells_as_arrays_args args = new get_cells_as_arrays_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_cells_as_arrays_result result = new get_cells_as_arrays_result();
        try {
          result.Success = iface_.get_cells_as_arrays(args.Ns, args.Name, args.Scan_spec);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("get_cells_as_arrays", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_cells_serialized_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_cells_serialized_args args = new get_cells_serialized_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_cells_serialized_result result = new get_cells_serialized_result();
        try {
          result.Success = iface_.get_cells_serialized(args.Ns, args.Name, args.Scan_spec);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("get_cells_serialized", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void shared_mutator_refresh_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        shared_mutator_refresh_args args = new shared_mutator_refresh_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        shared_mutator_refresh_result result = new shared_mutator_refresh_result();
        try {
          iface_.shared_mutator_refresh(args.Ns, args.Table_name, args.Mutate_spec);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("shared_mutator_refresh", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void refresh_shared_mutator_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        refresh_shared_mutator_args args = new refresh_shared_mutator_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        refresh_shared_mutator_result result = new refresh_shared_mutator_result();
        try {
          iface_.refresh_shared_mutator(args.Ns, args.Table_name, args.Mutate_spec);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("refresh_shared_mutator", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void shared_mutator_set_cells_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        shared_mutator_set_cells_args args = new shared_mutator_set_cells_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        shared_mutator_set_cells_result result = new shared_mutator_set_cells_result();
        try {
          iface_.shared_mutator_set_cells(args.Ns, args.Table_name, args.Mutate_spec, args.Cells);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("shared_mutator_set_cells", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void offer_cells_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        offer_cells_args args = new offer_cells_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        offer_cells_result result = new offer_cells_result();
        try {
          iface_.offer_cells(args.Ns, args.Table_name, args.Mutate_spec, args.Cells);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("offer_cells", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void shared_mutator_set_cells_as_arrays_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        shared_mutator_set_cells_as_arrays_args args = new shared_mutator_set_cells_as_arrays_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        shared_mutator_set_cells_as_arrays_result result = new shared_mutator_set_cells_as_arrays_result();
        try {
          iface_.shared_mutator_set_cells_as_arrays(args.Ns, args.Table_name, args.Mutate_spec, args.Cells);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("shared_mutator_set_cells_as_arrays", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void offer_cells_as_arrays_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        offer_cells_as_arrays_args args = new offer_cells_as_arrays_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        offer_cells_as_arrays_result result = new offer_cells_as_arrays_result();
        try {
          iface_.offer_cells_as_arrays(args.Ns, args.Table_name, args.Mutate_spec, args.Cells);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("offer_cells_as_arrays", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void shared_mutator_set_cell_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        shared_mutator_set_cell_args args = new shared_mutator_set_cell_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        shared_mutator_set_cell_result result = new shared_mutator_set_cell_result();
        try {
          iface_.shared_mutator_set_cell(args.Ns, args.Table_name, args.Mutate_spec, args.Cell);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("shared_mutator_set_cell", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void offer_cell_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        offer_cell_args args = new offer_cell_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        offer_cell_result result = new offer_cell_result();
        try {
          iface_.offer_cell(args.Ns, args.Table_name, args.Mutate_spec, args.Cell);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("offer_cell", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void shared_mutator_set_cell_as_array_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        shared_mutator_set_cell_as_array_args args = new shared_mutator_set_cell_as_array_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        shared_mutator_set_cell_as_array_result result = new shared_mutator_set_cell_as_array_result();
        try {
          iface_.shared_mutator_set_cell_as_array(args.Ns, args.Table_name, args.Mutate_spec, args.Cell);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("shared_mutator_set_cell_as_array", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void offer_cell_as_array_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        offer_cell_as_array_args args = new offer_cell_as_array_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        offer_cell_as_array_result result = new offer_cell_as_array_result();
        try {
          iface_.offer_cell_as_array(args.Ns, args.Table_name, args.Mutate_spec, args.Cell);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("offer_cell_as_array", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void mutator_open_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        mutator_open_args args = new mutator_open_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        mutator_open_result result = new mutator_open_result();
        try {
          result.Success = iface_.mutator_open(args.Ns, args.Table_name, args.Flags, args.Flush_interval);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("mutator_open", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void open_mutator_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        open_mutator_args args = new open_mutator_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        open_mutator_result result = new open_mutator_result();
        try {
          result.Success = iface_.open_mutator(args.Ns, args.Table_name, args.Flags, args.Flush_interval);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("open_mutator", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void async_mutator_open_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        async_mutator_open_args args = new async_mutator_open_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        async_mutator_open_result result = new async_mutator_open_result();
        try {
          result.Success = iface_.async_mutator_open(args.Ns, args.Table_name, args.Future, args.Flags);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("async_mutator_open", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void open_mutator_async_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        open_mutator_async_args args = new open_mutator_async_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        open_mutator_async_result result = new open_mutator_async_result();
        try {
          result.Success = iface_.open_mutator_async(args.Ns, args.Table_name, args.Future, args.Flags);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("open_mutator_async", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void mutator_close_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        mutator_close_args args = new mutator_close_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        mutator_close_result result = new mutator_close_result();
        try {
          iface_.mutator_close(args.Mutator);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("mutator_close", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void close_mutator_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        close_mutator_args args = new close_mutator_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        close_mutator_result result = new close_mutator_result();
        try {
          iface_.close_mutator(args.Mutator);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("close_mutator", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void async_mutator_cancel_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        async_mutator_cancel_args args = new async_mutator_cancel_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        async_mutator_cancel_result result = new async_mutator_cancel_result();
        try {
          iface_.async_mutator_cancel(args.Mutator);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("async_mutator_cancel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void cancel_mutator_async_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        cancel_mutator_async_args args = new cancel_mutator_async_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        cancel_mutator_async_result result = new cancel_mutator_async_result();
        try {
          iface_.cancel_mutator_async(args.Mutator);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("cancel_mutator_async", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void async_mutator_close_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        async_mutator_close_args args = new async_mutator_close_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        async_mutator_close_result result = new async_mutator_close_result();
        try {
          iface_.async_mutator_close(args.Mutator);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("async_mutator_close", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void close_mutator_async_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        close_mutator_async_args args = new close_mutator_async_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        close_mutator_async_result result = new close_mutator_async_result();
        try {
          iface_.close_mutator_async(args.Mutator);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("close_mutator_async", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void mutator_set_cell_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        mutator_set_cell_args args = new mutator_set_cell_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        mutator_set_cell_result result = new mutator_set_cell_result();
        try {
          iface_.mutator_set_cell(args.Mutator, args.Cell);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("mutator_set_cell", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void set_cell_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        set_cell_args args = new set_cell_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        set_cell_result result = new set_cell_result();
        try {
          iface_.set_cell(args.Ns, args.Table_name, args.Cell);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("set_cell", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void mutator_set_cell_as_array_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        mutator_set_cell_as_array_args args = new mutator_set_cell_as_array_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        mutator_set_cell_as_array_result result = new mutator_set_cell_as_array_result();
        try {
          iface_.mutator_set_cell_as_array(args.Mutator, args.Cell);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("mutator_set_cell_as_array", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void set_cell_as_array_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        set_cell_as_array_args args = new set_cell_as_array_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        set_cell_as_array_result result = new set_cell_as_array_result();
        try {
          iface_.set_cell_as_array(args.Ns, args.Table_name, args.Cell);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("set_cell_as_array", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void mutator_set_cells_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        mutator_set_cells_args args = new mutator_set_cells_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        mutator_set_cells_result result = new mutator_set_cells_result();
        try {
          iface_.mutator_set_cells(args.Mutator, args.Cells);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("mutator_set_cells", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void set_cells_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        set_cells_args args = new set_cells_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        set_cells_result result = new set_cells_result();
        try {
          iface_.set_cells(args.Ns, args.Table_name, args.Cells);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("set_cells", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void mutator_set_cells_as_arrays_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        mutator_set_cells_as_arrays_args args = new mutator_set_cells_as_arrays_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        mutator_set_cells_as_arrays_result result = new mutator_set_cells_as_arrays_result();
        try {
          iface_.mutator_set_cells_as_arrays(args.Mutator, args.Cells);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("mutator_set_cells_as_arrays", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void set_cells_as_arrays_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        set_cells_as_arrays_args args = new set_cells_as_arrays_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        set_cells_as_arrays_result result = new set_cells_as_arrays_result();
        try {
          iface_.set_cells_as_arrays(args.Ns, args.Table_name, args.Cells);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("set_cells_as_arrays", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void mutator_set_cells_serialized_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        mutator_set_cells_serialized_args args = new mutator_set_cells_serialized_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        mutator_set_cells_serialized_result result = new mutator_set_cells_serialized_result();
        try {
          iface_.mutator_set_cells_serialized(args.Mutator, args.Cells, args.Flush);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("mutator_set_cells_serialized", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void set_cells_serialized_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        set_cells_serialized_args args = new set_cells_serialized_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        set_cells_serialized_result result = new set_cells_serialized_result();
        try {
          iface_.set_cells_serialized(args.Ns, args.Table_name, args.Cells);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("set_cells_serialized", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void mutator_flush_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        mutator_flush_args args = new mutator_flush_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        mutator_flush_result result = new mutator_flush_result();
        try {
          iface_.mutator_flush(args.Mutator);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("mutator_flush", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void flush_mutator_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        flush_mutator_args args = new flush_mutator_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        flush_mutator_result result = new flush_mutator_result();
        try {
          iface_.flush_mutator(args.Mutator);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("flush_mutator", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void async_mutator_set_cell_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        async_mutator_set_cell_args args = new async_mutator_set_cell_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        async_mutator_set_cell_result result = new async_mutator_set_cell_result();
        try {
          iface_.async_mutator_set_cell(args.Mutator, args.Cell);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("async_mutator_set_cell", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void set_cell_async_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        set_cell_async_args args = new set_cell_async_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        set_cell_async_result result = new set_cell_async_result();
        try {
          iface_.set_cell_async(args.Mutator, args.Cell);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("set_cell_async", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void async_mutator_set_cell_as_array_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        async_mutator_set_cell_as_array_args args = new async_mutator_set_cell_as_array_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        async_mutator_set_cell_as_array_result result = new async_mutator_set_cell_as_array_result();
        try {
          iface_.async_mutator_set_cell_as_array(args.Mutator, args.Cell);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("async_mutator_set_cell_as_array", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void set_cell_as_array_async_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        set_cell_as_array_async_args args = new set_cell_as_array_async_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        set_cell_as_array_async_result result = new set_cell_as_array_async_result();
        try {
          iface_.set_cell_as_array_async(args.Mutator, args.Cell);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("set_cell_as_array_async", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void async_mutator_set_cells_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        async_mutator_set_cells_args args = new async_mutator_set_cells_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        async_mutator_set_cells_result result = new async_mutator_set_cells_result();
        try {
          iface_.async_mutator_set_cells(args.Mutator, args.Cells);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("async_mutator_set_cells", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void set_cells_async_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        set_cells_async_args args = new set_cells_async_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        set_cells_async_result result = new set_cells_async_result();
        try {
          iface_.set_cells_async(args.Mutator, args.Cells);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("set_cells_async", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void async_mutator_set_cells_as_arrays_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        async_mutator_set_cells_as_arrays_args args = new async_mutator_set_cells_as_arrays_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        async_mutator_set_cells_as_arrays_result result = new async_mutator_set_cells_as_arrays_result();
        try {
          iface_.async_mutator_set_cells_as_arrays(args.Mutator, args.Cells);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("async_mutator_set_cells_as_arrays", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void set_cells_as_arrays_async_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        set_cells_as_arrays_async_args args = new set_cells_as_arrays_async_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        set_cells_as_arrays_async_result result = new set_cells_as_arrays_async_result();
        try {
          iface_.set_cells_as_arrays_async(args.Mutator, args.Cells);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("set_cells_as_arrays_async", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void async_mutator_set_cells_serialized_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        async_mutator_set_cells_serialized_args args = new async_mutator_set_cells_serialized_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        async_mutator_set_cells_serialized_result result = new async_mutator_set_cells_serialized_result();
        try {
          iface_.async_mutator_set_cells_serialized(args.Mutator, args.Cells, args.Flush);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("async_mutator_set_cells_serialized", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void set_cells_serialized_async_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        set_cells_serialized_async_args args = new set_cells_serialized_async_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        set_cells_serialized_async_result result = new set_cells_serialized_async_result();
        try {
          iface_.set_cells_serialized_async(args.Mutator, args.Cells, args.Flush);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("set_cells_serialized_async", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void async_mutator_flush_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        async_mutator_flush_args args = new async_mutator_flush_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        async_mutator_flush_result result = new async_mutator_flush_result();
        try {
          iface_.async_mutator_flush(args.Mutator);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("async_mutator_flush", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void flush_mutator_async_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        flush_mutator_async_args args = new flush_mutator_async_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        flush_mutator_async_result result = new flush_mutator_async_result();
        try {
          iface_.flush_mutator_async(args.Mutator);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("flush_mutator_async", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void namespace_exists_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        namespace_exists_args args = new namespace_exists_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        namespace_exists_result result = new namespace_exists_result();
        try {
          result.Success = iface_.namespace_exists(args.Ns);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("namespace_exists", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void exists_namespace_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        exists_namespace_args args = new exists_namespace_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        exists_namespace_result result = new exists_namespace_result();
        try {
          result.Success = iface_.exists_namespace(args.Ns);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("exists_namespace", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void exists_table_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        exists_table_args args = new exists_table_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        exists_table_result result = new exists_table_result();
        try {
          result.Success = iface_.exists_table(args.Ns, args.Name);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("exists_table", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void table_exists_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        table_exists_args args = new table_exists_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        table_exists_result result = new table_exists_result();
        try {
          result.Success = iface_.table_exists(args.Ns, args.Name);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("table_exists", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void table_get_id_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        table_get_id_args args = new table_get_id_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        table_get_id_result result = new table_get_id_result();
        try {
          result.Success = iface_.table_get_id(args.Ns, args.Table_name);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("table_get_id", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_table_id_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_table_id_args args = new get_table_id_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_table_id_result result = new get_table_id_result();
        try {
          result.Success = iface_.get_table_id(args.Ns, args.Table_name);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("get_table_id", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void table_get_schema_str_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        table_get_schema_str_args args = new table_get_schema_str_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        table_get_schema_str_result result = new table_get_schema_str_result();
        try {
          result.Success = iface_.table_get_schema_str(args.Ns, args.Table_name);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("table_get_schema_str", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_schema_str_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_schema_str_args args = new get_schema_str_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_schema_str_result result = new get_schema_str_result();
        try {
          result.Success = iface_.get_schema_str(args.Ns, args.Table_name);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("get_schema_str", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void table_get_schema_str_with_ids_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        table_get_schema_str_with_ids_args args = new table_get_schema_str_with_ids_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        table_get_schema_str_with_ids_result result = new table_get_schema_str_with_ids_result();
        try {
          result.Success = iface_.table_get_schema_str_with_ids(args.Ns, args.Table_name);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("table_get_schema_str_with_ids", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_schema_str_with_ids_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_schema_str_with_ids_args args = new get_schema_str_with_ids_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_schema_str_with_ids_result result = new get_schema_str_with_ids_result();
        try {
          result.Success = iface_.get_schema_str_with_ids(args.Ns, args.Table_name);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("get_schema_str_with_ids", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void table_get_schema_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        table_get_schema_args args = new table_get_schema_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        table_get_schema_result result = new table_get_schema_result();
        try {
          result.Success = iface_.table_get_schema(args.Ns, args.Table_name);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("table_get_schema", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_schema_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_schema_args args = new get_schema_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_schema_result result = new get_schema_result();
        try {
          result.Success = iface_.get_schema(args.Ns, args.Table_name);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("get_schema", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_tables_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_tables_args args = new get_tables_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_tables_result result = new get_tables_result();
        try {
          result.Success = iface_.get_tables(args.Ns);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("get_tables", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void namespace_get_listing_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        namespace_get_listing_args args = new namespace_get_listing_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        namespace_get_listing_result result = new namespace_get_listing_result();
        try {
          result.Success = iface_.namespace_get_listing(args.Ns);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("namespace_get_listing", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_listing_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_listing_args args = new get_listing_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_listing_result result = new get_listing_result();
        try {
          result.Success = iface_.get_listing(args.Ns);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("get_listing", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void table_get_splits_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        table_get_splits_args args = new table_get_splits_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        table_get_splits_result result = new table_get_splits_result();
        try {
          result.Success = iface_.table_get_splits(args.Ns, args.Table_name);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("table_get_splits", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_table_splits_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_table_splits_args args = new get_table_splits_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_table_splits_result result = new get_table_splits_result();
        try {
          result.Success = iface_.get_table_splits(args.Ns, args.Table_name);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("get_table_splits", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void namespace_drop_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        namespace_drop_args args = new namespace_drop_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        namespace_drop_result result = new namespace_drop_result();
        try {
          iface_.namespace_drop(args.Ns, args.If_exists);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("namespace_drop", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void drop_namespace_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        drop_namespace_args args = new drop_namespace_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        drop_namespace_result result = new drop_namespace_result();
        try {
          iface_.drop_namespace(args.Ns, args.If_exists);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("drop_namespace", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void rename_table_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        rename_table_args args = new rename_table_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        rename_table_result result = new rename_table_result();
        try {
          iface_.rename_table(args.Ns, args.Name, args.New_name);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("rename_table", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void table_rename_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        table_rename_args args = new table_rename_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        table_rename_result result = new table_rename_result();
        try {
          iface_.table_rename(args.Ns, args.Name, args.New_name);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("table_rename", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void drop_table_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        drop_table_args args = new drop_table_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        drop_table_result result = new drop_table_result();
        try {
          iface_.drop_table(args.Ns, args.Name, args.If_exists);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("drop_table", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void table_drop_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        table_drop_args args = new table_drop_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        table_drop_result result = new table_drop_result();
        try {
          iface_.table_drop(args.Ns, args.Name, args.If_exists);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("table_drop", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void generate_guid_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        generate_guid_args args = new generate_guid_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        generate_guid_result result = new generate_guid_result();
        result.Success = iface_.generate_guid();
        oprot.WriteMessageBegin(new TMessage("generate_guid", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void create_cell_unique_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        create_cell_unique_args args = new create_cell_unique_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        create_cell_unique_result result = new create_cell_unique_result();
        try {
          result.Success = iface_.create_cell_unique(args.Ns, args.Table_name, args.Key, args.Value);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("create_cell_unique", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void error_get_text_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        error_get_text_args args = new error_get_text_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        error_get_text_result result = new error_get_text_result();
        result.Success = iface_.error_get_text(args.Error_code);
        oprot.WriteMessageBegin(new TMessage("error_get_text", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void status_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        status_args args = new status_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        status_result result = new status_result();
        try {
          result.Success = iface_.status();
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("status", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void shutdown_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        shutdown_args args = new shutdown_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        shutdown_result result = new shutdown_result();
        try {
          iface_.shutdown();
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("shutdown", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class namespace_create_args : TBase
    {
      private string _ns;

      public string Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
      }

      public namespace_create_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Ns = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("namespace_create_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Ns != null && __isset.ns) {
            field.Name = "ns";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Ns);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("namespace_create_args(");
        bool __first = true;
        if (Ns != null && __isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class namespace_create_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public namespace_create_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("namespace_create_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("namespace_create_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class create_namespace_args : TBase
    {
      private string _ns;

      public string Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
      }

      public create_namespace_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Ns = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("create_namespace_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Ns != null && __isset.ns) {
            field.Name = "ns";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Ns);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("create_namespace_args(");
        bool __first = true;
        if (Ns != null && __isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class create_namespace_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public create_namespace_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("create_namespace_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("create_namespace_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class table_create_args : TBase
    {
      private long _ns;
      private string _table_name;
      private Schema _schema;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public Schema Schema
      {
        get
        {
          return _schema;
        }
        set
        {
          __isset.schema = true;
          this._schema = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool schema;
      }

      public table_create_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Table_name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Struct) {
                  Schema = new Schema();
                  Schema.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("table_create_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          if (Table_name != null && __isset.table_name) {
            field.Name = "table_name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Table_name);
            oprot.WriteFieldEnd();
          }
          if (Schema != null && __isset.schema) {
            field.Name = "schema";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            Schema.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("table_create_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (Table_name != null && __isset.table_name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Table_name: ");
          __sb.Append(Table_name);
        }
        if (Schema != null && __isset.schema) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Schema: ");
          __sb.Append(Schema== null ? "<null>" : Schema.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class table_create_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public table_create_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("table_create_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("table_create_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class table_alter_args : TBase
    {
      private long _ns;
      private string _table_name;
      private Schema _schema;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public Schema Schema
      {
        get
        {
          return _schema;
        }
        set
        {
          __isset.schema = true;
          this._schema = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool schema;
      }

      public table_alter_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Table_name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Struct) {
                  Schema = new Schema();
                  Schema.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("table_alter_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          if (Table_name != null && __isset.table_name) {
            field.Name = "table_name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Table_name);
            oprot.WriteFieldEnd();
          }
          if (Schema != null && __isset.schema) {
            field.Name = "schema";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            Schema.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("table_alter_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (Table_name != null && __isset.table_name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Table_name: ");
          __sb.Append(Table_name);
        }
        if (Schema != null && __isset.schema) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Schema: ");
          __sb.Append(Schema== null ? "<null>" : Schema.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class table_alter_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public table_alter_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("table_alter_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("table_alter_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class refresh_table_args : TBase
    {
      private long _ns;
      private string _table_name;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool table_name;
      }

      public refresh_table_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Table_name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("refresh_table_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          if (Table_name != null && __isset.table_name) {
            field.Name = "table_name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Table_name);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("refresh_table_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (Table_name != null && __isset.table_name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Table_name: ");
          __sb.Append(Table_name);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class refresh_table_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public refresh_table_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("refresh_table_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("refresh_table_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class namespace_open_args : TBase
    {
      private string _ns;

      public string Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
      }

      public namespace_open_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Ns = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("namespace_open_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Ns != null && __isset.ns) {
            field.Name = "ns";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Ns);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("namespace_open_args(");
        bool __first = true;
        if (Ns != null && __isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class namespace_open_result : TBase
    {
      private long _success;
      private ClientException _e;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public namespace_open_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I64) {
                  Success = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("namespace_open_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I64;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("namespace_open_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class open_namespace_args : TBase
    {
      private string _ns;

      public string Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
      }

      public open_namespace_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Ns = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("open_namespace_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Ns != null && __isset.ns) {
            field.Name = "ns";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Ns);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("open_namespace_args(");
        bool __first = true;
        if (Ns != null && __isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class open_namespace_result : TBase
    {
      private long _success;
      private ClientException _e;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public open_namespace_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I64) {
                  Success = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("open_namespace_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I64;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("open_namespace_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class namespace_close_args : TBase
    {
      private long _ns;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
      }

      public namespace_close_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("namespace_close_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("namespace_close_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class namespace_close_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public namespace_close_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("namespace_close_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("namespace_close_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class close_namespace_args : TBase
    {
      private long _ns;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
      }

      public close_namespace_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("close_namespace_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("close_namespace_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class close_namespace_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public close_namespace_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("close_namespace_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("close_namespace_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class future_open_args : TBase
    {
      private int _capacity;

      public int Capacity
      {
        get
        {
          return _capacity;
        }
        set
        {
          __isset.capacity = true;
          this._capacity = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool capacity;
      }

      public future_open_args() {
        this._capacity = 0;
        this.__isset.capacity = true;
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  Capacity = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("future_open_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.capacity) {
            field.Name = "capacity";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Capacity);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("future_open_args(");
        bool __first = true;
        if (__isset.capacity) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Capacity: ");
          __sb.Append(Capacity);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class future_open_result : TBase
    {
      private long _success;
      private ClientException _e;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public future_open_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I64) {
                  Success = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("future_open_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I64;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("future_open_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class open_future_args : TBase
    {
      private int _capacity;

      public int Capacity
      {
        get
        {
          return _capacity;
        }
        set
        {
          __isset.capacity = true;
          this._capacity = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool capacity;
      }

      public open_future_args() {
        this._capacity = 0;
        this.__isset.capacity = true;
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  Capacity = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("open_future_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.capacity) {
            field.Name = "capacity";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Capacity);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("open_future_args(");
        bool __first = true;
        if (__isset.capacity) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Capacity: ");
          __sb.Append(Capacity);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class open_future_result : TBase
    {
      private long _success;
      private ClientException _e;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public open_future_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I64) {
                  Success = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("open_future_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I64;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("open_future_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class future_cancel_args : TBase
    {
      private long _ff;

      public long Ff
      {
        get
        {
          return _ff;
        }
        set
        {
          __isset.ff = true;
          this._ff = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ff;
      }

      public future_cancel_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ff = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("future_cancel_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ff) {
            field.Name = "ff";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ff);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("future_cancel_args(");
        bool __first = true;
        if (__isset.ff) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ff: ");
          __sb.Append(Ff);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class future_cancel_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public future_cancel_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("future_cancel_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("future_cancel_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class cancel_future_args : TBase
    {
      private long _ff;

      public long Ff
      {
        get
        {
          return _ff;
        }
        set
        {
          __isset.ff = true;
          this._ff = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ff;
      }

      public cancel_future_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ff = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("cancel_future_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ff) {
            field.Name = "ff";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ff);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("cancel_future_args(");
        bool __first = true;
        if (__isset.ff) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ff: ");
          __sb.Append(Ff);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class cancel_future_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public cancel_future_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("cancel_future_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("cancel_future_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class future_get_result_args : TBase
    {
      private long _ff;
      private int _timeout_millis;

      public long Ff
      {
        get
        {
          return _ff;
        }
        set
        {
          __isset.ff = true;
          this._ff = value;
        }
      }

      public int Timeout_millis
      {
        get
        {
          return _timeout_millis;
        }
        set
        {
          __isset.timeout_millis = true;
          this._timeout_millis = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ff;
        public bool timeout_millis;
      }

      public future_get_result_args() {
        this._timeout_millis = 0;
        this.__isset.timeout_millis = true;
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ff = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Timeout_millis = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("future_get_result_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ff) {
            field.Name = "ff";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ff);
            oprot.WriteFieldEnd();
          }
          if (__isset.timeout_millis) {
            field.Name = "timeout_millis";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Timeout_millis);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("future_get_result_args(");
        bool __first = true;
        if (__isset.ff) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ff: ");
          __sb.Append(Ff);
        }
        if (__isset.timeout_millis) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Timeout_millis: ");
          __sb.Append(Timeout_millis);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class future_get_result_result : TBase
    {
      private Result _success;
      private ClientException _e;

      public Result Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public future_get_result_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new Result();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("future_get_result_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("future_get_result_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class get_future_result_args : TBase
    {
      private long _ff;
      private int _timeout_millis;

      public long Ff
      {
        get
        {
          return _ff;
        }
        set
        {
          __isset.ff = true;
          this._ff = value;
        }
      }

      public int Timeout_millis
      {
        get
        {
          return _timeout_millis;
        }
        set
        {
          __isset.timeout_millis = true;
          this._timeout_millis = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ff;
        public bool timeout_millis;
      }

      public get_future_result_args() {
        this._timeout_millis = 0;
        this.__isset.timeout_millis = true;
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ff = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Timeout_millis = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("get_future_result_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ff) {
            field.Name = "ff";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ff);
            oprot.WriteFieldEnd();
          }
          if (__isset.timeout_millis) {
            field.Name = "timeout_millis";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Timeout_millis);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("get_future_result_args(");
        bool __first = true;
        if (__isset.ff) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ff: ");
          __sb.Append(Ff);
        }
        if (__isset.timeout_millis) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Timeout_millis: ");
          __sb.Append(Timeout_millis);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class get_future_result_result : TBase
    {
      private Result _success;
      private ClientException _e;

      public Result Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public get_future_result_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new Result();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("get_future_result_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("get_future_result_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class future_get_result_as_arrays_args : TBase
    {
      private long _ff;
      private int _timeout_millis;

      public long Ff
      {
        get
        {
          return _ff;
        }
        set
        {
          __isset.ff = true;
          this._ff = value;
        }
      }

      public int Timeout_millis
      {
        get
        {
          return _timeout_millis;
        }
        set
        {
          __isset.timeout_millis = true;
          this._timeout_millis = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ff;
        public bool timeout_millis;
      }

      public future_get_result_as_arrays_args() {
        this._timeout_millis = 0;
        this.__isset.timeout_millis = true;
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ff = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Timeout_millis = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("future_get_result_as_arrays_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ff) {
            field.Name = "ff";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ff);
            oprot.WriteFieldEnd();
          }
          if (__isset.timeout_millis) {
            field.Name = "timeout_millis";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Timeout_millis);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("future_get_result_as_arrays_args(");
        bool __first = true;
        if (__isset.ff) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ff: ");
          __sb.Append(Ff);
        }
        if (__isset.timeout_millis) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Timeout_millis: ");
          __sb.Append(Timeout_millis);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class future_get_result_as_arrays_result : TBase
    {
      private ResultAsArrays _success;
      private ClientException _e;

      public ResultAsArrays Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public future_get_result_as_arrays_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new ResultAsArrays();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("future_get_result_as_arrays_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("future_get_result_as_arrays_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class get_future_result_as_arrays_args : TBase
    {
      private long _ff;
      private int _timeout_millis;

      public long Ff
      {
        get
        {
          return _ff;
        }
        set
        {
          __isset.ff = true;
          this._ff = value;
        }
      }

      public int Timeout_millis
      {
        get
        {
          return _timeout_millis;
        }
        set
        {
          __isset.timeout_millis = true;
          this._timeout_millis = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ff;
        public bool timeout_millis;
      }

      public get_future_result_as_arrays_args() {
        this._timeout_millis = 0;
        this.__isset.timeout_millis = true;
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ff = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Timeout_millis = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("get_future_result_as_arrays_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ff) {
            field.Name = "ff";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ff);
            oprot.WriteFieldEnd();
          }
          if (__isset.timeout_millis) {
            field.Name = "timeout_millis";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Timeout_millis);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("get_future_result_as_arrays_args(");
        bool __first = true;
        if (__isset.ff) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ff: ");
          __sb.Append(Ff);
        }
        if (__isset.timeout_millis) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Timeout_millis: ");
          __sb.Append(Timeout_millis);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class get_future_result_as_arrays_result : TBase
    {
      private ResultAsArrays _success;
      private ClientException _e;

      public ResultAsArrays Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public get_future_result_as_arrays_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new ResultAsArrays();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("get_future_result_as_arrays_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("get_future_result_as_arrays_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class future_get_result_serialized_args : TBase
    {
      private long _ff;
      private int _timeout_millis;

      public long Ff
      {
        get
        {
          return _ff;
        }
        set
        {
          __isset.ff = true;
          this._ff = value;
        }
      }

      public int Timeout_millis
      {
        get
        {
          return _timeout_millis;
        }
        set
        {
          __isset.timeout_millis = true;
          this._timeout_millis = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ff;
        public bool timeout_millis;
      }

      public future_get_result_serialized_args() {
        this._timeout_millis = 0;
        this.__isset.timeout_millis = true;
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ff = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Timeout_millis = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("future_get_result_serialized_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ff) {
            field.Name = "ff";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ff);
            oprot.WriteFieldEnd();
          }
          if (__isset.timeout_millis) {
            field.Name = "timeout_millis";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Timeout_millis);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("future_get_result_serialized_args(");
        bool __first = true;
        if (__isset.ff) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ff: ");
          __sb.Append(Ff);
        }
        if (__isset.timeout_millis) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Timeout_millis: ");
          __sb.Append(Timeout_millis);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class future_get_result_serialized_result : TBase
    {
      private ResultSerialized _success;
      private ClientException _e;

      public ResultSerialized Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public future_get_result_serialized_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new ResultSerialized();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("future_get_result_serialized_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("future_get_result_serialized_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class get_future_result_serialized_args : TBase
    {
      private long _ff;
      private int _timeout_millis;

      public long Ff
      {
        get
        {
          return _ff;
        }
        set
        {
          __isset.ff = true;
          this._ff = value;
        }
      }

      public int Timeout_millis
      {
        get
        {
          return _timeout_millis;
        }
        set
        {
          __isset.timeout_millis = true;
          this._timeout_millis = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ff;
        public bool timeout_millis;
      }

      public get_future_result_serialized_args() {
        this._timeout_millis = 0;
        this.__isset.timeout_millis = true;
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ff = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Timeout_millis = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("get_future_result_serialized_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ff) {
            field.Name = "ff";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ff);
            oprot.WriteFieldEnd();
          }
          if (__isset.timeout_millis) {
            field.Name = "timeout_millis";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Timeout_millis);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("get_future_result_serialized_args(");
        bool __first = true;
        if (__isset.ff) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ff: ");
          __sb.Append(Ff);
        }
        if (__isset.timeout_millis) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Timeout_millis: ");
          __sb.Append(Timeout_millis);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class get_future_result_serialized_result : TBase
    {
      private ResultSerialized _success;
      private ClientException _e;

      public ResultSerialized Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public get_future_result_serialized_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new ResultSerialized();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("get_future_result_serialized_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("get_future_result_serialized_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class future_is_empty_args : TBase
    {
      private long _ff;

      public long Ff
      {
        get
        {
          return _ff;
        }
        set
        {
          __isset.ff = true;
          this._ff = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ff;
      }

      public future_is_empty_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ff = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("future_is_empty_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ff) {
            field.Name = "ff";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ff);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("future_is_empty_args(");
        bool __first = true;
        if (__isset.ff) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ff: ");
          __sb.Append(Ff);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class future_is_empty_result : TBase
    {
      private bool _success;
      private ClientException _e;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public future_is_empty_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("future_is_empty_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("future_is_empty_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class future_is_full_args : TBase
    {
      private long _ff;

      public long Ff
      {
        get
        {
          return _ff;
        }
        set
        {
          __isset.ff = true;
          this._ff = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ff;
      }

      public future_is_full_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ff = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("future_is_full_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ff) {
            field.Name = "ff";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ff);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("future_is_full_args(");
        bool __first = true;
        if (__isset.ff) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ff: ");
          __sb.Append(Ff);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class future_is_full_result : TBase
    {
      private bool _success;
      private ClientException _e;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public future_is_full_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("future_is_full_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("future_is_full_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class future_is_cancelled_args : TBase
    {
      private long _ff;

      public long Ff
      {
        get
        {
          return _ff;
        }
        set
        {
          __isset.ff = true;
          this._ff = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ff;
      }

      public future_is_cancelled_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ff = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("future_is_cancelled_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ff) {
            field.Name = "ff";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ff);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("future_is_cancelled_args(");
        bool __first = true;
        if (__isset.ff) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ff: ");
          __sb.Append(Ff);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class future_is_cancelled_result : TBase
    {
      private bool _success;
      private ClientException _e;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public future_is_cancelled_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("future_is_cancelled_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("future_is_cancelled_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class future_has_outstanding_args : TBase
    {
      private long _ff;

      public long Ff
      {
        get
        {
          return _ff;
        }
        set
        {
          __isset.ff = true;
          this._ff = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ff;
      }

      public future_has_outstanding_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ff = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("future_has_outstanding_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ff) {
            field.Name = "ff";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ff);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("future_has_outstanding_args(");
        bool __first = true;
        if (__isset.ff) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ff: ");
          __sb.Append(Ff);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class future_has_outstanding_result : TBase
    {
      private bool _success;
      private ClientException _e;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public future_has_outstanding_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("future_has_outstanding_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("future_has_outstanding_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class future_close_args : TBase
    {
      private long _ff;

      public long Ff
      {
        get
        {
          return _ff;
        }
        set
        {
          __isset.ff = true;
          this._ff = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ff;
      }

      public future_close_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ff = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("future_close_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ff) {
            field.Name = "ff";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ff);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("future_close_args(");
        bool __first = true;
        if (__isset.ff) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ff: ");
          __sb.Append(Ff);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class future_close_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public future_close_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("future_close_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("future_close_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class close_future_args : TBase
    {
      private long _ff;

      public long Ff
      {
        get
        {
          return _ff;
        }
        set
        {
          __isset.ff = true;
          this._ff = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ff;
      }

      public close_future_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ff = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("close_future_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ff) {
            field.Name = "ff";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ff);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("close_future_args(");
        bool __first = true;
        if (__isset.ff) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ff: ");
          __sb.Append(Ff);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class close_future_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public close_future_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("close_future_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("close_future_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class scanner_open_args : TBase
    {
      private long _ns;
      private string _table_name;
      private ScanSpec _scan_spec;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public ScanSpec Scan_spec
      {
        get
        {
          return _scan_spec;
        }
        set
        {
          __isset.scan_spec = true;
          this._scan_spec = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool scan_spec;
      }

      public scanner_open_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Table_name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Struct) {
                  Scan_spec = new ScanSpec();
                  Scan_spec.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("scanner_open_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          if (Table_name != null && __isset.table_name) {
            field.Name = "table_name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Table_name);
            oprot.WriteFieldEnd();
          }
          if (Scan_spec != null && __isset.scan_spec) {
            field.Name = "scan_spec";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            Scan_spec.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("scanner_open_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (Table_name != null && __isset.table_name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Table_name: ");
          __sb.Append(Table_name);
        }
        if (Scan_spec != null && __isset.scan_spec) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Scan_spec: ");
          __sb.Append(Scan_spec== null ? "<null>" : Scan_spec.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class scanner_open_result : TBase
    {
      private long _success;
      private ClientException _e;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public scanner_open_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I64) {
                  Success = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("scanner_open_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I64;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("scanner_open_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class open_scanner_args : TBase
    {
      private long _ns;
      private string _table_name;
      private ScanSpec _scan_spec;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public ScanSpec Scan_spec
      {
        get
        {
          return _scan_spec;
        }
        set
        {
          __isset.scan_spec = true;
          this._scan_spec = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool scan_spec;
      }

      public open_scanner_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Table_name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Struct) {
                  Scan_spec = new ScanSpec();
                  Scan_spec.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("open_scanner_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          if (Table_name != null && __isset.table_name) {
            field.Name = "table_name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Table_name);
            oprot.WriteFieldEnd();
          }
          if (Scan_spec != null && __isset.scan_spec) {
            field.Name = "scan_spec";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            Scan_spec.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("open_scanner_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (Table_name != null && __isset.table_name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Table_name: ");
          __sb.Append(Table_name);
        }
        if (Scan_spec != null && __isset.scan_spec) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Scan_spec: ");
          __sb.Append(Scan_spec== null ? "<null>" : Scan_spec.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class open_scanner_result : TBase
    {
      private long _success;
      private ClientException _e;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public open_scanner_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I64) {
                  Success = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("open_scanner_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I64;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("open_scanner_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class async_scanner_open_args : TBase
    {
      private long _ns;
      private string _table_name;
      private long _future;
      private ScanSpec _scan_spec;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public long Future
      {
        get
        {
          return _future;
        }
        set
        {
          __isset.future = true;
          this._future = value;
        }
      }

      public ScanSpec Scan_spec
      {
        get
        {
          return _scan_spec;
        }
        set
        {
          __isset.scan_spec = true;
          this._scan_spec = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool future;
        public bool scan_spec;
      }

      public async_scanner_open_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Table_name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I64) {
                  Future = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.Struct) {
                  Scan_spec = new ScanSpec();
                  Scan_spec.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("async_scanner_open_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          if (Table_name != null && __isset.table_name) {
            field.Name = "table_name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Table_name);
            oprot.WriteFieldEnd();
          }
          if (__isset.future) {
            field.Name = "future";
            field.Type = TType.I64;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Future);
            oprot.WriteFieldEnd();
          }
          if (Scan_spec != null && __isset.scan_spec) {
            field.Name = "scan_spec";
            field.Type = TType.Struct;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            Scan_spec.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("async_scanner_open_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (Table_name != null && __isset.table_name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Table_name: ");
          __sb.Append(Table_name);
        }
        if (__isset.future) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Future: ");
          __sb.Append(Future);
        }
        if (Scan_spec != null && __isset.scan_spec) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Scan_spec: ");
          __sb.Append(Scan_spec== null ? "<null>" : Scan_spec.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class async_scanner_open_result : TBase
    {
      private long _success;
      private ClientException _e;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public async_scanner_open_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I64) {
                  Success = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("async_scanner_open_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I64;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("async_scanner_open_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class open_scanner_async_args : TBase
    {
      private long _ns;
      private string _table_name;
      private long _future;
      private ScanSpec _scan_spec;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public long Future
      {
        get
        {
          return _future;
        }
        set
        {
          __isset.future = true;
          this._future = value;
        }
      }

      public ScanSpec Scan_spec
      {
        get
        {
          return _scan_spec;
        }
        set
        {
          __isset.scan_spec = true;
          this._scan_spec = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool future;
        public bool scan_spec;
      }

      public open_scanner_async_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Table_name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I64) {
                  Future = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.Struct) {
                  Scan_spec = new ScanSpec();
                  Scan_spec.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("open_scanner_async_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          if (Table_name != null && __isset.table_name) {
            field.Name = "table_name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Table_name);
            oprot.WriteFieldEnd();
          }
          if (__isset.future) {
            field.Name = "future";
            field.Type = TType.I64;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Future);
            oprot.WriteFieldEnd();
          }
          if (Scan_spec != null && __isset.scan_spec) {
            field.Name = "scan_spec";
            field.Type = TType.Struct;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            Scan_spec.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("open_scanner_async_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (Table_name != null && __isset.table_name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Table_name: ");
          __sb.Append(Table_name);
        }
        if (__isset.future) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Future: ");
          __sb.Append(Future);
        }
        if (Scan_spec != null && __isset.scan_spec) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Scan_spec: ");
          __sb.Append(Scan_spec== null ? "<null>" : Scan_spec.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class open_scanner_async_result : TBase
    {
      private long _success;
      private ClientException _e;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public open_scanner_async_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I64) {
                  Success = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("open_scanner_async_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I64;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("open_scanner_async_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class scanner_close_args : TBase
    {
      private long _scanner;

      public long Scanner
      {
        get
        {
          return _scanner;
        }
        set
        {
          __isset.scanner = true;
          this._scanner = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool scanner;
      }

      public scanner_close_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Scanner = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("scanner_close_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.scanner) {
            field.Name = "scanner";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Scanner);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("scanner_close_args(");
        bool __first = true;
        if (__isset.scanner) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Scanner: ");
          __sb.Append(Scanner);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class scanner_close_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public scanner_close_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("scanner_close_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("scanner_close_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class close_scanner_args : TBase
    {
      private long _scanner;

      public long Scanner
      {
        get
        {
          return _scanner;
        }
        set
        {
          __isset.scanner = true;
          this._scanner = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool scanner;
      }

      public close_scanner_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Scanner = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("close_scanner_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.scanner) {
            field.Name = "scanner";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Scanner);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("close_scanner_args(");
        bool __first = true;
        if (__isset.scanner) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Scanner: ");
          __sb.Append(Scanner);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class close_scanner_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public close_scanner_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("close_scanner_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("close_scanner_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class async_scanner_cancel_args : TBase
    {
      private long _scanner;

      public long Scanner
      {
        get
        {
          return _scanner;
        }
        set
        {
          __isset.scanner = true;
          this._scanner = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool scanner;
      }

      public async_scanner_cancel_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Scanner = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("async_scanner_cancel_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.scanner) {
            field.Name = "scanner";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Scanner);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("async_scanner_cancel_args(");
        bool __first = true;
        if (__isset.scanner) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Scanner: ");
          __sb.Append(Scanner);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class async_scanner_cancel_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public async_scanner_cancel_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("async_scanner_cancel_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("async_scanner_cancel_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class cancel_scanner_async_args : TBase
    {
      private long _scanner;

      public long Scanner
      {
        get
        {
          return _scanner;
        }
        set
        {
          __isset.scanner = true;
          this._scanner = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool scanner;
      }

      public cancel_scanner_async_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Scanner = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("cancel_scanner_async_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.scanner) {
            field.Name = "scanner";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Scanner);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("cancel_scanner_async_args(");
        bool __first = true;
        if (__isset.scanner) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Scanner: ");
          __sb.Append(Scanner);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class cancel_scanner_async_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public cancel_scanner_async_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("cancel_scanner_async_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("cancel_scanner_async_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class async_scanner_close_args : TBase
    {
      private long _scanner;

      public long Scanner
      {
        get
        {
          return _scanner;
        }
        set
        {
          __isset.scanner = true;
          this._scanner = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool scanner;
      }

      public async_scanner_close_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Scanner = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("async_scanner_close_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.scanner) {
            field.Name = "scanner";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Scanner);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("async_scanner_close_args(");
        bool __first = true;
        if (__isset.scanner) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Scanner: ");
          __sb.Append(Scanner);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class async_scanner_close_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public async_scanner_close_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("async_scanner_close_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("async_scanner_close_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class close_scanner_async_args : TBase
    {
      private long _scanner;

      public long Scanner
      {
        get
        {
          return _scanner;
        }
        set
        {
          __isset.scanner = true;
          this._scanner = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool scanner;
      }

      public close_scanner_async_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Scanner = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("close_scanner_async_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.scanner) {
            field.Name = "scanner";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Scanner);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("close_scanner_async_args(");
        bool __first = true;
        if (__isset.scanner) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Scanner: ");
          __sb.Append(Scanner);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class close_scanner_async_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public close_scanner_async_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("close_scanner_async_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("close_scanner_async_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class scanner_get_cells_args : TBase
    {
      private long _scanner;

      public long Scanner
      {
        get
        {
          return _scanner;
        }
        set
        {
          __isset.scanner = true;
          this._scanner = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool scanner;
      }

      public scanner_get_cells_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Scanner = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("scanner_get_cells_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.scanner) {
            field.Name = "scanner";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Scanner);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("scanner_get_cells_args(");
        bool __first = true;
        if (__isset.scanner) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Scanner: ");
          __sb.Append(Scanner);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class scanner_get_cells_result : TBase
    {
      private List<Cell> _success;
      private ClientException _e;

      public List<Cell> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public scanner_get_cells_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<Cell>();
                    TList _list38 = iprot.ReadListBegin();
                    for( int _i39 = 0; _i39 < _list38.Count; ++_i39)
                    {
                      Cell _elem40;
                      _elem40 = new Cell();
                      _elem40.Read(iprot);
                      Success.Add(_elem40);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("scanner_get_cells_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (Cell _iter41 in Success)
                {
                  _iter41.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("scanner_get_cells_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class next_cells_args : TBase
    {
      private long _scanner;

      public long Scanner
      {
        get
        {
          return _scanner;
        }
        set
        {
          __isset.scanner = true;
          this._scanner = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool scanner;
      }

      public next_cells_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Scanner = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("next_cells_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.scanner) {
            field.Name = "scanner";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Scanner);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("next_cells_args(");
        bool __first = true;
        if (__isset.scanner) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Scanner: ");
          __sb.Append(Scanner);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class next_cells_result : TBase
    {
      private List<Cell> _success;
      private ClientException _e;

      public List<Cell> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public next_cells_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<Cell>();
                    TList _list42 = iprot.ReadListBegin();
                    for( int _i43 = 0; _i43 < _list42.Count; ++_i43)
                    {
                      Cell _elem44;
                      _elem44 = new Cell();
                      _elem44.Read(iprot);
                      Success.Add(_elem44);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("next_cells_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (Cell _iter45 in Success)
                {
                  _iter45.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("next_cells_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class scanner_get_cells_as_arrays_args : TBase
    {
      private long _scanner;

      public long Scanner
      {
        get
        {
          return _scanner;
        }
        set
        {
          __isset.scanner = true;
          this._scanner = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool scanner;
      }

      public scanner_get_cells_as_arrays_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Scanner = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("scanner_get_cells_as_arrays_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.scanner) {
            field.Name = "scanner";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Scanner);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("scanner_get_cells_as_arrays_args(");
        bool __first = true;
        if (__isset.scanner) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Scanner: ");
          __sb.Append(Scanner);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class scanner_get_cells_as_arrays_result : TBase
    {
      private List<List<string>> _success;
      private ClientException _e;

      public List<List<string>> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public scanner_get_cells_as_arrays_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<List<string>>();
                    TList _list46 = iprot.ReadListBegin();
                    for( int _i47 = 0; _i47 < _list46.Count; ++_i47)
                    {
                      List<string> _elem48;
                      {
                        _elem48 = new List<string>();
                        TList _list49 = iprot.ReadListBegin();
                        for( int _i50 = 0; _i50 < _list49.Count; ++_i50)
                        {
                          string _elem51;
                          _elem51 = iprot.ReadString();
                          _elem48.Add(_elem51);
                        }
                        iprot.ReadListEnd();
                      }
                      Success.Add(_elem48);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("scanner_get_cells_as_arrays_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.List, Success.Count));
                foreach (List<string> _iter52 in Success)
                {
                  {
                    oprot.WriteListBegin(new TList(TType.String, _iter52.Count));
                    foreach (string _iter53 in _iter52)
                    {
                      oprot.WriteString(_iter53);
                    }
                    oprot.WriteListEnd();
                  }
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("scanner_get_cells_as_arrays_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class next_cells_as_arrays_args : TBase
    {
      private long _scanner;

      public long Scanner
      {
        get
        {
          return _scanner;
        }
        set
        {
          __isset.scanner = true;
          this._scanner = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool scanner;
      }

      public next_cells_as_arrays_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Scanner = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("next_cells_as_arrays_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.scanner) {
            field.Name = "scanner";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Scanner);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("next_cells_as_arrays_args(");
        bool __first = true;
        if (__isset.scanner) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Scanner: ");
          __sb.Append(Scanner);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class next_cells_as_arrays_result : TBase
    {
      private List<List<string>> _success;
      private ClientException _e;

      public List<List<string>> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public next_cells_as_arrays_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<List<string>>();
                    TList _list54 = iprot.ReadListBegin();
                    for( int _i55 = 0; _i55 < _list54.Count; ++_i55)
                    {
                      List<string> _elem56;
                      {
                        _elem56 = new List<string>();
                        TList _list57 = iprot.ReadListBegin();
                        for( int _i58 = 0; _i58 < _list57.Count; ++_i58)
                        {
                          string _elem59;
                          _elem59 = iprot.ReadString();
                          _elem56.Add(_elem59);
                        }
                        iprot.ReadListEnd();
                      }
                      Success.Add(_elem56);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("next_cells_as_arrays_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.List, Success.Count));
                foreach (List<string> _iter60 in Success)
                {
                  {
                    oprot.WriteListBegin(new TList(TType.String, _iter60.Count));
                    foreach (string _iter61 in _iter60)
                    {
                      oprot.WriteString(_iter61);
                    }
                    oprot.WriteListEnd();
                  }
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("next_cells_as_arrays_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class scanner_get_cells_serialized_args : TBase
    {
      private long _scanner;

      public long Scanner
      {
        get
        {
          return _scanner;
        }
        set
        {
          __isset.scanner = true;
          this._scanner = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool scanner;
      }

      public scanner_get_cells_serialized_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Scanner = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("scanner_get_cells_serialized_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.scanner) {
            field.Name = "scanner";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Scanner);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("scanner_get_cells_serialized_args(");
        bool __first = true;
        if (__isset.scanner) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Scanner: ");
          __sb.Append(Scanner);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class scanner_get_cells_serialized_result : TBase
    {
      private byte[] _success;
      private ClientException _e;

      public byte[] Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public scanner_get_cells_serialized_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("scanner_get_cells_serialized_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteBinary(Success);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("scanner_get_cells_serialized_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class next_cells_serialized_args : TBase
    {
      private long _scanner;

      public long Scanner
      {
        get
        {
          return _scanner;
        }
        set
        {
          __isset.scanner = true;
          this._scanner = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool scanner;
      }

      public next_cells_serialized_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Scanner = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("next_cells_serialized_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.scanner) {
            field.Name = "scanner";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Scanner);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("next_cells_serialized_args(");
        bool __first = true;
        if (__isset.scanner) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Scanner: ");
          __sb.Append(Scanner);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class next_cells_serialized_result : TBase
    {
      private byte[] _success;
      private ClientException _e;

      public byte[] Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public next_cells_serialized_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("next_cells_serialized_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteBinary(Success);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("next_cells_serialized_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class scanner_get_row_args : TBase
    {
      private long _scanner;

      public long Scanner
      {
        get
        {
          return _scanner;
        }
        set
        {
          __isset.scanner = true;
          this._scanner = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool scanner;
      }

      public scanner_get_row_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Scanner = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("scanner_get_row_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.scanner) {
            field.Name = "scanner";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Scanner);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("scanner_get_row_args(");
        bool __first = true;
        if (__isset.scanner) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Scanner: ");
          __sb.Append(Scanner);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class scanner_get_row_result : TBase
    {
      private List<Cell> _success;
      private ClientException _e;

      public List<Cell> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public scanner_get_row_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<Cell>();
                    TList _list62 = iprot.ReadListBegin();
                    for( int _i63 = 0; _i63 < _list62.Count; ++_i63)
                    {
                      Cell _elem64;
                      _elem64 = new Cell();
                      _elem64.Read(iprot);
                      Success.Add(_elem64);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("scanner_get_row_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (Cell _iter65 in Success)
                {
                  _iter65.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("scanner_get_row_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class next_row_args : TBase
    {
      private long _scanner;

      public long Scanner
      {
        get
        {
          return _scanner;
        }
        set
        {
          __isset.scanner = true;
          this._scanner = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool scanner;
      }

      public next_row_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Scanner = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("next_row_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.scanner) {
            field.Name = "scanner";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Scanner);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("next_row_args(");
        bool __first = true;
        if (__isset.scanner) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Scanner: ");
          __sb.Append(Scanner);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class next_row_result : TBase
    {
      private List<Cell> _success;
      private ClientException _e;

      public List<Cell> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public next_row_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<Cell>();
                    TList _list66 = iprot.ReadListBegin();
                    for( int _i67 = 0; _i67 < _list66.Count; ++_i67)
                    {
                      Cell _elem68;
                      _elem68 = new Cell();
                      _elem68.Read(iprot);
                      Success.Add(_elem68);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("next_row_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (Cell _iter69 in Success)
                {
                  _iter69.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("next_row_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class scanner_get_row_as_arrays_args : TBase
    {
      private long _scanner;

      public long Scanner
      {
        get
        {
          return _scanner;
        }
        set
        {
          __isset.scanner = true;
          this._scanner = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool scanner;
      }

      public scanner_get_row_as_arrays_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Scanner = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("scanner_get_row_as_arrays_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.scanner) {
            field.Name = "scanner";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Scanner);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("scanner_get_row_as_arrays_args(");
        bool __first = true;
        if (__isset.scanner) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Scanner: ");
          __sb.Append(Scanner);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class scanner_get_row_as_arrays_result : TBase
    {
      private List<List<string>> _success;
      private ClientException _e;

      public List<List<string>> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public scanner_get_row_as_arrays_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<List<string>>();
                    TList _list70 = iprot.ReadListBegin();
                    for( int _i71 = 0; _i71 < _list70.Count; ++_i71)
                    {
                      List<string> _elem72;
                      {
                        _elem72 = new List<string>();
                        TList _list73 = iprot.ReadListBegin();
                        for( int _i74 = 0; _i74 < _list73.Count; ++_i74)
                        {
                          string _elem75;
                          _elem75 = iprot.ReadString();
                          _elem72.Add(_elem75);
                        }
                        iprot.ReadListEnd();
                      }
                      Success.Add(_elem72);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("scanner_get_row_as_arrays_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.List, Success.Count));
                foreach (List<string> _iter76 in Success)
                {
                  {
                    oprot.WriteListBegin(new TList(TType.String, _iter76.Count));
                    foreach (string _iter77 in _iter76)
                    {
                      oprot.WriteString(_iter77);
                    }
                    oprot.WriteListEnd();
                  }
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("scanner_get_row_as_arrays_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class next_row_as_arrays_args : TBase
    {
      private long _scanner;

      public long Scanner
      {
        get
        {
          return _scanner;
        }
        set
        {
          __isset.scanner = true;
          this._scanner = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool scanner;
      }

      public next_row_as_arrays_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Scanner = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("next_row_as_arrays_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.scanner) {
            field.Name = "scanner";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Scanner);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("next_row_as_arrays_args(");
        bool __first = true;
        if (__isset.scanner) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Scanner: ");
          __sb.Append(Scanner);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class next_row_as_arrays_result : TBase
    {
      private List<List<string>> _success;
      private ClientException _e;

      public List<List<string>> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public next_row_as_arrays_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<List<string>>();
                    TList _list78 = iprot.ReadListBegin();
                    for( int _i79 = 0; _i79 < _list78.Count; ++_i79)
                    {
                      List<string> _elem80;
                      {
                        _elem80 = new List<string>();
                        TList _list81 = iprot.ReadListBegin();
                        for( int _i82 = 0; _i82 < _list81.Count; ++_i82)
                        {
                          string _elem83;
                          _elem83 = iprot.ReadString();
                          _elem80.Add(_elem83);
                        }
                        iprot.ReadListEnd();
                      }
                      Success.Add(_elem80);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("next_row_as_arrays_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.List, Success.Count));
                foreach (List<string> _iter84 in Success)
                {
                  {
                    oprot.WriteListBegin(new TList(TType.String, _iter84.Count));
                    foreach (string _iter85 in _iter84)
                    {
                      oprot.WriteString(_iter85);
                    }
                    oprot.WriteListEnd();
                  }
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("next_row_as_arrays_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class scanner_get_row_serialized_args : TBase
    {
      private long _scanner;

      public long Scanner
      {
        get
        {
          return _scanner;
        }
        set
        {
          __isset.scanner = true;
          this._scanner = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool scanner;
      }

      public scanner_get_row_serialized_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Scanner = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("scanner_get_row_serialized_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.scanner) {
            field.Name = "scanner";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Scanner);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("scanner_get_row_serialized_args(");
        bool __first = true;
        if (__isset.scanner) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Scanner: ");
          __sb.Append(Scanner);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class scanner_get_row_serialized_result : TBase
    {
      private byte[] _success;
      private ClientException _e;

      public byte[] Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public scanner_get_row_serialized_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("scanner_get_row_serialized_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteBinary(Success);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("scanner_get_row_serialized_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class next_row_serialized_args : TBase
    {
      private long _scanner;

      public long Scanner
      {
        get
        {
          return _scanner;
        }
        set
        {
          __isset.scanner = true;
          this._scanner = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool scanner;
      }

      public next_row_serialized_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Scanner = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("next_row_serialized_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.scanner) {
            field.Name = "scanner";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Scanner);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("next_row_serialized_args(");
        bool __first = true;
        if (__isset.scanner) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Scanner: ");
          __sb.Append(Scanner);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class next_row_serialized_result : TBase
    {
      private byte[] _success;
      private ClientException _e;

      public byte[] Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public next_row_serialized_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("next_row_serialized_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteBinary(Success);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("next_row_serialized_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class get_row_args : TBase
    {
      private long _ns;
      private string _table_name;
      private string _row;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public string Row
      {
        get
        {
          return _row;
        }
        set
        {
          __isset.row = true;
          this._row = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool row;
      }

      public get_row_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Table_name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Row = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("get_row_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          if (Table_name != null && __isset.table_name) {
            field.Name = "table_name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Table_name);
            oprot.WriteFieldEnd();
          }
          if (Row != null && __isset.row) {
            field.Name = "row";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Row);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("get_row_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (Table_name != null && __isset.table_name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Table_name: ");
          __sb.Append(Table_name);
        }
        if (Row != null && __isset.row) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Row: ");
          __sb.Append(Row);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class get_row_result : TBase
    {
      private List<Cell> _success;
      private ClientException _e;

      public List<Cell> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public get_row_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<Cell>();
                    TList _list86 = iprot.ReadListBegin();
                    for( int _i87 = 0; _i87 < _list86.Count; ++_i87)
                    {
                      Cell _elem88;
                      _elem88 = new Cell();
                      _elem88.Read(iprot);
                      Success.Add(_elem88);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("get_row_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (Cell _iter89 in Success)
                {
                  _iter89.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("get_row_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class get_row_as_arrays_args : TBase
    {
      private long _ns;
      private string _name;
      private string _row;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }

      public string Row
      {
        get
        {
          return _row;
        }
        set
        {
          __isset.row = true;
          this._row = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool name;
        public bool row;
      }

      public get_row_as_arrays_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Row = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("get_row_as_arrays_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          if (Name != null && __isset.name) {
            field.Name = "name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Name);
            oprot.WriteFieldEnd();
          }
          if (Row != null && __isset.row) {
            field.Name = "row";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Row);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("get_row_as_arrays_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (Name != null && __isset.name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Name: ");
          __sb.Append(Name);
        }
        if (Row != null && __isset.row) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Row: ");
          __sb.Append(Row);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class get_row_as_arrays_result : TBase
    {
      private List<List<string>> _success;
      private ClientException _e;

      public List<List<string>> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public get_row_as_arrays_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<List<string>>();
                    TList _list90 = iprot.ReadListBegin();
                    for( int _i91 = 0; _i91 < _list90.Count; ++_i91)
                    {
                      List<string> _elem92;
                      {
                        _elem92 = new List<string>();
                        TList _list93 = iprot.ReadListBegin();
                        for( int _i94 = 0; _i94 < _list93.Count; ++_i94)
                        {
                          string _elem95;
                          _elem95 = iprot.ReadString();
                          _elem92.Add(_elem95);
                        }
                        iprot.ReadListEnd();
                      }
                      Success.Add(_elem92);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("get_row_as_arrays_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.List, Success.Count));
                foreach (List<string> _iter96 in Success)
                {
                  {
                    oprot.WriteListBegin(new TList(TType.String, _iter96.Count));
                    foreach (string _iter97 in _iter96)
                    {
                      oprot.WriteString(_iter97);
                    }
                    oprot.WriteListEnd();
                  }
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("get_row_as_arrays_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class get_row_serialized_args : TBase
    {
      private long _ns;
      private string _table_name;
      private string _row;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public string Row
      {
        get
        {
          return _row;
        }
        set
        {
          __isset.row = true;
          this._row = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool row;
      }

      public get_row_serialized_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Table_name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Row = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("get_row_serialized_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          if (Table_name != null && __isset.table_name) {
            field.Name = "table_name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Table_name);
            oprot.WriteFieldEnd();
          }
          if (Row != null && __isset.row) {
            field.Name = "row";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Row);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("get_row_serialized_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (Table_name != null && __isset.table_name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Table_name: ");
          __sb.Append(Table_name);
        }
        if (Row != null && __isset.row) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Row: ");
          __sb.Append(Row);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class get_row_serialized_result : TBase
    {
      private byte[] _success;
      private ClientException _e;

      public byte[] Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public get_row_serialized_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("get_row_serialized_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteBinary(Success);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("get_row_serialized_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class get_cell_args : TBase
    {
      private long _ns;
      private string _table_name;
      private string _row;
      private string _column;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public string Row
      {
        get
        {
          return _row;
        }
        set
        {
          __isset.row = true;
          this._row = value;
        }
      }

      public string Column
      {
        get
        {
          return _column;
        }
        set
        {
          __isset.column = true;
          this._column = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool row;
        public bool column;
      }

      public get_cell_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Table_name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Row = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  Column = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("get_cell_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          if (Table_name != null && __isset.table_name) {
            field.Name = "table_name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Table_name);
            oprot.WriteFieldEnd();
          }
          if (Row != null && __isset.row) {
            field.Name = "row";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Row);
            oprot.WriteFieldEnd();
          }
          if (Column != null && __isset.column) {
            field.Name = "column";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Column);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("get_cell_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (Table_name != null && __isset.table_name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Table_name: ");
          __sb.Append(Table_name);
        }
        if (Row != null && __isset.row) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Row: ");
          __sb.Append(Row);
        }
        if (Column != null && __isset.column) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Column: ");
          __sb.Append(Column);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class get_cell_result : TBase
    {
      private byte[] _success;
      private ClientException _e;

      public byte[] Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public get_cell_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("get_cell_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteBinary(Success);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("get_cell_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class get_cells_args : TBase
    {
      private long _ns;
      private string _table_name;
      private ScanSpec _scan_spec;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public ScanSpec Scan_spec
      {
        get
        {
          return _scan_spec;
        }
        set
        {
          __isset.scan_spec = true;
          this._scan_spec = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool scan_spec;
      }

      public get_cells_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Table_name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Struct) {
                  Scan_spec = new ScanSpec();
                  Scan_spec.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("get_cells_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          if (Table_name != null && __isset.table_name) {
            field.Name = "table_name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Table_name);
            oprot.WriteFieldEnd();
          }
          if (Scan_spec != null && __isset.scan_spec) {
            field.Name = "scan_spec";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            Scan_spec.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("get_cells_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (Table_name != null && __isset.table_name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Table_name: ");
          __sb.Append(Table_name);
        }
        if (Scan_spec != null && __isset.scan_spec) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Scan_spec: ");
          __sb.Append(Scan_spec== null ? "<null>" : Scan_spec.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class get_cells_result : TBase
    {
      private List<Cell> _success;
      private ClientException _e;

      public List<Cell> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public get_cells_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<Cell>();
                    TList _list98 = iprot.ReadListBegin();
                    for( int _i99 = 0; _i99 < _list98.Count; ++_i99)
                    {
                      Cell _elem100;
                      _elem100 = new Cell();
                      _elem100.Read(iprot);
                      Success.Add(_elem100);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("get_cells_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (Cell _iter101 in Success)
                {
                  _iter101.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("get_cells_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class get_cells_as_arrays_args : TBase
    {
      private long _ns;
      private string _name;
      private ScanSpec _scan_spec;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }

      public ScanSpec Scan_spec
      {
        get
        {
          return _scan_spec;
        }
        set
        {
          __isset.scan_spec = true;
          this._scan_spec = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool name;
        public bool scan_spec;
      }

      public get_cells_as_arrays_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Struct) {
                  Scan_spec = new ScanSpec();
                  Scan_spec.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("get_cells_as_arrays_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          if (Name != null && __isset.name) {
            field.Name = "name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Name);
            oprot.WriteFieldEnd();
          }
          if (Scan_spec != null && __isset.scan_spec) {
            field.Name = "scan_spec";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            Scan_spec.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("get_cells_as_arrays_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (Name != null && __isset.name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Name: ");
          __sb.Append(Name);
        }
        if (Scan_spec != null && __isset.scan_spec) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Scan_spec: ");
          __sb.Append(Scan_spec== null ? "<null>" : Scan_spec.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class get_cells_as_arrays_result : TBase
    {
      private List<List<string>> _success;
      private ClientException _e;

      public List<List<string>> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public get_cells_as_arrays_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<List<string>>();
                    TList _list102 = iprot.ReadListBegin();
                    for( int _i103 = 0; _i103 < _list102.Count; ++_i103)
                    {
                      List<string> _elem104;
                      {
                        _elem104 = new List<string>();
                        TList _list105 = iprot.ReadListBegin();
                        for( int _i106 = 0; _i106 < _list105.Count; ++_i106)
                        {
                          string _elem107;
                          _elem107 = iprot.ReadString();
                          _elem104.Add(_elem107);
                        }
                        iprot.ReadListEnd();
                      }
                      Success.Add(_elem104);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("get_cells_as_arrays_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.List, Success.Count));
                foreach (List<string> _iter108 in Success)
                {
                  {
                    oprot.WriteListBegin(new TList(TType.String, _iter108.Count));
                    foreach (string _iter109 in _iter108)
                    {
                      oprot.WriteString(_iter109);
                    }
                    oprot.WriteListEnd();
                  }
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("get_cells_as_arrays_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class get_cells_serialized_args : TBase
    {
      private long _ns;
      private string _name;
      private ScanSpec _scan_spec;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }

      public ScanSpec Scan_spec
      {
        get
        {
          return _scan_spec;
        }
        set
        {
          __isset.scan_spec = true;
          this._scan_spec = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool name;
        public bool scan_spec;
      }

      public get_cells_serialized_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Struct) {
                  Scan_spec = new ScanSpec();
                  Scan_spec.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("get_cells_serialized_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          if (Name != null && __isset.name) {
            field.Name = "name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Name);
            oprot.WriteFieldEnd();
          }
          if (Scan_spec != null && __isset.scan_spec) {
            field.Name = "scan_spec";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            Scan_spec.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("get_cells_serialized_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (Name != null && __isset.name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Name: ");
          __sb.Append(Name);
        }
        if (Scan_spec != null && __isset.scan_spec) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Scan_spec: ");
          __sb.Append(Scan_spec== null ? "<null>" : Scan_spec.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class get_cells_serialized_result : TBase
    {
      private byte[] _success;
      private ClientException _e;

      public byte[] Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public get_cells_serialized_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("get_cells_serialized_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteBinary(Success);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("get_cells_serialized_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class shared_mutator_refresh_args : TBase
    {
      private long _ns;
      private string _table_name;
      private MutateSpec _mutate_spec;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public MutateSpec Mutate_spec
      {
        get
        {
          return _mutate_spec;
        }
        set
        {
          __isset.mutate_spec = true;
          this._mutate_spec = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool mutate_spec;
      }

      public shared_mutator_refresh_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Table_name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Struct) {
                  Mutate_spec = new MutateSpec();
                  Mutate_spec.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("shared_mutator_refresh_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          if (Table_name != null && __isset.table_name) {
            field.Name = "table_name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Table_name);
            oprot.WriteFieldEnd();
          }
          if (Mutate_spec != null && __isset.mutate_spec) {
            field.Name = "mutate_spec";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            Mutate_spec.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("shared_mutator_refresh_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (Table_name != null && __isset.table_name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Table_name: ");
          __sb.Append(Table_name);
        }
        if (Mutate_spec != null && __isset.mutate_spec) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Mutate_spec: ");
          __sb.Append(Mutate_spec== null ? "<null>" : Mutate_spec.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class shared_mutator_refresh_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public shared_mutator_refresh_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("shared_mutator_refresh_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("shared_mutator_refresh_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class refresh_shared_mutator_args : TBase
    {
      private long _ns;
      private string _table_name;
      private MutateSpec _mutate_spec;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public MutateSpec Mutate_spec
      {
        get
        {
          return _mutate_spec;
        }
        set
        {
          __isset.mutate_spec = true;
          this._mutate_spec = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool mutate_spec;
      }

      public refresh_shared_mutator_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Table_name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Struct) {
                  Mutate_spec = new MutateSpec();
                  Mutate_spec.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("refresh_shared_mutator_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          if (Table_name != null && __isset.table_name) {
            field.Name = "table_name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Table_name);
            oprot.WriteFieldEnd();
          }
          if (Mutate_spec != null && __isset.mutate_spec) {
            field.Name = "mutate_spec";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            Mutate_spec.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("refresh_shared_mutator_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (Table_name != null && __isset.table_name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Table_name: ");
          __sb.Append(Table_name);
        }
        if (Mutate_spec != null && __isset.mutate_spec) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Mutate_spec: ");
          __sb.Append(Mutate_spec== null ? "<null>" : Mutate_spec.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class refresh_shared_mutator_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public refresh_shared_mutator_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("refresh_shared_mutator_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("refresh_shared_mutator_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class shared_mutator_set_cells_args : TBase
    {
      private long _ns;
      private string _table_name;
      private MutateSpec _mutate_spec;
      private List<Cell> _cells;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public MutateSpec Mutate_spec
      {
        get
        {
          return _mutate_spec;
        }
        set
        {
          __isset.mutate_spec = true;
          this._mutate_spec = value;
        }
      }

      public List<Cell> Cells
      {
        get
        {
          return _cells;
        }
        set
        {
          __isset.cells = true;
          this._cells = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool mutate_spec;
        public bool cells;
      }

      public shared_mutator_set_cells_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Table_name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Struct) {
                  Mutate_spec = new MutateSpec();
                  Mutate_spec.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.List) {
                  {
                    Cells = new List<Cell>();
                    TList _list110 = iprot.ReadListBegin();
                    for( int _i111 = 0; _i111 < _list110.Count; ++_i111)
                    {
                      Cell _elem112;
                      _elem112 = new Cell();
                      _elem112.Read(iprot);
                      Cells.Add(_elem112);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("shared_mutator_set_cells_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          if (Table_name != null && __isset.table_name) {
            field.Name = "table_name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Table_name);
            oprot.WriteFieldEnd();
          }
          if (Mutate_spec != null && __isset.mutate_spec) {
            field.Name = "mutate_spec";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            Mutate_spec.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (Cells != null && __isset.cells) {
            field.Name = "cells";
            field.Type = TType.List;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Cells.Count));
              foreach (Cell _iter113 in Cells)
              {
                _iter113.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("shared_mutator_set_cells_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (Table_name != null && __isset.table_name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Table_name: ");
          __sb.Append(Table_name);
        }
        if (Mutate_spec != null && __isset.mutate_spec) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Mutate_spec: ");
          __sb.Append(Mutate_spec== null ? "<null>" : Mutate_spec.ToString());
        }
        if (Cells != null && __isset.cells) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Cells: ");
          __sb.Append(Cells);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class shared_mutator_set_cells_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public shared_mutator_set_cells_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("shared_mutator_set_cells_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("shared_mutator_set_cells_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class offer_cells_args : TBase
    {
      private long _ns;
      private string _table_name;
      private MutateSpec _mutate_spec;
      private List<Cell> _cells;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public MutateSpec Mutate_spec
      {
        get
        {
          return _mutate_spec;
        }
        set
        {
          __isset.mutate_spec = true;
          this._mutate_spec = value;
        }
      }

      public List<Cell> Cells
      {
        get
        {
          return _cells;
        }
        set
        {
          __isset.cells = true;
          this._cells = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool mutate_spec;
        public bool cells;
      }

      public offer_cells_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Table_name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Struct) {
                  Mutate_spec = new MutateSpec();
                  Mutate_spec.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.List) {
                  {
                    Cells = new List<Cell>();
                    TList _list114 = iprot.ReadListBegin();
                    for( int _i115 = 0; _i115 < _list114.Count; ++_i115)
                    {
                      Cell _elem116;
                      _elem116 = new Cell();
                      _elem116.Read(iprot);
                      Cells.Add(_elem116);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("offer_cells_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          if (Table_name != null && __isset.table_name) {
            field.Name = "table_name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Table_name);
            oprot.WriteFieldEnd();
          }
          if (Mutate_spec != null && __isset.mutate_spec) {
            field.Name = "mutate_spec";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            Mutate_spec.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (Cells != null && __isset.cells) {
            field.Name = "cells";
            field.Type = TType.List;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Cells.Count));
              foreach (Cell _iter117 in Cells)
              {
                _iter117.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("offer_cells_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (Table_name != null && __isset.table_name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Table_name: ");
          __sb.Append(Table_name);
        }
        if (Mutate_spec != null && __isset.mutate_spec) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Mutate_spec: ");
          __sb.Append(Mutate_spec== null ? "<null>" : Mutate_spec.ToString());
        }
        if (Cells != null && __isset.cells) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Cells: ");
          __sb.Append(Cells);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class offer_cells_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public offer_cells_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("offer_cells_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("offer_cells_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class shared_mutator_set_cells_as_arrays_args : TBase
    {
      private long _ns;
      private string _table_name;
      private MutateSpec _mutate_spec;
      private List<List<string>> _cells;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public MutateSpec Mutate_spec
      {
        get
        {
          return _mutate_spec;
        }
        set
        {
          __isset.mutate_spec = true;
          this._mutate_spec = value;
        }
      }

      public List<List<string>> Cells
      {
        get
        {
          return _cells;
        }
        set
        {
          __isset.cells = true;
          this._cells = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool mutate_spec;
        public bool cells;
      }

      public shared_mutator_set_cells_as_arrays_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Table_name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Struct) {
                  Mutate_spec = new MutateSpec();
                  Mutate_spec.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.List) {
                  {
                    Cells = new List<List<string>>();
                    TList _list118 = iprot.ReadListBegin();
                    for( int _i119 = 0; _i119 < _list118.Count; ++_i119)
                    {
                      List<string> _elem120;
                      {
                        _elem120 = new List<string>();
                        TList _list121 = iprot.ReadListBegin();
                        for( int _i122 = 0; _i122 < _list121.Count; ++_i122)
                        {
                          string _elem123;
                          _elem123 = iprot.ReadString();
                          _elem120.Add(_elem123);
                        }
                        iprot.ReadListEnd();
                      }
                      Cells.Add(_elem120);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("shared_mutator_set_cells_as_arrays_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          if (Table_name != null && __isset.table_name) {
            field.Name = "table_name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Table_name);
            oprot.WriteFieldEnd();
          }
          if (Mutate_spec != null && __isset.mutate_spec) {
            field.Name = "mutate_spec";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            Mutate_spec.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (Cells != null && __isset.cells) {
            field.Name = "cells";
            field.Type = TType.List;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.List, Cells.Count));
              foreach (List<string> _iter124 in Cells)
              {
                {
                  oprot.WriteListBegin(new TList(TType.String, _iter124.Count));
                  foreach (string _iter125 in _iter124)
                  {
                    oprot.WriteString(_iter125);
                  }
                  oprot.WriteListEnd();
                }
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("shared_mutator_set_cells_as_arrays_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (Table_name != null && __isset.table_name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Table_name: ");
          __sb.Append(Table_name);
        }
        if (Mutate_spec != null && __isset.mutate_spec) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Mutate_spec: ");
          __sb.Append(Mutate_spec== null ? "<null>" : Mutate_spec.ToString());
        }
        if (Cells != null && __isset.cells) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Cells: ");
          __sb.Append(Cells);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class shared_mutator_set_cells_as_arrays_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public shared_mutator_set_cells_as_arrays_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("shared_mutator_set_cells_as_arrays_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("shared_mutator_set_cells_as_arrays_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class offer_cells_as_arrays_args : TBase
    {
      private long _ns;
      private string _table_name;
      private MutateSpec _mutate_spec;
      private List<List<string>> _cells;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public MutateSpec Mutate_spec
      {
        get
        {
          return _mutate_spec;
        }
        set
        {
          __isset.mutate_spec = true;
          this._mutate_spec = value;
        }
      }

      public List<List<string>> Cells
      {
        get
        {
          return _cells;
        }
        set
        {
          __isset.cells = true;
          this._cells = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool mutate_spec;
        public bool cells;
      }

      public offer_cells_as_arrays_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Table_name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Struct) {
                  Mutate_spec = new MutateSpec();
                  Mutate_spec.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.List) {
                  {
                    Cells = new List<List<string>>();
                    TList _list126 = iprot.ReadListBegin();
                    for( int _i127 = 0; _i127 < _list126.Count; ++_i127)
                    {
                      List<string> _elem128;
                      {
                        _elem128 = new List<string>();
                        TList _list129 = iprot.ReadListBegin();
                        for( int _i130 = 0; _i130 < _list129.Count; ++_i130)
                        {
                          string _elem131;
                          _elem131 = iprot.ReadString();
                          _elem128.Add(_elem131);
                        }
                        iprot.ReadListEnd();
                      }
                      Cells.Add(_elem128);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("offer_cells_as_arrays_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          if (Table_name != null && __isset.table_name) {
            field.Name = "table_name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Table_name);
            oprot.WriteFieldEnd();
          }
          if (Mutate_spec != null && __isset.mutate_spec) {
            field.Name = "mutate_spec";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            Mutate_spec.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (Cells != null && __isset.cells) {
            field.Name = "cells";
            field.Type = TType.List;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.List, Cells.Count));
              foreach (List<string> _iter132 in Cells)
              {
                {
                  oprot.WriteListBegin(new TList(TType.String, _iter132.Count));
                  foreach (string _iter133 in _iter132)
                  {
                    oprot.WriteString(_iter133);
                  }
                  oprot.WriteListEnd();
                }
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("offer_cells_as_arrays_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (Table_name != null && __isset.table_name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Table_name: ");
          __sb.Append(Table_name);
        }
        if (Mutate_spec != null && __isset.mutate_spec) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Mutate_spec: ");
          __sb.Append(Mutate_spec== null ? "<null>" : Mutate_spec.ToString());
        }
        if (Cells != null && __isset.cells) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Cells: ");
          __sb.Append(Cells);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class offer_cells_as_arrays_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public offer_cells_as_arrays_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("offer_cells_as_arrays_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("offer_cells_as_arrays_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class shared_mutator_set_cell_args : TBase
    {
      private long _ns;
      private string _table_name;
      private MutateSpec _mutate_spec;
      private Cell _cell;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public MutateSpec Mutate_spec
      {
        get
        {
          return _mutate_spec;
        }
        set
        {
          __isset.mutate_spec = true;
          this._mutate_spec = value;
        }
      }

      public Cell Cell
      {
        get
        {
          return _cell;
        }
        set
        {
          __isset.cell = true;
          this._cell = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool mutate_spec;
        public bool cell;
      }

      public shared_mutator_set_cell_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Table_name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Struct) {
                  Mutate_spec = new MutateSpec();
                  Mutate_spec.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.Struct) {
                  Cell = new Cell();
                  Cell.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("shared_mutator_set_cell_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          if (Table_name != null && __isset.table_name) {
            field.Name = "table_name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Table_name);
            oprot.WriteFieldEnd();
          }
          if (Mutate_spec != null && __isset.mutate_spec) {
            field.Name = "mutate_spec";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            Mutate_spec.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (Cell != null && __isset.cell) {
            field.Name = "cell";
            field.Type = TType.Struct;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            Cell.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("shared_mutator_set_cell_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (Table_name != null && __isset.table_name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Table_name: ");
          __sb.Append(Table_name);
        }
        if (Mutate_spec != null && __isset.mutate_spec) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Mutate_spec: ");
          __sb.Append(Mutate_spec== null ? "<null>" : Mutate_spec.ToString());
        }
        if (Cell != null && __isset.cell) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Cell: ");
          __sb.Append(Cell== null ? "<null>" : Cell.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class shared_mutator_set_cell_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public shared_mutator_set_cell_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("shared_mutator_set_cell_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("shared_mutator_set_cell_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class offer_cell_args : TBase
    {
      private long _ns;
      private string _table_name;
      private MutateSpec _mutate_spec;
      private Cell _cell;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public MutateSpec Mutate_spec
      {
        get
        {
          return _mutate_spec;
        }
        set
        {
          __isset.mutate_spec = true;
          this._mutate_spec = value;
        }
      }

      public Cell Cell
      {
        get
        {
          return _cell;
        }
        set
        {
          __isset.cell = true;
          this._cell = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool mutate_spec;
        public bool cell;
      }

      public offer_cell_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Table_name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Struct) {
                  Mutate_spec = new MutateSpec();
                  Mutate_spec.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.Struct) {
                  Cell = new Cell();
                  Cell.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("offer_cell_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          if (Table_name != null && __isset.table_name) {
            field.Name = "table_name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Table_name);
            oprot.WriteFieldEnd();
          }
          if (Mutate_spec != null && __isset.mutate_spec) {
            field.Name = "mutate_spec";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            Mutate_spec.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (Cell != null && __isset.cell) {
            field.Name = "cell";
            field.Type = TType.Struct;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            Cell.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("offer_cell_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (Table_name != null && __isset.table_name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Table_name: ");
          __sb.Append(Table_name);
        }
        if (Mutate_spec != null && __isset.mutate_spec) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Mutate_spec: ");
          __sb.Append(Mutate_spec== null ? "<null>" : Mutate_spec.ToString());
        }
        if (Cell != null && __isset.cell) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Cell: ");
          __sb.Append(Cell== null ? "<null>" : Cell.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class offer_cell_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public offer_cell_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("offer_cell_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("offer_cell_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class shared_mutator_set_cell_as_array_args : TBase
    {
      private long _ns;
      private string _table_name;
      private MutateSpec _mutate_spec;
      private List<string> _cell;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public MutateSpec Mutate_spec
      {
        get
        {
          return _mutate_spec;
        }
        set
        {
          __isset.mutate_spec = true;
          this._mutate_spec = value;
        }
      }

      public List<string> Cell
      {
        get
        {
          return _cell;
        }
        set
        {
          __isset.cell = true;
          this._cell = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool mutate_spec;
        public bool cell;
      }

      public shared_mutator_set_cell_as_array_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Table_name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Struct) {
                  Mutate_spec = new MutateSpec();
                  Mutate_spec.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.List) {
                  {
                    Cell = new List<string>();
                    TList _list134 = iprot.ReadListBegin();
                    for( int _i135 = 0; _i135 < _list134.Count; ++_i135)
                    {
                      string _elem136;
                      _elem136 = iprot.ReadString();
                      Cell.Add(_elem136);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("shared_mutator_set_cell_as_array_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          if (Table_name != null && __isset.table_name) {
            field.Name = "table_name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Table_name);
            oprot.WriteFieldEnd();
          }
          if (Mutate_spec != null && __isset.mutate_spec) {
            field.Name = "mutate_spec";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            Mutate_spec.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (Cell != null && __isset.cell) {
            field.Name = "cell";
            field.Type = TType.List;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Cell.Count));
              foreach (string _iter137 in Cell)
              {
                oprot.WriteString(_iter137);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("shared_mutator_set_cell_as_array_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (Table_name != null && __isset.table_name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Table_name: ");
          __sb.Append(Table_name);
        }
        if (Mutate_spec != null && __isset.mutate_spec) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Mutate_spec: ");
          __sb.Append(Mutate_spec== null ? "<null>" : Mutate_spec.ToString());
        }
        if (Cell != null && __isset.cell) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Cell: ");
          __sb.Append(Cell);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class shared_mutator_set_cell_as_array_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public shared_mutator_set_cell_as_array_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("shared_mutator_set_cell_as_array_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("shared_mutator_set_cell_as_array_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class offer_cell_as_array_args : TBase
    {
      private long _ns;
      private string _table_name;
      private MutateSpec _mutate_spec;
      private List<string> _cell;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public MutateSpec Mutate_spec
      {
        get
        {
          return _mutate_spec;
        }
        set
        {
          __isset.mutate_spec = true;
          this._mutate_spec = value;
        }
      }

      public List<string> Cell
      {
        get
        {
          return _cell;
        }
        set
        {
          __isset.cell = true;
          this._cell = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool mutate_spec;
        public bool cell;
      }

      public offer_cell_as_array_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Table_name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Struct) {
                  Mutate_spec = new MutateSpec();
                  Mutate_spec.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.List) {
                  {
                    Cell = new List<string>();
                    TList _list138 = iprot.ReadListBegin();
                    for( int _i139 = 0; _i139 < _list138.Count; ++_i139)
                    {
                      string _elem140;
                      _elem140 = iprot.ReadString();
                      Cell.Add(_elem140);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("offer_cell_as_array_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          if (Table_name != null && __isset.table_name) {
            field.Name = "table_name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Table_name);
            oprot.WriteFieldEnd();
          }
          if (Mutate_spec != null && __isset.mutate_spec) {
            field.Name = "mutate_spec";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            Mutate_spec.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (Cell != null && __isset.cell) {
            field.Name = "cell";
            field.Type = TType.List;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Cell.Count));
              foreach (string _iter141 in Cell)
              {
                oprot.WriteString(_iter141);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("offer_cell_as_array_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (Table_name != null && __isset.table_name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Table_name: ");
          __sb.Append(Table_name);
        }
        if (Mutate_spec != null && __isset.mutate_spec) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Mutate_spec: ");
          __sb.Append(Mutate_spec== null ? "<null>" : Mutate_spec.ToString());
        }
        if (Cell != null && __isset.cell) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Cell: ");
          __sb.Append(Cell);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class offer_cell_as_array_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public offer_cell_as_array_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("offer_cell_as_array_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("offer_cell_as_array_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class mutator_open_args : TBase
    {
      private long _ns;
      private string _table_name;
      private int _flags;
      private int _flush_interval;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public int Flags
      {
        get
        {
          return _flags;
        }
        set
        {
          __isset.flags = true;
          this._flags = value;
        }
      }

      public int Flush_interval
      {
        get
        {
          return _flush_interval;
        }
        set
        {
          __isset.flush_interval = true;
          this._flush_interval = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool flags;
        public bool flush_interval;
      }

      public mutator_open_args() {
        this._flags = 0;
        this.__isset.flags = true;
        this._flush_interval = 0;
        this.__isset.flush_interval = true;
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Table_name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  Flags = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  Flush_interval = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("mutator_open_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          if (Table_name != null && __isset.table_name) {
            field.Name = "table_name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Table_name);
            oprot.WriteFieldEnd();
          }
          if (__isset.flags) {
            field.Name = "flags";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Flags);
            oprot.WriteFieldEnd();
          }
          if (__isset.flush_interval) {
            field.Name = "flush_interval";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Flush_interval);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("mutator_open_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (Table_name != null && __isset.table_name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Table_name: ");
          __sb.Append(Table_name);
        }
        if (__isset.flags) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Flags: ");
          __sb.Append(Flags);
        }
        if (__isset.flush_interval) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Flush_interval: ");
          __sb.Append(Flush_interval);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class mutator_open_result : TBase
    {
      private long _success;
      private ClientException _e;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public mutator_open_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I64) {
                  Success = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("mutator_open_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I64;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("mutator_open_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class open_mutator_args : TBase
    {
      private long _ns;
      private string _table_name;
      private int _flags;
      private int _flush_interval;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public int Flags
      {
        get
        {
          return _flags;
        }
        set
        {
          __isset.flags = true;
          this._flags = value;
        }
      }

      public int Flush_interval
      {
        get
        {
          return _flush_interval;
        }
        set
        {
          __isset.flush_interval = true;
          this._flush_interval = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool flags;
        public bool flush_interval;
      }

      public open_mutator_args() {
        this._flags = 0;
        this.__isset.flags = true;
        this._flush_interval = 0;
        this.__isset.flush_interval = true;
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Table_name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  Flags = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  Flush_interval = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("open_mutator_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          if (Table_name != null && __isset.table_name) {
            field.Name = "table_name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Table_name);
            oprot.WriteFieldEnd();
          }
          if (__isset.flags) {
            field.Name = "flags";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Flags);
            oprot.WriteFieldEnd();
          }
          if (__isset.flush_interval) {
            field.Name = "flush_interval";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Flush_interval);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("open_mutator_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (Table_name != null && __isset.table_name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Table_name: ");
          __sb.Append(Table_name);
        }
        if (__isset.flags) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Flags: ");
          __sb.Append(Flags);
        }
        if (__isset.flush_interval) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Flush_interval: ");
          __sb.Append(Flush_interval);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class open_mutator_result : TBase
    {
      private long _success;
      private ClientException _e;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public open_mutator_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I64) {
                  Success = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("open_mutator_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I64;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("open_mutator_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class async_mutator_open_args : TBase
    {
      private long _ns;
      private string _table_name;
      private long _future;
      private int _flags;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public long Future
      {
        get
        {
          return _future;
        }
        set
        {
          __isset.future = true;
          this._future = value;
        }
      }

      public int Flags
      {
        get
        {
          return _flags;
        }
        set
        {
          __isset.flags = true;
          this._flags = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool future;
        public bool flags;
      }

      public async_mutator_open_args() {
        this._flags = 0;
        this.__isset.flags = true;
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Table_name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I64) {
                  Future = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  Flags = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("async_mutator_open_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          if (Table_name != null && __isset.table_name) {
            field.Name = "table_name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Table_name);
            oprot.WriteFieldEnd();
          }
          if (__isset.future) {
            field.Name = "future";
            field.Type = TType.I64;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Future);
            oprot.WriteFieldEnd();
          }
          if (__isset.flags) {
            field.Name = "flags";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Flags);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("async_mutator_open_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (Table_name != null && __isset.table_name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Table_name: ");
          __sb.Append(Table_name);
        }
        if (__isset.future) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Future: ");
          __sb.Append(Future);
        }
        if (__isset.flags) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Flags: ");
          __sb.Append(Flags);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class async_mutator_open_result : TBase
    {
      private long _success;
      private ClientException _e;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public async_mutator_open_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I64) {
                  Success = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("async_mutator_open_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I64;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("async_mutator_open_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class open_mutator_async_args : TBase
    {
      private long _ns;
      private string _table_name;
      private long _future;
      private int _flags;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public long Future
      {
        get
        {
          return _future;
        }
        set
        {
          __isset.future = true;
          this._future = value;
        }
      }

      public int Flags
      {
        get
        {
          return _flags;
        }
        set
        {
          __isset.flags = true;
          this._flags = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool future;
        public bool flags;
      }

      public open_mutator_async_args() {
        this._flags = 0;
        this.__isset.flags = true;
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Table_name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I64) {
                  Future = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  Flags = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("open_mutator_async_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          if (Table_name != null && __isset.table_name) {
            field.Name = "table_name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Table_name);
            oprot.WriteFieldEnd();
          }
          if (__isset.future) {
            field.Name = "future";
            field.Type = TType.I64;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Future);
            oprot.WriteFieldEnd();
          }
          if (__isset.flags) {
            field.Name = "flags";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Flags);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("open_mutator_async_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (Table_name != null && __isset.table_name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Table_name: ");
          __sb.Append(Table_name);
        }
        if (__isset.future) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Future: ");
          __sb.Append(Future);
        }
        if (__isset.flags) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Flags: ");
          __sb.Append(Flags);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class open_mutator_async_result : TBase
    {
      private long _success;
      private ClientException _e;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public open_mutator_async_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I64) {
                  Success = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("open_mutator_async_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I64;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("open_mutator_async_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class mutator_close_args : TBase
    {
      private long _mutator;

      public long Mutator
      {
        get
        {
          return _mutator;
        }
        set
        {
          __isset.mutator = true;
          this._mutator = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool mutator;
      }

      public mutator_close_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Mutator = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("mutator_close_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.mutator) {
            field.Name = "mutator";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Mutator);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("mutator_close_args(");
        bool __first = true;
        if (__isset.mutator) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Mutator: ");
          __sb.Append(Mutator);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class mutator_close_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public mutator_close_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("mutator_close_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("mutator_close_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class close_mutator_args : TBase
    {
      private long _mutator;

      public long Mutator
      {
        get
        {
          return _mutator;
        }
        set
        {
          __isset.mutator = true;
          this._mutator = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool mutator;
      }

      public close_mutator_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Mutator = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("close_mutator_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.mutator) {
            field.Name = "mutator";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Mutator);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("close_mutator_args(");
        bool __first = true;
        if (__isset.mutator) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Mutator: ");
          __sb.Append(Mutator);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class close_mutator_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public close_mutator_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("close_mutator_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("close_mutator_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class async_mutator_cancel_args : TBase
    {
      private long _mutator;

      public long Mutator
      {
        get
        {
          return _mutator;
        }
        set
        {
          __isset.mutator = true;
          this._mutator = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool mutator;
      }

      public async_mutator_cancel_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Mutator = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("async_mutator_cancel_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.mutator) {
            field.Name = "mutator";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Mutator);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("async_mutator_cancel_args(");
        bool __first = true;
        if (__isset.mutator) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Mutator: ");
          __sb.Append(Mutator);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class async_mutator_cancel_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public async_mutator_cancel_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("async_mutator_cancel_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("async_mutator_cancel_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class cancel_mutator_async_args : TBase
    {
      private long _mutator;

      public long Mutator
      {
        get
        {
          return _mutator;
        }
        set
        {
          __isset.mutator = true;
          this._mutator = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool mutator;
      }

      public cancel_mutator_async_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Mutator = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("cancel_mutator_async_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.mutator) {
            field.Name = "mutator";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Mutator);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("cancel_mutator_async_args(");
        bool __first = true;
        if (__isset.mutator) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Mutator: ");
          __sb.Append(Mutator);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class cancel_mutator_async_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public cancel_mutator_async_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("cancel_mutator_async_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("cancel_mutator_async_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class async_mutator_close_args : TBase
    {
      private long _mutator;

      public long Mutator
      {
        get
        {
          return _mutator;
        }
        set
        {
          __isset.mutator = true;
          this._mutator = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool mutator;
      }

      public async_mutator_close_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Mutator = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("async_mutator_close_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.mutator) {
            field.Name = "mutator";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Mutator);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("async_mutator_close_args(");
        bool __first = true;
        if (__isset.mutator) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Mutator: ");
          __sb.Append(Mutator);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class async_mutator_close_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public async_mutator_close_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("async_mutator_close_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("async_mutator_close_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class close_mutator_async_args : TBase
    {
      private long _mutator;

      public long Mutator
      {
        get
        {
          return _mutator;
        }
        set
        {
          __isset.mutator = true;
          this._mutator = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool mutator;
      }

      public close_mutator_async_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Mutator = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("close_mutator_async_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.mutator) {
            field.Name = "mutator";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Mutator);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("close_mutator_async_args(");
        bool __first = true;
        if (__isset.mutator) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Mutator: ");
          __sb.Append(Mutator);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class close_mutator_async_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public close_mutator_async_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("close_mutator_async_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("close_mutator_async_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class mutator_set_cell_args : TBase
    {
      private long _mutator;
      private Cell _cell;

      public long Mutator
      {
        get
        {
          return _mutator;
        }
        set
        {
          __isset.mutator = true;
          this._mutator = value;
        }
      }

      public Cell Cell
      {
        get
        {
          return _cell;
        }
        set
        {
          __isset.cell = true;
          this._cell = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool mutator;
        public bool cell;
      }

      public mutator_set_cell_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Mutator = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Cell = new Cell();
                  Cell.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("mutator_set_cell_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.mutator) {
            field.Name = "mutator";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Mutator);
            oprot.WriteFieldEnd();
          }
          if (Cell != null && __isset.cell) {
            field.Name = "cell";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Cell.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("mutator_set_cell_args(");
        bool __first = true;
        if (__isset.mutator) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Mutator: ");
          __sb.Append(Mutator);
        }
        if (Cell != null && __isset.cell) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Cell: ");
          __sb.Append(Cell== null ? "<null>" : Cell.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class mutator_set_cell_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public mutator_set_cell_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("mutator_set_cell_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("mutator_set_cell_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class set_cell_args : TBase
    {
      private long _ns;
      private string _table_name;
      private Cell _cell;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public Cell Cell
      {
        get
        {
          return _cell;
        }
        set
        {
          __isset.cell = true;
          this._cell = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool cell;
      }

      public set_cell_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Table_name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Struct) {
                  Cell = new Cell();
                  Cell.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("set_cell_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          if (Table_name != null && __isset.table_name) {
            field.Name = "table_name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Table_name);
            oprot.WriteFieldEnd();
          }
          if (Cell != null && __isset.cell) {
            field.Name = "cell";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            Cell.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("set_cell_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (Table_name != null && __isset.table_name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Table_name: ");
          __sb.Append(Table_name);
        }
        if (Cell != null && __isset.cell) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Cell: ");
          __sb.Append(Cell== null ? "<null>" : Cell.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class set_cell_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public set_cell_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("set_cell_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("set_cell_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class mutator_set_cell_as_array_args : TBase
    {
      private long _mutator;
      private List<string> _cell;

      public long Mutator
      {
        get
        {
          return _mutator;
        }
        set
        {
          __isset.mutator = true;
          this._mutator = value;
        }
      }

      public List<string> Cell
      {
        get
        {
          return _cell;
        }
        set
        {
          __isset.cell = true;
          this._cell = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool mutator;
        public bool cell;
      }

      public mutator_set_cell_as_array_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Mutator = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.List) {
                  {
                    Cell = new List<string>();
                    TList _list142 = iprot.ReadListBegin();
                    for( int _i143 = 0; _i143 < _list142.Count; ++_i143)
                    {
                      string _elem144;
                      _elem144 = iprot.ReadString();
                      Cell.Add(_elem144);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("mutator_set_cell_as_array_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.mutator) {
            field.Name = "mutator";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Mutator);
            oprot.WriteFieldEnd();
          }
          if (Cell != null && __isset.cell) {
            field.Name = "cell";
            field.Type = TType.List;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Cell.Count));
              foreach (string _iter145 in Cell)
              {
                oprot.WriteString(_iter145);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("mutator_set_cell_as_array_args(");
        bool __first = true;
        if (__isset.mutator) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Mutator: ");
          __sb.Append(Mutator);
        }
        if (Cell != null && __isset.cell) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Cell: ");
          __sb.Append(Cell);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class mutator_set_cell_as_array_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public mutator_set_cell_as_array_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("mutator_set_cell_as_array_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("mutator_set_cell_as_array_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class set_cell_as_array_args : TBase
    {
      private long _ns;
      private string _table_name;
      private List<string> _cell;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public List<string> Cell
      {
        get
        {
          return _cell;
        }
        set
        {
          __isset.cell = true;
          this._cell = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool cell;
      }

      public set_cell_as_array_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Table_name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.List) {
                  {
                    Cell = new List<string>();
                    TList _list146 = iprot.ReadListBegin();
                    for( int _i147 = 0; _i147 < _list146.Count; ++_i147)
                    {
                      string _elem148;
                      _elem148 = iprot.ReadString();
                      Cell.Add(_elem148);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("set_cell_as_array_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          if (Table_name != null && __isset.table_name) {
            field.Name = "table_name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Table_name);
            oprot.WriteFieldEnd();
          }
          if (Cell != null && __isset.cell) {
            field.Name = "cell";
            field.Type = TType.List;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Cell.Count));
              foreach (string _iter149 in Cell)
              {
                oprot.WriteString(_iter149);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("set_cell_as_array_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (Table_name != null && __isset.table_name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Table_name: ");
          __sb.Append(Table_name);
        }
        if (Cell != null && __isset.cell) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Cell: ");
          __sb.Append(Cell);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class set_cell_as_array_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public set_cell_as_array_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("set_cell_as_array_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("set_cell_as_array_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class mutator_set_cells_args : TBase
    {
      private long _mutator;
      private List<Cell> _cells;

      public long Mutator
      {
        get
        {
          return _mutator;
        }
        set
        {
          __isset.mutator = true;
          this._mutator = value;
        }
      }

      public List<Cell> Cells
      {
        get
        {
          return _cells;
        }
        set
        {
          __isset.cells = true;
          this._cells = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool mutator;
        public bool cells;
      }

      public mutator_set_cells_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Mutator = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.List) {
                  {
                    Cells = new List<Cell>();
                    TList _list150 = iprot.ReadListBegin();
                    for( int _i151 = 0; _i151 < _list150.Count; ++_i151)
                    {
                      Cell _elem152;
                      _elem152 = new Cell();
                      _elem152.Read(iprot);
                      Cells.Add(_elem152);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("mutator_set_cells_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.mutator) {
            field.Name = "mutator";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Mutator);
            oprot.WriteFieldEnd();
          }
          if (Cells != null && __isset.cells) {
            field.Name = "cells";
            field.Type = TType.List;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Cells.Count));
              foreach (Cell _iter153 in Cells)
              {
                _iter153.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("mutator_set_cells_args(");
        bool __first = true;
        if (__isset.mutator) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Mutator: ");
          __sb.Append(Mutator);
        }
        if (Cells != null && __isset.cells) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Cells: ");
          __sb.Append(Cells);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class mutator_set_cells_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public mutator_set_cells_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("mutator_set_cells_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("mutator_set_cells_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class set_cells_args : TBase
    {
      private long _ns;
      private string _table_name;
      private List<Cell> _cells;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public List<Cell> Cells
      {
        get
        {
          return _cells;
        }
        set
        {
          __isset.cells = true;
          this._cells = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool cells;
      }

      public set_cells_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Table_name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.List) {
                  {
                    Cells = new List<Cell>();
                    TList _list154 = iprot.ReadListBegin();
                    for( int _i155 = 0; _i155 < _list154.Count; ++_i155)
                    {
                      Cell _elem156;
                      _elem156 = new Cell();
                      _elem156.Read(iprot);
                      Cells.Add(_elem156);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("set_cells_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          if (Table_name != null && __isset.table_name) {
            field.Name = "table_name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Table_name);
            oprot.WriteFieldEnd();
          }
          if (Cells != null && __isset.cells) {
            field.Name = "cells";
            field.Type = TType.List;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Cells.Count));
              foreach (Cell _iter157 in Cells)
              {
                _iter157.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("set_cells_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (Table_name != null && __isset.table_name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Table_name: ");
          __sb.Append(Table_name);
        }
        if (Cells != null && __isset.cells) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Cells: ");
          __sb.Append(Cells);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class set_cells_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public set_cells_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("set_cells_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("set_cells_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class mutator_set_cells_as_arrays_args : TBase
    {
      private long _mutator;
      private List<List<string>> _cells;

      public long Mutator
      {
        get
        {
          return _mutator;
        }
        set
        {
          __isset.mutator = true;
          this._mutator = value;
        }
      }

      public List<List<string>> Cells
      {
        get
        {
          return _cells;
        }
        set
        {
          __isset.cells = true;
          this._cells = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool mutator;
        public bool cells;
      }

      public mutator_set_cells_as_arrays_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Mutator = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.List) {
                  {
                    Cells = new List<List<string>>();
                    TList _list158 = iprot.ReadListBegin();
                    for( int _i159 = 0; _i159 < _list158.Count; ++_i159)
                    {
                      List<string> _elem160;
                      {
                        _elem160 = new List<string>();
                        TList _list161 = iprot.ReadListBegin();
                        for( int _i162 = 0; _i162 < _list161.Count; ++_i162)
                        {
                          string _elem163;
                          _elem163 = iprot.ReadString();
                          _elem160.Add(_elem163);
                        }
                        iprot.ReadListEnd();
                      }
                      Cells.Add(_elem160);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("mutator_set_cells_as_arrays_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.mutator) {
            field.Name = "mutator";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Mutator);
            oprot.WriteFieldEnd();
          }
          if (Cells != null && __isset.cells) {
            field.Name = "cells";
            field.Type = TType.List;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.List, Cells.Count));
              foreach (List<string> _iter164 in Cells)
              {
                {
                  oprot.WriteListBegin(new TList(TType.String, _iter164.Count));
                  foreach (string _iter165 in _iter164)
                  {
                    oprot.WriteString(_iter165);
                  }
                  oprot.WriteListEnd();
                }
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("mutator_set_cells_as_arrays_args(");
        bool __first = true;
        if (__isset.mutator) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Mutator: ");
          __sb.Append(Mutator);
        }
        if (Cells != null && __isset.cells) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Cells: ");
          __sb.Append(Cells);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class mutator_set_cells_as_arrays_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public mutator_set_cells_as_arrays_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("mutator_set_cells_as_arrays_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("mutator_set_cells_as_arrays_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class set_cells_as_arrays_args : TBase
    {
      private long _ns;
      private string _table_name;
      private List<List<string>> _cells;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public List<List<string>> Cells
      {
        get
        {
          return _cells;
        }
        set
        {
          __isset.cells = true;
          this._cells = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool cells;
      }

      public set_cells_as_arrays_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Table_name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.List) {
                  {
                    Cells = new List<List<string>>();
                    TList _list166 = iprot.ReadListBegin();
                    for( int _i167 = 0; _i167 < _list166.Count; ++_i167)
                    {
                      List<string> _elem168;
                      {
                        _elem168 = new List<string>();
                        TList _list169 = iprot.ReadListBegin();
                        for( int _i170 = 0; _i170 < _list169.Count; ++_i170)
                        {
                          string _elem171;
                          _elem171 = iprot.ReadString();
                          _elem168.Add(_elem171);
                        }
                        iprot.ReadListEnd();
                      }
                      Cells.Add(_elem168);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("set_cells_as_arrays_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          if (Table_name != null && __isset.table_name) {
            field.Name = "table_name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Table_name);
            oprot.WriteFieldEnd();
          }
          if (Cells != null && __isset.cells) {
            field.Name = "cells";
            field.Type = TType.List;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.List, Cells.Count));
              foreach (List<string> _iter172 in Cells)
              {
                {
                  oprot.WriteListBegin(new TList(TType.String, _iter172.Count));
                  foreach (string _iter173 in _iter172)
                  {
                    oprot.WriteString(_iter173);
                  }
                  oprot.WriteListEnd();
                }
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("set_cells_as_arrays_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (Table_name != null && __isset.table_name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Table_name: ");
          __sb.Append(Table_name);
        }
        if (Cells != null && __isset.cells) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Cells: ");
          __sb.Append(Cells);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class set_cells_as_arrays_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public set_cells_as_arrays_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("set_cells_as_arrays_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("set_cells_as_arrays_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class mutator_set_cells_serialized_args : TBase
    {
      private long _mutator;
      private byte[] _cells;
      private bool _flush;

      public long Mutator
      {
        get
        {
          return _mutator;
        }
        set
        {
          __isset.mutator = true;
          this._mutator = value;
        }
      }

      public byte[] Cells
      {
        get
        {
          return _cells;
        }
        set
        {
          __isset.cells = true;
          this._cells = value;
        }
      }

      public bool Flush
      {
        get
        {
          return _flush;
        }
        set
        {
          __isset.flush = true;
          this._flush = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool mutator;
        public bool cells;
        public bool flush;
      }

      public mutator_set_cells_serialized_args() {
        this._flush = false;
        this.__isset.flush = true;
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Mutator = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Cells = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Bool) {
                  Flush = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("mutator_set_cells_serialized_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.mutator) {
            field.Name = "mutator";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Mutator);
            oprot.WriteFieldEnd();
          }
          if (Cells != null && __isset.cells) {
            field.Name = "cells";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Cells);
            oprot.WriteFieldEnd();
          }
          if (__isset.flush) {
            field.Name = "flush";
            field.Type = TType.Bool;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Flush);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("mutator_set_cells_serialized_args(");
        bool __first = true;
        if (__isset.mutator) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Mutator: ");
          __sb.Append(Mutator);
        }
        if (Cells != null && __isset.cells) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Cells: ");
          __sb.Append(Cells);
        }
        if (__isset.flush) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Flush: ");
          __sb.Append(Flush);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class mutator_set_cells_serialized_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public mutator_set_cells_serialized_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("mutator_set_cells_serialized_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("mutator_set_cells_serialized_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class set_cells_serialized_args : TBase
    {
      private long _ns;
      private string _table_name;
      private byte[] _cells;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public byte[] Cells
      {
        get
        {
          return _cells;
        }
        set
        {
          __isset.cells = true;
          this._cells = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool cells;
      }

      public set_cells_serialized_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Table_name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Cells = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("set_cells_serialized_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          if (Table_name != null && __isset.table_name) {
            field.Name = "table_name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Table_name);
            oprot.WriteFieldEnd();
          }
          if (Cells != null && __isset.cells) {
            field.Name = "cells";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Cells);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("set_cells_serialized_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (Table_name != null && __isset.table_name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Table_name: ");
          __sb.Append(Table_name);
        }
        if (Cells != null && __isset.cells) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Cells: ");
          __sb.Append(Cells);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class set_cells_serialized_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public set_cells_serialized_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("set_cells_serialized_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("set_cells_serialized_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class mutator_flush_args : TBase
    {
      private long _mutator;

      public long Mutator
      {
        get
        {
          return _mutator;
        }
        set
        {
          __isset.mutator = true;
          this._mutator = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool mutator;
      }

      public mutator_flush_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Mutator = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("mutator_flush_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.mutator) {
            field.Name = "mutator";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Mutator);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("mutator_flush_args(");
        bool __first = true;
        if (__isset.mutator) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Mutator: ");
          __sb.Append(Mutator);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class mutator_flush_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public mutator_flush_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("mutator_flush_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("mutator_flush_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class flush_mutator_args : TBase
    {
      private long _mutator;

      public long Mutator
      {
        get
        {
          return _mutator;
        }
        set
        {
          __isset.mutator = true;
          this._mutator = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool mutator;
      }

      public flush_mutator_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Mutator = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("flush_mutator_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.mutator) {
            field.Name = "mutator";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Mutator);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("flush_mutator_args(");
        bool __first = true;
        if (__isset.mutator) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Mutator: ");
          __sb.Append(Mutator);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class flush_mutator_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public flush_mutator_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("flush_mutator_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("flush_mutator_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class async_mutator_set_cell_args : TBase
    {
      private long _mutator;
      private Cell _cell;

      public long Mutator
      {
        get
        {
          return _mutator;
        }
        set
        {
          __isset.mutator = true;
          this._mutator = value;
        }
      }

      public Cell Cell
      {
        get
        {
          return _cell;
        }
        set
        {
          __isset.cell = true;
          this._cell = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool mutator;
        public bool cell;
      }

      public async_mutator_set_cell_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Mutator = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Cell = new Cell();
                  Cell.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("async_mutator_set_cell_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.mutator) {
            field.Name = "mutator";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Mutator);
            oprot.WriteFieldEnd();
          }
          if (Cell != null && __isset.cell) {
            field.Name = "cell";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Cell.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("async_mutator_set_cell_args(");
        bool __first = true;
        if (__isset.mutator) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Mutator: ");
          __sb.Append(Mutator);
        }
        if (Cell != null && __isset.cell) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Cell: ");
          __sb.Append(Cell== null ? "<null>" : Cell.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class async_mutator_set_cell_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public async_mutator_set_cell_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("async_mutator_set_cell_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("async_mutator_set_cell_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class set_cell_async_args : TBase
    {
      private long _mutator;
      private Cell _cell;

      public long Mutator
      {
        get
        {
          return _mutator;
        }
        set
        {
          __isset.mutator = true;
          this._mutator = value;
        }
      }

      public Cell Cell
      {
        get
        {
          return _cell;
        }
        set
        {
          __isset.cell = true;
          this._cell = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool mutator;
        public bool cell;
      }

      public set_cell_async_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Mutator = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Cell = new Cell();
                  Cell.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("set_cell_async_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.mutator) {
            field.Name = "mutator";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Mutator);
            oprot.WriteFieldEnd();
          }
          if (Cell != null && __isset.cell) {
            field.Name = "cell";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Cell.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("set_cell_async_args(");
        bool __first = true;
        if (__isset.mutator) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Mutator: ");
          __sb.Append(Mutator);
        }
        if (Cell != null && __isset.cell) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Cell: ");
          __sb.Append(Cell== null ? "<null>" : Cell.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class set_cell_async_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public set_cell_async_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("set_cell_async_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("set_cell_async_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class async_mutator_set_cell_as_array_args : TBase
    {
      private long _mutator;
      private List<string> _cell;

      public long Mutator
      {
        get
        {
          return _mutator;
        }
        set
        {
          __isset.mutator = true;
          this._mutator = value;
        }
      }

      public List<string> Cell
      {
        get
        {
          return _cell;
        }
        set
        {
          __isset.cell = true;
          this._cell = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool mutator;
        public bool cell;
      }

      public async_mutator_set_cell_as_array_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Mutator = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.List) {
                  {
                    Cell = new List<string>();
                    TList _list174 = iprot.ReadListBegin();
                    for( int _i175 = 0; _i175 < _list174.Count; ++_i175)
                    {
                      string _elem176;
                      _elem176 = iprot.ReadString();
                      Cell.Add(_elem176);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("async_mutator_set_cell_as_array_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.mutator) {
            field.Name = "mutator";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Mutator);
            oprot.WriteFieldEnd();
          }
          if (Cell != null && __isset.cell) {
            field.Name = "cell";
            field.Type = TType.List;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Cell.Count));
              foreach (string _iter177 in Cell)
              {
                oprot.WriteString(_iter177);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("async_mutator_set_cell_as_array_args(");
        bool __first = true;
        if (__isset.mutator) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Mutator: ");
          __sb.Append(Mutator);
        }
        if (Cell != null && __isset.cell) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Cell: ");
          __sb.Append(Cell);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class async_mutator_set_cell_as_array_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public async_mutator_set_cell_as_array_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("async_mutator_set_cell_as_array_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("async_mutator_set_cell_as_array_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class set_cell_as_array_async_args : TBase
    {
      private long _mutator;
      private List<string> _cell;

      public long Mutator
      {
        get
        {
          return _mutator;
        }
        set
        {
          __isset.mutator = true;
          this._mutator = value;
        }
      }

      public List<string> Cell
      {
        get
        {
          return _cell;
        }
        set
        {
          __isset.cell = true;
          this._cell = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool mutator;
        public bool cell;
      }

      public set_cell_as_array_async_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Mutator = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.List) {
                  {
                    Cell = new List<string>();
                    TList _list178 = iprot.ReadListBegin();
                    for( int _i179 = 0; _i179 < _list178.Count; ++_i179)
                    {
                      string _elem180;
                      _elem180 = iprot.ReadString();
                      Cell.Add(_elem180);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("set_cell_as_array_async_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.mutator) {
            field.Name = "mutator";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Mutator);
            oprot.WriteFieldEnd();
          }
          if (Cell != null && __isset.cell) {
            field.Name = "cell";
            field.Type = TType.List;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Cell.Count));
              foreach (string _iter181 in Cell)
              {
                oprot.WriteString(_iter181);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("set_cell_as_array_async_args(");
        bool __first = true;
        if (__isset.mutator) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Mutator: ");
          __sb.Append(Mutator);
        }
        if (Cell != null && __isset.cell) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Cell: ");
          __sb.Append(Cell);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class set_cell_as_array_async_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public set_cell_as_array_async_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("set_cell_as_array_async_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("set_cell_as_array_async_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class async_mutator_set_cells_args : TBase
    {
      private long _mutator;
      private List<Cell> _cells;

      public long Mutator
      {
        get
        {
          return _mutator;
        }
        set
        {
          __isset.mutator = true;
          this._mutator = value;
        }
      }

      public List<Cell> Cells
      {
        get
        {
          return _cells;
        }
        set
        {
          __isset.cells = true;
          this._cells = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool mutator;
        public bool cells;
      }

      public async_mutator_set_cells_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Mutator = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.List) {
                  {
                    Cells = new List<Cell>();
                    TList _list182 = iprot.ReadListBegin();
                    for( int _i183 = 0; _i183 < _list182.Count; ++_i183)
                    {
                      Cell _elem184;
                      _elem184 = new Cell();
                      _elem184.Read(iprot);
                      Cells.Add(_elem184);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("async_mutator_set_cells_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.mutator) {
            field.Name = "mutator";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Mutator);
            oprot.WriteFieldEnd();
          }
          if (Cells != null && __isset.cells) {
            field.Name = "cells";
            field.Type = TType.List;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Cells.Count));
              foreach (Cell _iter185 in Cells)
              {
                _iter185.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("async_mutator_set_cells_args(");
        bool __first = true;
        if (__isset.mutator) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Mutator: ");
          __sb.Append(Mutator);
        }
        if (Cells != null && __isset.cells) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Cells: ");
          __sb.Append(Cells);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class async_mutator_set_cells_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public async_mutator_set_cells_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("async_mutator_set_cells_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("async_mutator_set_cells_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class set_cells_async_args : TBase
    {
      private long _mutator;
      private List<Cell> _cells;

      public long Mutator
      {
        get
        {
          return _mutator;
        }
        set
        {
          __isset.mutator = true;
          this._mutator = value;
        }
      }

      public List<Cell> Cells
      {
        get
        {
          return _cells;
        }
        set
        {
          __isset.cells = true;
          this._cells = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool mutator;
        public bool cells;
      }

      public set_cells_async_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Mutator = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.List) {
                  {
                    Cells = new List<Cell>();
                    TList _list186 = iprot.ReadListBegin();
                    for( int _i187 = 0; _i187 < _list186.Count; ++_i187)
                    {
                      Cell _elem188;
                      _elem188 = new Cell();
                      _elem188.Read(iprot);
                      Cells.Add(_elem188);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("set_cells_async_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.mutator) {
            field.Name = "mutator";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Mutator);
            oprot.WriteFieldEnd();
          }
          if (Cells != null && __isset.cells) {
            field.Name = "cells";
            field.Type = TType.List;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Cells.Count));
              foreach (Cell _iter189 in Cells)
              {
                _iter189.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("set_cells_async_args(");
        bool __first = true;
        if (__isset.mutator) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Mutator: ");
          __sb.Append(Mutator);
        }
        if (Cells != null && __isset.cells) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Cells: ");
          __sb.Append(Cells);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class set_cells_async_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public set_cells_async_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("set_cells_async_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("set_cells_async_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class async_mutator_set_cells_as_arrays_args : TBase
    {
      private long _mutator;
      private List<List<string>> _cells;

      public long Mutator
      {
        get
        {
          return _mutator;
        }
        set
        {
          __isset.mutator = true;
          this._mutator = value;
        }
      }

      public List<List<string>> Cells
      {
        get
        {
          return _cells;
        }
        set
        {
          __isset.cells = true;
          this._cells = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool mutator;
        public bool cells;
      }

      public async_mutator_set_cells_as_arrays_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Mutator = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.List) {
                  {
                    Cells = new List<List<string>>();
                    TList _list190 = iprot.ReadListBegin();
                    for( int _i191 = 0; _i191 < _list190.Count; ++_i191)
                    {
                      List<string> _elem192;
                      {
                        _elem192 = new List<string>();
                        TList _list193 = iprot.ReadListBegin();
                        for( int _i194 = 0; _i194 < _list193.Count; ++_i194)
                        {
                          string _elem195;
                          _elem195 = iprot.ReadString();
                          _elem192.Add(_elem195);
                        }
                        iprot.ReadListEnd();
                      }
                      Cells.Add(_elem192);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("async_mutator_set_cells_as_arrays_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.mutator) {
            field.Name = "mutator";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Mutator);
            oprot.WriteFieldEnd();
          }
          if (Cells != null && __isset.cells) {
            field.Name = "cells";
            field.Type = TType.List;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.List, Cells.Count));
              foreach (List<string> _iter196 in Cells)
              {
                {
                  oprot.WriteListBegin(new TList(TType.String, _iter196.Count));
                  foreach (string _iter197 in _iter196)
                  {
                    oprot.WriteString(_iter197);
                  }
                  oprot.WriteListEnd();
                }
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("async_mutator_set_cells_as_arrays_args(");
        bool __first = true;
        if (__isset.mutator) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Mutator: ");
          __sb.Append(Mutator);
        }
        if (Cells != null && __isset.cells) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Cells: ");
          __sb.Append(Cells);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class async_mutator_set_cells_as_arrays_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public async_mutator_set_cells_as_arrays_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("async_mutator_set_cells_as_arrays_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("async_mutator_set_cells_as_arrays_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class set_cells_as_arrays_async_args : TBase
    {
      private long _mutator;
      private List<List<string>> _cells;

      public long Mutator
      {
        get
        {
          return _mutator;
        }
        set
        {
          __isset.mutator = true;
          this._mutator = value;
        }
      }

      public List<List<string>> Cells
      {
        get
        {
          return _cells;
        }
        set
        {
          __isset.cells = true;
          this._cells = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool mutator;
        public bool cells;
      }

      public set_cells_as_arrays_async_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Mutator = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.List) {
                  {
                    Cells = new List<List<string>>();
                    TList _list198 = iprot.ReadListBegin();
                    for( int _i199 = 0; _i199 < _list198.Count; ++_i199)
                    {
                      List<string> _elem200;
                      {
                        _elem200 = new List<string>();
                        TList _list201 = iprot.ReadListBegin();
                        for( int _i202 = 0; _i202 < _list201.Count; ++_i202)
                        {
                          string _elem203;
                          _elem203 = iprot.ReadString();
                          _elem200.Add(_elem203);
                        }
                        iprot.ReadListEnd();
                      }
                      Cells.Add(_elem200);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("set_cells_as_arrays_async_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.mutator) {
            field.Name = "mutator";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Mutator);
            oprot.WriteFieldEnd();
          }
          if (Cells != null && __isset.cells) {
            field.Name = "cells";
            field.Type = TType.List;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.List, Cells.Count));
              foreach (List<string> _iter204 in Cells)
              {
                {
                  oprot.WriteListBegin(new TList(TType.String, _iter204.Count));
                  foreach (string _iter205 in _iter204)
                  {
                    oprot.WriteString(_iter205);
                  }
                  oprot.WriteListEnd();
                }
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("set_cells_as_arrays_async_args(");
        bool __first = true;
        if (__isset.mutator) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Mutator: ");
          __sb.Append(Mutator);
        }
        if (Cells != null && __isset.cells) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Cells: ");
          __sb.Append(Cells);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class set_cells_as_arrays_async_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public set_cells_as_arrays_async_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("set_cells_as_arrays_async_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("set_cells_as_arrays_async_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class async_mutator_set_cells_serialized_args : TBase
    {
      private long _mutator;
      private byte[] _cells;
      private bool _flush;

      public long Mutator
      {
        get
        {
          return _mutator;
        }
        set
        {
          __isset.mutator = true;
          this._mutator = value;
        }
      }

      public byte[] Cells
      {
        get
        {
          return _cells;
        }
        set
        {
          __isset.cells = true;
          this._cells = value;
        }
      }

      public bool Flush
      {
        get
        {
          return _flush;
        }
        set
        {
          __isset.flush = true;
          this._flush = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool mutator;
        public bool cells;
        public bool flush;
      }

      public async_mutator_set_cells_serialized_args() {
        this._flush = false;
        this.__isset.flush = true;
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Mutator = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Cells = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Bool) {
                  Flush = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("async_mutator_set_cells_serialized_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.mutator) {
            field.Name = "mutator";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Mutator);
            oprot.WriteFieldEnd();
          }
          if (Cells != null && __isset.cells) {
            field.Name = "cells";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Cells);
            oprot.WriteFieldEnd();
          }
          if (__isset.flush) {
            field.Name = "flush";
            field.Type = TType.Bool;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Flush);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("async_mutator_set_cells_serialized_args(");
        bool __first = true;
        if (__isset.mutator) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Mutator: ");
          __sb.Append(Mutator);
        }
        if (Cells != null && __isset.cells) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Cells: ");
          __sb.Append(Cells);
        }
        if (__isset.flush) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Flush: ");
          __sb.Append(Flush);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class async_mutator_set_cells_serialized_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public async_mutator_set_cells_serialized_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("async_mutator_set_cells_serialized_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("async_mutator_set_cells_serialized_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class set_cells_serialized_async_args : TBase
    {
      private long _mutator;
      private byte[] _cells;
      private bool _flush;

      public long Mutator
      {
        get
        {
          return _mutator;
        }
        set
        {
          __isset.mutator = true;
          this._mutator = value;
        }
      }

      public byte[] Cells
      {
        get
        {
          return _cells;
        }
        set
        {
          __isset.cells = true;
          this._cells = value;
        }
      }

      public bool Flush
      {
        get
        {
          return _flush;
        }
        set
        {
          __isset.flush = true;
          this._flush = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool mutator;
        public bool cells;
        public bool flush;
      }

      public set_cells_serialized_async_args() {
        this._flush = false;
        this.__isset.flush = true;
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Mutator = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Cells = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Bool) {
                  Flush = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("set_cells_serialized_async_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.mutator) {
            field.Name = "mutator";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Mutator);
            oprot.WriteFieldEnd();
          }
          if (Cells != null && __isset.cells) {
            field.Name = "cells";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Cells);
            oprot.WriteFieldEnd();
          }
          if (__isset.flush) {
            field.Name = "flush";
            field.Type = TType.Bool;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Flush);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("set_cells_serialized_async_args(");
        bool __first = true;
        if (__isset.mutator) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Mutator: ");
          __sb.Append(Mutator);
        }
        if (Cells != null && __isset.cells) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Cells: ");
          __sb.Append(Cells);
        }
        if (__isset.flush) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Flush: ");
          __sb.Append(Flush);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class set_cells_serialized_async_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public set_cells_serialized_async_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("set_cells_serialized_async_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("set_cells_serialized_async_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class async_mutator_flush_args : TBase
    {
      private long _mutator;

      public long Mutator
      {
        get
        {
          return _mutator;
        }
        set
        {
          __isset.mutator = true;
          this._mutator = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool mutator;
      }

      public async_mutator_flush_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Mutator = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("async_mutator_flush_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.mutator) {
            field.Name = "mutator";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Mutator);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("async_mutator_flush_args(");
        bool __first = true;
        if (__isset.mutator) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Mutator: ");
          __sb.Append(Mutator);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class async_mutator_flush_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public async_mutator_flush_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("async_mutator_flush_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("async_mutator_flush_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class flush_mutator_async_args : TBase
    {
      private long _mutator;

      public long Mutator
      {
        get
        {
          return _mutator;
        }
        set
        {
          __isset.mutator = true;
          this._mutator = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool mutator;
      }

      public flush_mutator_async_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Mutator = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("flush_mutator_async_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.mutator) {
            field.Name = "mutator";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Mutator);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("flush_mutator_async_args(");
        bool __first = true;
        if (__isset.mutator) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Mutator: ");
          __sb.Append(Mutator);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class flush_mutator_async_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public flush_mutator_async_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("flush_mutator_async_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("flush_mutator_async_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class namespace_exists_args : TBase
    {
      private string _ns;

      public string Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
      }

      public namespace_exists_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Ns = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("namespace_exists_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Ns != null && __isset.ns) {
            field.Name = "ns";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Ns);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("namespace_exists_args(");
        bool __first = true;
        if (Ns != null && __isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class namespace_exists_result : TBase
    {
      private bool _success;
      private ClientException _e;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public namespace_exists_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("namespace_exists_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("namespace_exists_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class exists_namespace_args : TBase
    {
      private string _ns;

      public string Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
      }

      public exists_namespace_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Ns = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("exists_namespace_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Ns != null && __isset.ns) {
            field.Name = "ns";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Ns);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("exists_namespace_args(");
        bool __first = true;
        if (Ns != null && __isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class exists_namespace_result : TBase
    {
      private bool _success;
      private ClientException _e;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public exists_namespace_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("exists_namespace_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("exists_namespace_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class exists_table_args : TBase
    {
      private long _ns;
      private string _name;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool name;
      }

      public exists_table_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("exists_table_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          if (Name != null && __isset.name) {
            field.Name = "name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Name);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("exists_table_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (Name != null && __isset.name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Name: ");
          __sb.Append(Name);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class exists_table_result : TBase
    {
      private bool _success;
      private ClientException _e;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public exists_table_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("exists_table_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("exists_table_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class table_exists_args : TBase
    {
      private long _ns;
      private string _name;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool name;
      }

      public table_exists_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("table_exists_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          if (Name != null && __isset.name) {
            field.Name = "name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Name);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("table_exists_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (Name != null && __isset.name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Name: ");
          __sb.Append(Name);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class table_exists_result : TBase
    {
      private bool _success;
      private ClientException _e;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public table_exists_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("table_exists_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("table_exists_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class table_get_id_args : TBase
    {
      private long _ns;
      private string _table_name;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool table_name;
      }

      public table_get_id_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Table_name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("table_get_id_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          if (Table_name != null && __isset.table_name) {
            field.Name = "table_name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Table_name);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("table_get_id_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (Table_name != null && __isset.table_name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Table_name: ");
          __sb.Append(Table_name);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class table_get_id_result : TBase
    {
      private string _success;
      private ClientException _e;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public table_get_id_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("table_get_id_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("table_get_id_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class get_table_id_args : TBase
    {
      private long _ns;
      private string _table_name;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool table_name;
      }

      public get_table_id_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Table_name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("get_table_id_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          if (Table_name != null && __isset.table_name) {
            field.Name = "table_name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Table_name);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("get_table_id_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (Table_name != null && __isset.table_name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Table_name: ");
          __sb.Append(Table_name);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class get_table_id_result : TBase
    {
      private string _success;
      private ClientException _e;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public get_table_id_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("get_table_id_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("get_table_id_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class table_get_schema_str_args : TBase
    {
      private long _ns;
      private string _table_name;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool table_name;
      }

      public table_get_schema_str_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Table_name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("table_get_schema_str_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          if (Table_name != null && __isset.table_name) {
            field.Name = "table_name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Table_name);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("table_get_schema_str_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (Table_name != null && __isset.table_name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Table_name: ");
          __sb.Append(Table_name);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class table_get_schema_str_result : TBase
    {
      private string _success;
      private ClientException _e;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public table_get_schema_str_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("table_get_schema_str_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("table_get_schema_str_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class get_schema_str_args : TBase
    {
      private long _ns;
      private string _table_name;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool table_name;
      }

      public get_schema_str_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Table_name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("get_schema_str_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          if (Table_name != null && __isset.table_name) {
            field.Name = "table_name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Table_name);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("get_schema_str_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (Table_name != null && __isset.table_name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Table_name: ");
          __sb.Append(Table_name);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class get_schema_str_result : TBase
    {
      private string _success;
      private ClientException _e;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public get_schema_str_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("get_schema_str_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("get_schema_str_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class table_get_schema_str_with_ids_args : TBase
    {
      private long _ns;
      private string _table_name;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool table_name;
      }

      public table_get_schema_str_with_ids_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Table_name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("table_get_schema_str_with_ids_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          if (Table_name != null && __isset.table_name) {
            field.Name = "table_name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Table_name);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("table_get_schema_str_with_ids_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (Table_name != null && __isset.table_name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Table_name: ");
          __sb.Append(Table_name);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class table_get_schema_str_with_ids_result : TBase
    {
      private string _success;
      private ClientException _e;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public table_get_schema_str_with_ids_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("table_get_schema_str_with_ids_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("table_get_schema_str_with_ids_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class get_schema_str_with_ids_args : TBase
    {
      private long _ns;
      private string _table_name;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool table_name;
      }

      public get_schema_str_with_ids_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Table_name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("get_schema_str_with_ids_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          if (Table_name != null && __isset.table_name) {
            field.Name = "table_name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Table_name);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("get_schema_str_with_ids_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (Table_name != null && __isset.table_name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Table_name: ");
          __sb.Append(Table_name);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class get_schema_str_with_ids_result : TBase
    {
      private string _success;
      private ClientException _e;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public get_schema_str_with_ids_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("get_schema_str_with_ids_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("get_schema_str_with_ids_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class table_get_schema_args : TBase
    {
      private long _ns;
      private string _table_name;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool table_name;
      }

      public table_get_schema_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Table_name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("table_get_schema_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          if (Table_name != null && __isset.table_name) {
            field.Name = "table_name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Table_name);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("table_get_schema_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (Table_name != null && __isset.table_name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Table_name: ");
          __sb.Append(Table_name);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class table_get_schema_result : TBase
    {
      private Schema _success;
      private ClientException _e;

      public Schema Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public table_get_schema_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new Schema();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("table_get_schema_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("table_get_schema_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class get_schema_args : TBase
    {
      private long _ns;
      private string _table_name;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool table_name;
      }

      public get_schema_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Table_name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("get_schema_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          if (Table_name != null && __isset.table_name) {
            field.Name = "table_name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Table_name);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("get_schema_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (Table_name != null && __isset.table_name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Table_name: ");
          __sb.Append(Table_name);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class get_schema_result : TBase
    {
      private Schema _success;
      private ClientException _e;

      public Schema Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public get_schema_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new Schema();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("get_schema_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("get_schema_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class get_tables_args : TBase
    {
      private long _ns;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
      }

      public get_tables_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("get_tables_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("get_tables_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class get_tables_result : TBase
    {
      private List<string> _success;
      private ClientException _e;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public get_tables_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<string>();
                    TList _list206 = iprot.ReadListBegin();
                    for( int _i207 = 0; _i207 < _list206.Count; ++_i207)
                    {
                      string _elem208;
                      _elem208 = iprot.ReadString();
                      Success.Add(_elem208);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("get_tables_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.String, Success.Count));
                foreach (string _iter209 in Success)
                {
                  oprot.WriteString(_iter209);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("get_tables_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class namespace_get_listing_args : TBase
    {
      private long _ns;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
      }

      public namespace_get_listing_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("namespace_get_listing_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("namespace_get_listing_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class namespace_get_listing_result : TBase
    {
      private List<NamespaceListing> _success;
      private ClientException _e;

      public List<NamespaceListing> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public namespace_get_listing_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<NamespaceListing>();
                    TList _list210 = iprot.ReadListBegin();
                    for( int _i211 = 0; _i211 < _list210.Count; ++_i211)
                    {
                      NamespaceListing _elem212;
                      _elem212 = new NamespaceListing();
                      _elem212.Read(iprot);
                      Success.Add(_elem212);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("namespace_get_listing_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (NamespaceListing _iter213 in Success)
                {
                  _iter213.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("namespace_get_listing_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class get_listing_args : TBase
    {
      private long _ns;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
      }

      public get_listing_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("get_listing_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("get_listing_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class get_listing_result : TBase
    {
      private List<NamespaceListing> _success;
      private ClientException _e;

      public List<NamespaceListing> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public get_listing_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<NamespaceListing>();
                    TList _list214 = iprot.ReadListBegin();
                    for( int _i215 = 0; _i215 < _list214.Count; ++_i215)
                    {
                      NamespaceListing _elem216;
                      _elem216 = new NamespaceListing();
                      _elem216.Read(iprot);
                      Success.Add(_elem216);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("get_listing_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (NamespaceListing _iter217 in Success)
                {
                  _iter217.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("get_listing_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class table_get_splits_args : TBase
    {
      private long _ns;
      private string _table_name;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool table_name;
      }

      public table_get_splits_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Table_name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("table_get_splits_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          if (Table_name != null && __isset.table_name) {
            field.Name = "table_name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Table_name);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("table_get_splits_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (Table_name != null && __isset.table_name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Table_name: ");
          __sb.Append(Table_name);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class table_get_splits_result : TBase
    {
      private List<TableSplit> _success;
      private ClientException _e;

      public List<TableSplit> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public table_get_splits_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<TableSplit>();
                    TList _list218 = iprot.ReadListBegin();
                    for( int _i219 = 0; _i219 < _list218.Count; ++_i219)
                    {
                      TableSplit _elem220;
                      _elem220 = new TableSplit();
                      _elem220.Read(iprot);
                      Success.Add(_elem220);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("table_get_splits_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (TableSplit _iter221 in Success)
                {
                  _iter221.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("table_get_splits_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class get_table_splits_args : TBase
    {
      private long _ns;
      private string _table_name;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool table_name;
      }

      public get_table_splits_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Table_name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("get_table_splits_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          if (Table_name != null && __isset.table_name) {
            field.Name = "table_name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Table_name);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("get_table_splits_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (Table_name != null && __isset.table_name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Table_name: ");
          __sb.Append(Table_name);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class get_table_splits_result : TBase
    {
      private List<TableSplit> _success;
      private ClientException _e;

      public List<TableSplit> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public get_table_splits_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<TableSplit>();
                    TList _list222 = iprot.ReadListBegin();
                    for( int _i223 = 0; _i223 < _list222.Count; ++_i223)
                    {
                      TableSplit _elem224;
                      _elem224 = new TableSplit();
                      _elem224.Read(iprot);
                      Success.Add(_elem224);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("get_table_splits_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (TableSplit _iter225 in Success)
                {
                  _iter225.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("get_table_splits_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class namespace_drop_args : TBase
    {
      private string _ns;
      private bool _if_exists;

      public string Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public bool If_exists
      {
        get
        {
          return _if_exists;
        }
        set
        {
          __isset.if_exists = true;
          this._if_exists = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool if_exists;
      }

      public namespace_drop_args() {
        this._if_exists = true;
        this.__isset.if_exists = true;
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Ns = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Bool) {
                  If_exists = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("namespace_drop_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Ns != null && __isset.ns) {
            field.Name = "ns";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Ns);
            oprot.WriteFieldEnd();
          }
          if (__isset.if_exists) {
            field.Name = "if_exists";
            field.Type = TType.Bool;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(If_exists);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("namespace_drop_args(");
        bool __first = true;
        if (Ns != null && __isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (__isset.if_exists) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("If_exists: ");
          __sb.Append(If_exists);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class namespace_drop_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public namespace_drop_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("namespace_drop_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("namespace_drop_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class drop_namespace_args : TBase
    {
      private string _ns;
      private bool _if_exists;

      public string Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public bool If_exists
      {
        get
        {
          return _if_exists;
        }
        set
        {
          __isset.if_exists = true;
          this._if_exists = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool if_exists;
      }

      public drop_namespace_args() {
        this._if_exists = true;
        this.__isset.if_exists = true;
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Ns = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Bool) {
                  If_exists = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("drop_namespace_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Ns != null && __isset.ns) {
            field.Name = "ns";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Ns);
            oprot.WriteFieldEnd();
          }
          if (__isset.if_exists) {
            field.Name = "if_exists";
            field.Type = TType.Bool;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(If_exists);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("drop_namespace_args(");
        bool __first = true;
        if (Ns != null && __isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (__isset.if_exists) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("If_exists: ");
          __sb.Append(If_exists);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class drop_namespace_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public drop_namespace_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("drop_namespace_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("drop_namespace_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class rename_table_args : TBase
    {
      private long _ns;
      private string _name;
      private string _new_name;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }

      public string New_name
      {
        get
        {
          return _new_name;
        }
        set
        {
          __isset.new_name = true;
          this._new_name = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool name;
        public bool new_name;
      }

      public rename_table_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  New_name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("rename_table_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          if (Name != null && __isset.name) {
            field.Name = "name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Name);
            oprot.WriteFieldEnd();
          }
          if (New_name != null && __isset.new_name) {
            field.Name = "new_name";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(New_name);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("rename_table_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (Name != null && __isset.name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Name: ");
          __sb.Append(Name);
        }
        if (New_name != null && __isset.new_name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("New_name: ");
          __sb.Append(New_name);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class rename_table_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public rename_table_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("rename_table_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("rename_table_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class table_rename_args : TBase
    {
      private long _ns;
      private string _name;
      private string _new_name;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }

      public string New_name
      {
        get
        {
          return _new_name;
        }
        set
        {
          __isset.new_name = true;
          this._new_name = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool name;
        public bool new_name;
      }

      public table_rename_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  New_name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("table_rename_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          if (Name != null && __isset.name) {
            field.Name = "name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Name);
            oprot.WriteFieldEnd();
          }
          if (New_name != null && __isset.new_name) {
            field.Name = "new_name";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(New_name);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("table_rename_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (Name != null && __isset.name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Name: ");
          __sb.Append(Name);
        }
        if (New_name != null && __isset.new_name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("New_name: ");
          __sb.Append(New_name);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class table_rename_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public table_rename_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("table_rename_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("table_rename_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class drop_table_args : TBase
    {
      private long _ns;
      private string _name;
      private bool _if_exists;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }

      public bool If_exists
      {
        get
        {
          return _if_exists;
        }
        set
        {
          __isset.if_exists = true;
          this._if_exists = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool name;
        public bool if_exists;
      }

      public drop_table_args() {
        this._if_exists = true;
        this.__isset.if_exists = true;
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Bool) {
                  If_exists = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("drop_table_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          if (Name != null && __isset.name) {
            field.Name = "name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Name);
            oprot.WriteFieldEnd();
          }
          if (__isset.if_exists) {
            field.Name = "if_exists";
            field.Type = TType.Bool;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(If_exists);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("drop_table_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (Name != null && __isset.name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Name: ");
          __sb.Append(Name);
        }
        if (__isset.if_exists) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("If_exists: ");
          __sb.Append(If_exists);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class drop_table_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public drop_table_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("drop_table_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("drop_table_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class table_drop_args : TBase
    {
      private long _ns;
      private string _name;
      private bool _if_exists;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }

      public bool If_exists
      {
        get
        {
          return _if_exists;
        }
        set
        {
          __isset.if_exists = true;
          this._if_exists = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool name;
        public bool if_exists;
      }

      public table_drop_args() {
        this._if_exists = true;
        this.__isset.if_exists = true;
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Bool) {
                  If_exists = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("table_drop_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          if (Name != null && __isset.name) {
            field.Name = "name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Name);
            oprot.WriteFieldEnd();
          }
          if (__isset.if_exists) {
            field.Name = "if_exists";
            field.Type = TType.Bool;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(If_exists);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("table_drop_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (Name != null && __isset.name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Name: ");
          __sb.Append(Name);
        }
        if (__isset.if_exists) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("If_exists: ");
          __sb.Append(If_exists);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class table_drop_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public table_drop_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("table_drop_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("table_drop_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class generate_guid_args : TBase
    {

      public generate_guid_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("generate_guid_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("generate_guid_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class generate_guid_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public generate_guid_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("generate_guid_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("generate_guid_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class create_cell_unique_args : TBase
    {
      private long _ns;
      private string _table_name;
      private Key _key;
      private string _value;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public Key Key
      {
        get
        {
          return _key;
        }
        set
        {
          __isset.key = true;
          this._key = value;
        }
      }

      public string Value
      {
        get
        {
          return _value;
        }
        set
        {
          __isset.@value = true;
          this._value = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool key;
        public bool @value;
      }

      public create_cell_unique_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Ns = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Table_name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Struct) {
                  Key = new Key();
                  Key.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  Value = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("create_cell_unique_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.ns) {
            field.Name = "ns";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ns);
            oprot.WriteFieldEnd();
          }
          if (Table_name != null && __isset.table_name) {
            field.Name = "table_name";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Table_name);
            oprot.WriteFieldEnd();
          }
          if (Key != null && __isset.key) {
            field.Name = "key";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            Key.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (Value != null && __isset.@value) {
            field.Name = "value";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Value);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("create_cell_unique_args(");
        bool __first = true;
        if (__isset.ns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ns: ");
          __sb.Append(Ns);
        }
        if (Table_name != null && __isset.table_name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Table_name: ");
          __sb.Append(Table_name);
        }
        if (Key != null && __isset.key) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Key: ");
          __sb.Append(Key== null ? "<null>" : Key.ToString());
        }
        if (Value != null && __isset.@value) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Value: ");
          __sb.Append(Value);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class create_cell_unique_result : TBase
    {
      private string _success;
      private ClientException _e;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public create_cell_unique_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("create_cell_unique_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("create_cell_unique_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class error_get_text_args : TBase
    {
      private int _error_code;

      public int Error_code
      {
        get
        {
          return _error_code;
        }
        set
        {
          __isset.error_code = true;
          this._error_code = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool error_code;
      }

      public error_get_text_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  Error_code = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("error_get_text_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.error_code) {
            field.Name = "error_code";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Error_code);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("error_get_text_args(");
        bool __first = true;
        if (__isset.error_code) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Error_code: ");
          __sb.Append(Error_code);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class error_get_text_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public error_get_text_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("error_get_text_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("error_get_text_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class status_args : TBase
    {

      public status_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("status_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("status_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class status_result : TBase
    {
      private Status _success;
      private ClientException _e;

      public Status Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public status_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new Status();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("status_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("status_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class shutdown_args : TBase
    {

      public shutdown_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("shutdown_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("shutdown_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class shutdown_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public shutdown_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new ClientException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("shutdown_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("shutdown_result(");
        bool __first = true;
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
