/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Hypertable.ThriftGen
{

  /// <summary>
  /// Describes a ColumnFamily
  /// <dl>
  ///   <dt>name</dt>
  ///   <dd>Name of the column family</dd>
  /// 
  ///   <dt>ag</dt>
  ///   <dd>Name of the access group for this CF</dd>
  /// 
  ///   <dt>max_versions</dt>
  ///   <dd>Max versions of the same cell to be stored</dd>
  /// 
  ///   <dt>ttl</dt>
  ///   <dd>Time to live for cells in the CF (ie delete cells older than this time)</dd>
  /// </dl>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ColumnFamilySpec : TBase
  {
    private string _name;
    private string _access_group;
    private bool _deleted;
    private long _generation;
    private int _id;
    private bool _value_index;
    private bool _qualifier_index;
    private ColumnFamilyOptions _options;

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public string Access_group
    {
      get
      {
        return _access_group;
      }
      set
      {
        __isset.access_group = true;
        this._access_group = value;
      }
    }

    public bool Deleted
    {
      get
      {
        return _deleted;
      }
      set
      {
        __isset.deleted = true;
        this._deleted = value;
      }
    }

    public long Generation
    {
      get
      {
        return _generation;
      }
      set
      {
        __isset.generation = true;
        this._generation = value;
      }
    }

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public bool Value_index
    {
      get
      {
        return _value_index;
      }
      set
      {
        __isset.value_index = true;
        this._value_index = value;
      }
    }

    public bool Qualifier_index
    {
      get
      {
        return _qualifier_index;
      }
      set
      {
        __isset.qualifier_index = true;
        this._qualifier_index = value;
      }
    }

    public ColumnFamilyOptions Options
    {
      get
      {
        return _options;
      }
      set
      {
        __isset.options = true;
        this._options = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool name;
      public bool access_group;
      public bool deleted;
      public bool generation;
      public bool id;
      public bool value_index;
      public bool qualifier_index;
      public bool options;
    }

    public ColumnFamilySpec() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Access_group = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                Deleted = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                Generation = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Id = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Bool) {
                Value_index = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Bool) {
                Qualifier_index = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.Struct) {
                Options = new ColumnFamilyOptions();
                Options.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ColumnFamilySpec");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (Access_group != null && __isset.access_group) {
          field.Name = "access_group";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Access_group);
          oprot.WriteFieldEnd();
        }
        if (__isset.deleted) {
          field.Name = "deleted";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Deleted);
          oprot.WriteFieldEnd();
        }
        if (__isset.generation) {
          field.Name = "generation";
          field.Type = TType.I64;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Generation);
          oprot.WriteFieldEnd();
        }
        if (__isset.id) {
          field.Name = "id";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Id);
          oprot.WriteFieldEnd();
        }
        if (__isset.value_index) {
          field.Name = "value_index";
          field.Type = TType.Bool;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Value_index);
          oprot.WriteFieldEnd();
        }
        if (__isset.qualifier_index) {
          field.Name = "qualifier_index";
          field.Type = TType.Bool;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Qualifier_index);
          oprot.WriteFieldEnd();
        }
        if (Options != null && __isset.options) {
          field.Name = "options";
          field.Type = TType.Struct;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          Options.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ColumnFamilySpec(");
      bool __first = true;
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (Access_group != null && __isset.access_group) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Access_group: ");
        __sb.Append(Access_group);
      }
      if (__isset.deleted) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Deleted: ");
        __sb.Append(Deleted);
      }
      if (__isset.generation) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Generation: ");
        __sb.Append(Generation);
      }
      if (__isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (__isset.value_index) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Value_index: ");
        __sb.Append(Value_index);
      }
      if (__isset.qualifier_index) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Qualifier_index: ");
        __sb.Append(Qualifier_index);
      }
      if (Options != null && __isset.options) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Options: ");
        __sb.Append(Options== null ? "<null>" : Options.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
