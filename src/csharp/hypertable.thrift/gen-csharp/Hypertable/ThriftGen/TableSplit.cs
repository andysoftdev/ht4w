/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Hypertable.ThriftGen
{

  /// <summary>
  /// Defines a table split
  /// 
  /// <dl>
  ///   <dt>start_row</dt>
  ///   <dd>Starting row of the split.</dd>
  /// 
  ///   <dt>end_row</dt>
  ///   <dd>Ending row of the split.</dd>
  /// 
  ///   <dt>location</dt>
  ///   <dd>Location (proxy name) of the split.</dd>
  /// 
  ///   <dt>ip_address</dt>
  ///   <dd>The IP address of the split.</dd>
  /// 
  ///   <dt>hostname</dt>
  ///   <dd>The hostname of the split.</dd>
  /// </dl>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TableSplit : TBase
  {
    private byte[] _start_row;
    private byte[] _end_row;
    private string _location;
    private string _ip_address;
    private string _hostname;

    public byte[] Start_row
    {
      get
      {
        return _start_row;
      }
      set
      {
        __isset.start_row = true;
        this._start_row = value;
      }
    }

    public byte[] End_row
    {
      get
      {
        return _end_row;
      }
      set
      {
        __isset.end_row = true;
        this._end_row = value;
      }
    }

    public string Location
    {
      get
      {
        return _location;
      }
      set
      {
        __isset.location = true;
        this._location = value;
      }
    }

    public string Ip_address
    {
      get
      {
        return _ip_address;
      }
      set
      {
        __isset.ip_address = true;
        this._ip_address = value;
      }
    }

    public string Hostname
    {
      get
      {
        return _hostname;
      }
      set
      {
        __isset.hostname = true;
        this._hostname = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool start_row;
      public bool end_row;
      public bool location;
      public bool ip_address;
      public bool hostname;
    }

    public TableSplit() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Start_row = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                End_row = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Location = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Ip_address = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Hostname = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TableSplit");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Start_row != null && __isset.start_row) {
          field.Name = "start_row";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Start_row);
          oprot.WriteFieldEnd();
        }
        if (End_row != null && __isset.end_row) {
          field.Name = "end_row";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(End_row);
          oprot.WriteFieldEnd();
        }
        if (Location != null && __isset.location) {
          field.Name = "location";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Location);
          oprot.WriteFieldEnd();
        }
        if (Ip_address != null && __isset.ip_address) {
          field.Name = "ip_address";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Ip_address);
          oprot.WriteFieldEnd();
        }
        if (Hostname != null && __isset.hostname) {
          field.Name = "hostname";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Hostname);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TableSplit(");
      bool __first = true;
      if (Start_row != null && __isset.start_row) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Start_row: ");
        __sb.Append(Start_row);
      }
      if (End_row != null && __isset.end_row) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("End_row: ");
        __sb.Append(End_row);
      }
      if (Location != null && __isset.location) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Location: ");
        __sb.Append(Location);
      }
      if (Ip_address != null && __isset.ip_address) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ip_address: ");
        __sb.Append(Ip_address);
      }
      if (Hostname != null && __isset.hostname) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Hostname: ");
        __sb.Append(Hostname);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
