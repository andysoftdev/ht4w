/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Hypertable.ThriftGen
{

  /// <summary>
  /// Defines a cell key
  /// 
  /// <dl>
  ///   <dt>row</dt>
  ///   <dd>Specifies the row key. Note, it cannot contain null characters.
  ///   If a row key is not specified in a return cell, it's assumed to
  ///   be the same as the previous cell</dd>
  /// 
  ///   <dt>column_family</dt>
  ///   <dd>Specifies the column family</dd>
  /// 
  ///   <dt>column_qualifier</dt>
  ///   <dd>Specifies the column qualifier. A column family must be specified.</dd>
  /// 
  ///   <dt>timestamp</dt>
  ///   <dd>Nanoseconds since epoch for the cell<dd>
  /// 
  ///   <dt>revision</dt>
  ///   <dd>A 64-bit revision number for the cell</dd>
  /// 
  ///   <dt>flag</dt>
  ///   <dd>A 16-bit integer indicating the state of the cell</dd>
  /// </dl>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Key : TBase
  {
    private string _row;
    private string _column_family;
    private string _column_qualifier;
    private long _timestamp;
    private long _revision;
    private KeyFlag _flag;

    public string Row
    {
      get
      {
        return _row;
      }
      set
      {
        __isset.row = true;
        this._row = value;
      }
    }

    public string Column_family
    {
      get
      {
        return _column_family;
      }
      set
      {
        __isset.column_family = true;
        this._column_family = value;
      }
    }

    public string Column_qualifier
    {
      get
      {
        return _column_qualifier;
      }
      set
      {
        __isset.column_qualifier = true;
        this._column_qualifier = value;
      }
    }

    public long Timestamp
    {
      get
      {
        return _timestamp;
      }
      set
      {
        __isset.timestamp = true;
        this._timestamp = value;
      }
    }

    public long Revision
    {
      get
      {
        return _revision;
      }
      set
      {
        __isset.revision = true;
        this._revision = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="KeyFlag"/>
    /// </summary>
    public KeyFlag Flag
    {
      get
      {
        return _flag;
      }
      set
      {
        __isset.flag = true;
        this._flag = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool row;
      public bool column_family;
      public bool column_qualifier;
      public bool timestamp;
      public bool revision;
      public bool flag;
    }

    public Key() {
      this._flag = KeyFlag.INSERT;
      this.__isset.flag = true;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Row = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Column_family = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Column_qualifier = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              Timestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I64) {
              Revision = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              Flag = (KeyFlag)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Key");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Row != null && __isset.row) {
        field.Name = "row";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Row);
        oprot.WriteFieldEnd();
      }
      if (Column_family != null && __isset.column_family) {
        field.Name = "column_family";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Column_family);
        oprot.WriteFieldEnd();
      }
      if (Column_qualifier != null && __isset.column_qualifier) {
        field.Name = "column_qualifier";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Column_qualifier);
        oprot.WriteFieldEnd();
      }
      if (__isset.timestamp) {
        field.Name = "timestamp";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Timestamp);
        oprot.WriteFieldEnd();
      }
      if (__isset.revision) {
        field.Name = "revision";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Revision);
        oprot.WriteFieldEnd();
      }
      if (__isset.flag) {
        field.Name = "flag";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Flag);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Key(");
      bool __first = true;
      if (Row != null && __isset.row) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Row: ");
        __sb.Append(Row);
      }
      if (Column_family != null && __isset.column_family) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Column_family: ");
        __sb.Append(Column_family);
      }
      if (Column_qualifier != null && __isset.column_qualifier) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Column_qualifier: ");
        __sb.Append(Column_qualifier);
      }
      if (__isset.timestamp) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Timestamp: ");
        __sb.Append(Timestamp);
      }
      if (__isset.revision) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Revision: ");
        __sb.Append(Revision);
      }
      if (__isset.flag) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Flag: ");
        __sb.Append(Flag);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
