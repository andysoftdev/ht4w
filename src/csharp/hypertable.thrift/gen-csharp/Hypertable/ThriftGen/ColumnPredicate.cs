/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Hypertable.ThriftGen
{

  /// <summary>
  /// Specifies a column predicate
  ///     ... WHERE column = "value"
  ///   or
  ///     ... WHERE column =^ "prefix"
  /// 
  /// <dl>
  ///   <dt>column_family</dt>
  ///   <dd>The name of the column family</dd>
  /// 
  ///   <dt>operation</dt>
  ///   <dd>The predicate operation; either EXACT_MATCH or PREFIX_MATCH</dd>
  /// 
  ///   <dt>value</dt>
  ///   <dd>The cell value or cell prefix, depending on the operation</dd>
  /// 
  ///   <dt>value_len</dt>
  ///   <dd>The size of the value</dd>
  /// 
  ///   <dt>column_qualifier</dt>
  ///   <dd>The column qualifier</dd>
  /// </dl>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ColumnPredicate : TBase
  {
    private string _column_family;
    private string _column_qualifier;
    private int _operation;
    private string _value;

    public string Column_family
    {
      get
      {
        return _column_family;
      }
      set
      {
        __isset.column_family = true;
        this._column_family = value;
      }
    }

    public string Column_qualifier
    {
      get
      {
        return _column_qualifier;
      }
      set
      {
        __isset.column_qualifier = true;
        this._column_qualifier = value;
      }
    }

    public int Operation
    {
      get
      {
        return _operation;
      }
      set
      {
        __isset.operation = true;
        this._operation = value;
      }
    }

    public string Value
    {
      get
      {
        return _value;
      }
      set
      {
        __isset.@value = true;
        this._value = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool column_family;
      public bool column_qualifier;
      public bool operation;
      public bool @value;
    }

    public ColumnPredicate() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Column_family = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Column_qualifier = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Operation = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Value = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ColumnPredicate");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Column_family != null && __isset.column_family) {
          field.Name = "column_family";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Column_family);
          oprot.WriteFieldEnd();
        }
        if (Column_qualifier != null && __isset.column_qualifier) {
          field.Name = "column_qualifier";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Column_qualifier);
          oprot.WriteFieldEnd();
        }
        if (__isset.operation) {
          field.Name = "operation";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Operation);
          oprot.WriteFieldEnd();
        }
        if (Value != null && __isset.@value) {
          field.Name = "value";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ColumnPredicate(");
      bool __first = true;
      if (Column_family != null && __isset.column_family) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Column_family: ");
        __sb.Append(Column_family);
      }
      if (Column_qualifier != null && __isset.column_qualifier) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Column_qualifier: ");
        __sb.Append(Column_qualifier);
      }
      if (__isset.operation) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Operation: ");
        __sb.Append(Operation);
      }
      if (Value != null && __isset.@value) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Value: ");
        __sb.Append(Value);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
