/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Hypertable.ThriftGen
{

  /// <summary>
  /// Specifies a result object for asynchronous requests.
  /// TODO: add support for update results
  /// 
  /// <dl>
  ///   <dt>is_empty</dt>
  ///   <dd>Indicates whether this object contains a result or not</dd>
  /// 
  ///   <dt>id</dt>
  ///   <dd>Scanner/mutator id for which these results pertain to</dd>
  ///   
  ///   <dt>is_scan</dt>
  ///   <dd>Indicates whether these are scan results or update results</dd>
  ///   
  ///   <dt>is_error</dt>
  ///   <dd>Indicates whether the async request was successful or not</dd>
  ///   
  ///   <dt>error</dt>
  ///   <dd>Error code</dd>
  /// 
  ///   <dt>error_msg</dt>
  ///   <dd>Error message</dd>
  /// 
  ///   <dt>cells</dt>
  ///   <dd>Cells returned by asynchronous scanner</dd>
  /// </dl>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Result : TBase
  {
    private int _error;
    private string _error_msg;
    private List<Cell> _cells;

    public bool Is_empty { get; set; }

    public long Id { get; set; }

    public bool Is_scan { get; set; }

    public bool Is_error { get; set; }

    public int Error
    {
      get
      {
        return _error;
      }
      set
      {
        __isset.error = true;
        this._error = value;
      }
    }

    public string Error_msg
    {
      get
      {
        return _error_msg;
      }
      set
      {
        __isset.error_msg = true;
        this._error_msg = value;
      }
    }

    public List<Cell> Cells
    {
      get
      {
        return _cells;
      }
      set
      {
        __isset.cells = true;
        this._cells = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool error;
      public bool error_msg;
      public bool cells;
    }

    public Result() {
    }

    public Result(bool is_empty, long id, bool is_scan, bool is_error) : this() {
      this.Is_empty = is_empty;
      this.Id = id;
      this.Is_scan = is_scan;
      this.Is_error = is_error;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_is_empty = false;
        bool isset_id = false;
        bool isset_is_scan = false;
        bool isset_is_error = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Bool) {
                Is_empty = iprot.ReadBool();
                isset_is_empty = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                Id = iprot.ReadI64();
                isset_id = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                Is_scan = iprot.ReadBool();
                isset_is_scan = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Bool) {
                Is_error = iprot.ReadBool();
                isset_is_error = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Error = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Error_msg = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.List) {
                {
                  Cells = new List<Cell>();
                  TList _list16 = iprot.ReadListBegin();
                  for( int _i17 = 0; _i17 < _list16.Count; ++_i17)
                  {
                    Cell _elem18;
                    _elem18 = new Cell();
                    _elem18.Read(iprot);
                    Cells.Add(_elem18);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_is_empty)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_id)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_is_scan)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_is_error)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("Result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "is_empty";
        field.Type = TType.Bool;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Is_empty);
        oprot.WriteFieldEnd();
        field.Name = "id";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Id);
        oprot.WriteFieldEnd();
        field.Name = "is_scan";
        field.Type = TType.Bool;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Is_scan);
        oprot.WriteFieldEnd();
        field.Name = "is_error";
        field.Type = TType.Bool;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Is_error);
        oprot.WriteFieldEnd();
        if (__isset.error) {
          field.Name = "error";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Error);
          oprot.WriteFieldEnd();
        }
        if (Error_msg != null && __isset.error_msg) {
          field.Name = "error_msg";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Error_msg);
          oprot.WriteFieldEnd();
        }
        if (Cells != null && __isset.cells) {
          field.Name = "cells";
          field.Type = TType.List;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Cells.Count));
            foreach (Cell _iter19 in Cells)
            {
              _iter19.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Result(");
      __sb.Append(", Is_empty: ");
      __sb.Append(Is_empty);
      __sb.Append(", Id: ");
      __sb.Append(Id);
      __sb.Append(", Is_scan: ");
      __sb.Append(Is_scan);
      __sb.Append(", Is_error: ");
      __sb.Append(Is_error);
      if (__isset.error) {
        __sb.Append(", Error: ");
        __sb.Append(Error);
      }
      if (Error_msg != null && __isset.error_msg) {
        __sb.Append(", Error_msg: ");
        __sb.Append(Error_msg);
      }
      if (Cells != null && __isset.cells) {
        __sb.Append(", Cells: ");
        __sb.Append(Cells);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
